<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classquantit_1_1btensor" kind="class" language="C++" prot="public">
    <compoundname>quantit::btensor</compoundname>
    <includes refid="btensor_8h" local="no">btensor.h</includes>
    <innerclass refid="structquantit_1_1btensor_1_1block__prop__iter" prot="public">quantit::btensor::block_prop_iter</innerclass>
    <innerclass refid="structquantit_1_1btensor_1_1block__prop__view" prot="public">quantit::btensor::block_prop_view</innerclass>
    <innerclass refid="structquantit_1_1btensor_1_1const__block__prop__iter" prot="public">quantit::btensor::const_block_prop_iter</innerclass>
    <innerclass refid="structquantit_1_1btensor_1_1const__block__prop__view" prot="public">quantit::btensor::const_block_prop_view</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classquantit_1_1btensor_1aeb10af309cd0aa5b68f995f237f115fb" prot="public" static="no">
        <type>std::vector&lt; int64_t &gt;</type>
        <definition>using quantit::btensor::index_list =  std::vector&lt;int64_t&gt;</definition>
        <argsstring></argsstring>
        <name>index_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="106" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1ad5e43901944555555e9bfee4f0d9ee3f" prot="public" static="no">
        <type><ref refid="classquantit_1_1flat__map" kindref="compound">flat_map</ref>&lt; index_list, torch::Tensor &gt;</type>
        <definition>using quantit::btensor::block_list_t =  flat_map&lt;index_list, torch::Tensor&gt;</definition>
        <argsstring></argsstring>
        <name>block_list_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="107" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1a799bb042f48eff373f4362c44682f39a" prot="public" static="no">
        <type>std::initializer_list&lt; std::initializer_list&lt; std::tuple&lt; size_t, <ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref> &gt; &gt;&gt;</type>
        <definition>using quantit::btensor::init_list_t =  std::initializer_list&lt;std::initializer_list&lt;std::tuple&lt;size_t, any_quantity&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>init_list_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="108" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1a37483f60431fd313140dc861cb436fa8" prot="public" static="no">
        <type>std::vector&lt; std::vector&lt; std::tuple&lt; size_t, <ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref> &gt; &gt;&gt;</type>
        <definition>using quantit::btensor::vec_list_t =  std::vector&lt;std::vector&lt;std::tuple&lt;size_t, any_quantity&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>vec_list_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="109" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1aeb69df3f09347a2c02e972d09db4d300" prot="public" static="no">
        <type>torch::Scalar</type>
        <definition>using quantit::btensor::Scalar =  torch::Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="111" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1a2b9ad2e8d2b3d1631ee17c453e501fe4" prot="public" static="no">
        <type><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref>&lt; <ref refid="structquantit_1_1vQuantiT__iterator_1_1cgroup__iterator" kindref="compound">any_quantity_vector::iterator</ref> &gt;</type>
        <definition>using quantit::btensor::block_qtt_iter =  block_prop_iter&lt;any_quantity_vector::iterator&gt;</definition>
        <argsstring></argsstring>
        <name>block_qtt_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="200" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1a6de658368d5bec0fcf660f1493e80779" prot="public" static="no">
        <type><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref>&lt; <ref refid="structquantit_1_1vQuantiT__iterator_1_1const__cgroup__iterator" kindref="compound">any_quantity_vector::const_iterator</ref>, <ref refid="structquantit_1_1vQuantiT__iterator_1_1cgroup__iterator" kindref="compound">any_quantity_vector::iterator</ref> &gt;</type>
        <definition>using quantit::btensor::const_block_qtt_iter =  const_block_prop_iter&lt;any_quantity_vector::const_iterator, any_quantity_vector::iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_block_qtt_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="201" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1aec964e3f38a2231d64318270f09e9eef" prot="public" static="no">
        <type><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_prop_view</ref>&lt; <ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_qtt_iter</ref> &gt;</type>
        <definition>using quantit::btensor::block_qtt_view =  block_prop_view&lt;block_qtt_iter&gt;</definition>
        <argsstring></argsstring>
        <name>block_qtt_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="203" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1a04baa4f670f521b48b99b2386d618b2d" prot="public" static="no">
        <type><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_prop_view</ref>&lt; <ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_qtt_iter</ref>, <ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_qtt_iter</ref> &gt;</type>
        <definition>using quantit::btensor::const_block_qtt_view =  const_block_prop_view&lt;const_block_qtt_iter, block_qtt_iter&gt;</definition>
        <argsstring></argsstring>
        <name>const_block_qtt_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="204" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1ab9a8bc9c7102251ee3411c774ff625ce" prot="public" static="no">
        <type><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref>&lt; index_list::iterator &gt;</type>
        <definition>using quantit::btensor::block_size_iter =  block_prop_iter&lt;index_list::iterator&gt;</definition>
        <argsstring></argsstring>
        <name>block_size_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="205" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1a94aeb11429eb42d05d0607f25848050f" prot="public" static="no">
        <type><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref>&lt; index_list::const_iterator, index_list::iterator &gt;</type>
        <definition>using quantit::btensor::const_block_size_iter =  const_block_prop_iter&lt;index_list::const_iterator, index_list::iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_block_size_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="206" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1ab1d7a3469e70533a3d74ba7df3475a3d" prot="public" static="no">
        <type><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_prop_view</ref>&lt; <ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_size_iter</ref> &gt;</type>
        <definition>using quantit::btensor::block_size_view =  block_prop_view&lt;block_size_iter&gt;</definition>
        <argsstring></argsstring>
        <name>block_size_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="207" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1btensor_1ac85a6e0adca11b45539314974bd4a970" prot="public" static="no">
        <type><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_prop_view</ref>&lt; <ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_size_iter</ref>, <ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_size_iter</ref> &gt;</type>
        <definition>using quantit::btensor::const_block_size_view =  const_block_prop_view&lt;const_block_size_iter, block_size_iter&gt;</definition>
        <argsstring></argsstring>
        <name>const_block_size_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="208" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classquantit_1_1btensor_1a30cc2f016d81c4956955aeff74f9683e" prot="public" static="no" mutable="no">
        <type><ref refid="classproperty" kindref="compound">property</ref>&lt; <ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref>, <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>, <ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref> &gt;</type>
        <definition>property&lt;any_quantity, btensor, any_quantity_cref&gt; quantit::btensor::selection_rule</definition>
        <argsstring></argsstring>
        <name>selection_rule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="112" column="10" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classquantit_1_1btensor_1a409a9a8f7b44119cf2b4234d50618f95" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int quantit::btensor::rank</definition>
        <argsstring></argsstring>
        <name>rank</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="819" column="5" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquantit_1_1btensor_1aa9022a8fc879ed5e55c729943141b109" prot="private" static="no" mutable="no">
        <type>index_list</type>
        <definition>index_list quantit::btensor::sections_by_dim</definition>
        <argsstring></argsstring>
        <name>sections_by_dim</name>
        <briefdescription>
<para>number of section for each of the dimensions of the tensor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="824" column="12" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="824" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquantit_1_1btensor_1a2e1977d45ea382985a737dc2058a5f0d" prot="private" static="no" mutable="no">
        <type>index_list</type>
        <definition>index_list quantit::btensor::sections_sizes</definition>
        <argsstring></argsstring>
        <name>sections_sizes</name>
        <briefdescription>
<para>packed list of the size of each section along all dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="829" column="12" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquantit_1_1btensor_1a135e856a180c6a7227896ee9dadd1d67" prot="private" static="no" mutable="no">
        <type><ref refid="classquantit_1_1flat__map" kindref="compound">block_list_t</ref></type>
        <definition>block_list_t quantit::btensor::blocks_list</definition>
        <argsstring></argsstring>
        <name>blocks_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="832" column="14" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquantit_1_1btensor_1a09dcf6f808fb249841ff312a654382de" prot="private" static="no" mutable="no">
        <type><ref refid="classquantit_1_1any__quantity__vector" kindref="compound">any_quantity_vector</ref></type>
        <definition>any_quantity_vector quantit::btensor::c_vals</definition>
        <argsstring></argsstring>
        <name>c_vals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="834" column="5" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classquantit_1_1btensor_1a13688c300912aeb8761f20d9451606c0" prot="private" static="no" mutable="no">
        <type>c10::TensorOptions</type>
        <definition>c10::TensorOptions quantit::btensor::_options</definition>
        <argsstring></argsstring>
        <name>_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="835" column="20" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="835" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classquantit_1_1btensor_1a8abcac097679ea55af2d1d69154fc3cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct fmt::formatter&lt; quantit::btensor &gt;</definition>
        <argsstring></argsstring>
        <name>fmt::formatter&lt; quantit::btensor &gt;</name>
        <param>
          <type>fmt::formatter&lt; <ref refid="classquantit_1_1btensor" kindref="compound">quantit::btensor</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="835" column="20" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classquantit_1_1btensor_1a5093c86ab4783ee74c199212372e1a8d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class mul_helpers</definition>
        <argsstring></argsstring>
        <name>mul_helpers</name>
        <param>
          <type>mul_helpers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="837" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classquantit_1_1btensor_1aba0ba61994d2725dc6cc24c47deefa7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>BTENS</declname>
            <defname>BTENS</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>, std::tuple&lt; BTENS... &gt; &gt;</type>
        <definition>std::tuple&lt;btensor, std::tuple&lt;BTENS...&gt; &gt; truncate_impl</definition>
        <argsstring>(btensor &amp;&amp;d, std::tuple&lt; BTENS... &gt; &amp;&amp;unitaries, size_t max, size_t min, btensor::Scalar tol, btensor::Scalar pow)</argsstring>
        <name>truncate_impl</name>
        <param>
          <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;&amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>std::tuple&lt; BTENS... &gt; &amp;&amp;</type>
          <declname>unitaries</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min</declname>
        </param>
        <param>
          <type>btensor::Scalar</type>
          <declname>tol</declname>
        </param>
        <param>
          <type>btensor::Scalar</type>
          <declname>pow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="733" column="19"/>
      </memberdef>
      <memberdef kind="friend" id="classquantit_1_1btensor_1a17d65b7567711e3a99727df6139563d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor sparse_zeros_like</definition>
        <argsstring>(const btensor &amp;tens, c10::TensorOptions opt)</argsstring>
        <name>sparse_zeros_like</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>tens</declname>
        </param>
        <param>
          <type>c10::TensorOptions</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>create an empty (no allocatred blocks) btensor with the same shape and selection rule as the imput tensor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tens</parametername>
</parameternamelist>
<parameterdescription>
<para>shape specifying tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor options, specified option overwrite those copied from tens </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>empty btensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="794" column="23" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="985" bodyend="990"/>
      </memberdef>
      <memberdef kind="friend" id="classquantit_1_1btensor_1ac56cbb1dbc7e3b803e8e44aca0a02c45" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor eye_like</definition>
        <argsstring>(const btensor &amp;shape, c10::TensorOptions opt)</argsstring>
        <name>eye_like</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>c10::TensorOptions</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>create a matrix with the identity matrix for every permited block on the diagonnal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>shape of the matrix to construct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor options </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="838" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantit::btensor::btensor</definition>
        <argsstring>(const vec_list_t &amp;dir_block_size_cqtt, any_quantity_cref selection_rule, c10::TensorOptions opt={})</argsstring>
        <name>btensor</name>
        <param>
          <type>const vec_list_t &amp;</type>
          <declname>dir_block_size_cqtt</declname>
        </param>
        <param>
          <type><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref></type>
          <declname>selection_rule</declname>
        </param>
        <param>
          <type>c10::TensorOptions</type>
          <declname>opt</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct a new btensor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir_block_size_cqtt</parametername>
</parameternamelist>
<parameterdescription>
<para>a nested list of pair of section size and conserved quantities. The number of element in the first is level is the rank of the tensor. The number of elements in the second level is the number of section for that dimension of the tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selection_rule</parametername>
</parameternamelist>
<parameterdescription>
<para>determine which blocks are allowed to be non-zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a0df7d7b6f5fba87b3b0afeb64cc82cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantit::btensor::btensor</definition>
        <argsstring>(const vec_list_t &amp;dir_block_size_cqtt, any_quantity_cref selection_rule, size_t num_blocks, c10::TensorOptions opt={})</argsstring>
        <name>btensor</name>
        <param>
          <type>const vec_list_t &amp;</type>
          <declname>dir_block_size_cqtt</declname>
        </param>
        <param>
          <type><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref></type>
          <declname>selection_rule</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_blocks</declname>
        </param>
        <param>
          <type>c10::TensorOptions</type>
          <declname>opt</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a7c4b39c3944d26c53ce30924d9d19221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantit::btensor::btensor</definition>
        <argsstring>(index_list _sections_by_dim, any_quantity_vector _c_vals, index_list _section_sizes, any_quantity _sel_rule, c10::TensorOptions opt={})</argsstring>
        <name>btensor</name>
        <param>
          <type>index_list</type>
          <declname>_sections_by_dim</declname>
        </param>
        <param>
          <type><ref refid="classquantit_1_1any__quantity__vector" kindref="compound">any_quantity_vector</ref></type>
          <declname>_c_vals</declname>
        </param>
        <param>
          <type>index_list</type>
          <declname>_section_sizes</declname>
        </param>
        <param>
          <type><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref></type>
          <declname>_sel_rule</declname>
        </param>
        <param>
          <type>c10::TensorOptions</type>
          <declname>opt</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct a new btensor object from a subset of the raw structure. use carefully. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_sections_by_dim</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_c_vals</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_section_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_sel_rule</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a2e126c2f39920056eeb828d2dda317c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::btensor::btensor</definition>
        <argsstring>(const btensor &amp;other)</argsstring>
        <name>btensor</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="135" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="135" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a781eda489246a61d7e0dec211ebdd8ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::btensor::btensor</definition>
        <argsstring>(btensor &amp;&amp;other)</argsstring>
        <name>btensor</name>
        <param>
          <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="141" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="141" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ab8accb3d7600a33d405d8c82d11c902c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator=</definition>
        <argsstring>(btensor other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="148" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a5def988851a7a1761cb2956c1914b1f2" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantit::btensor::btensor</definition>
        <argsstring>()=default</argsstring>
        <name>btensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="153" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a9c4b09d43d375bcacfde1e9d3828c9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>quantit::btensor::btensor</definition>
        <argsstring>(size_t _rank, block_list_t _blocks, index_list _sections_by_dims, index_list _sections_sizes, any_quantity_vector _c_vals, any_quantity _sel_rule, c10::TensorOptions opt={})</argsstring>
        <name>btensor</name>
        <param>
          <type>size_t</type>
          <declname>_rank</declname>
        </param>
        <param>
          <type><ref refid="classquantit_1_1flat__map" kindref="compound">block_list_t</ref></type>
          <declname>_blocks</declname>
        </param>
        <param>
          <type>index_list</type>
          <declname>_sections_by_dims</declname>
        </param>
        <param>
          <type>index_list</type>
          <declname>_sections_sizes</declname>
        </param>
        <param>
          <type><ref refid="classquantit_1_1any__quantity__vector" kindref="compound">any_quantity_vector</ref></type>
          <declname>_c_vals</declname>
        </param>
        <param>
          <type><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref></type>
          <declname>_sel_rule</declname>
        </param>
        <param>
          <type>c10::TensorOptions</type>
          <declname>opt</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct a new btensor object. construct from raw structure elements. Avoid using this constructor if you can. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_rank</parametername>
</parameternamelist>
<parameterdescription>
<para>: the number of dimension of the tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>: list of pair&lt;position,sub-tensor&gt;, the position is stored in a block index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_sections_by_dims</parametername>
</parameternamelist>
<parameterdescription>
<para>: number of section for each dimension of the tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_section_sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>: number of element for each section of each dimension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_c_vals</parametername>
</parameternamelist>
<parameterdescription>
<para>: conserved quantity associated to each of the section in each of the dimension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_sel_rule</parametername>
</parameternamelist>
<parameterdescription>
<para>: overall selection rule, the sum over the dimension of the conserved quantities of a given block must equal this value for a block to be allowed to differ from zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a210be19c2e6965f45a5d028a27edb2df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int64_t &gt;</type>
        <definition>std::vector&lt;int64_t&gt; quantit::btensor::sizes</definition>
        <argsstring>() const</argsstring>
        <name>sizes</name>
        <briefdescription>
<para>return the list of the sizes along each dimensions of the tensor </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;int64_t&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="174" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a01c490238e0022b585dc430b13ec7dd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>btensor::Scalar</type>
        <definition>btensor::Scalar quantit::btensor::item</definition>
        <argsstring>() const</argsstring>
        <name>item</name>
        <briefdescription>
<para>if the tensor contain a single element, return a scalar object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>btensor::Scalar </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="180" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a7831359050b455e8bf4ead7bf205a1ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::btensor::block_increment</definition>
        <argsstring>(btensor::index_list &amp;block_index) const</argsstring>
        <name>block_increment</name>
        <param>
          <type>btensor::index_list &amp;</type>
          <declname>block_index</declname>
        </param>
        <briefdescription>
<para>increment a block index for this tensor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_index</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to the block index to increment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="186" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a3ebd3d5bdf055354b82254067e13e5c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::btensor::swap</definition>
        <argsstring>(btensor &amp;)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="190" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a0b489b6f960e7846245baf2aaa7d66a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool quantit::btensor::block_conservation_rule_test</definition>
        <argsstring>(index_list block_index) const</argsstring>
        <name>block_conservation_rule_test</name>
        <param>
          <type>index_list</type>
          <declname>block_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="210" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a1d4ad1dc15c534551a0e716f779f6347" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t quantit::btensor::section_size</definition>
        <argsstring>(size_t dim, size_t section) const</argsstring>
        <name>section_size</name>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>section</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="212" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a294fa5ce9cebda7d6e4dfe94bc2c0384" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; index_list::const_iterator, index_list::const_iterator &gt;</type>
        <definition>std::tuple&lt;index_list::const_iterator, index_list::const_iterator&gt; quantit::btensor::section_sizes</definition>
        <argsstring>(size_t dim) const</argsstring>
        <name>section_sizes</name>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="213" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a8011c285612e00a24b08f15fad6b3ea7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structquantit_1_1vQuantiT__iterator_1_1const__cgroup__iterator" kindref="compound">any_quantity_vector::const_iterator</ref>, <ref refid="structquantit_1_1vQuantiT__iterator_1_1const__cgroup__iterator" kindref="compound">any_quantity_vector::const_iterator</ref> &gt;</type>
        <definition>std::tuple&lt;any_quantity_vector::const_iterator, any_quantity_vector::const_iterator&gt; quantit::btensor::section_cqtts</definition>
        <argsstring>(size_t dim) const</argsstring>
        <name>section_cqtts</name>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="214" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ae60ecb2f76a04f7c8aa26650065b4919" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; index_list::const_iterator, index_list::const_iterator, <ref refid="structquantit_1_1vQuantiT__iterator_1_1const__cgroup__iterator" kindref="compound">any_quantity_vector::const_iterator</ref>, <ref refid="structquantit_1_1vQuantiT__iterator_1_1const__cgroup__iterator" kindref="compound">any_quantity_vector::const_iterator</ref> &gt;</type>
        <definition>std::tuple&lt;index_list::const_iterator, index_list::const_iterator, any_quantity_vector::const_iterator, any_quantity_vector::const_iterator&gt; quantit::btensor::section_sizes_cqtts</definition>
        <argsstring>(size_t dim) const</argsstring>
        <name>section_sizes_cqtts</name>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a735a54314939812d6a072b99e08e4f41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref></type>
        <definition>any_quantity_cref quantit::btensor::section_conserved_qtt</definition>
        <argsstring>(size_t dim, size_t section) const</argsstring>
        <name>section_conserved_qtt</name>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>section</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="220" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aa72c9562dfdb8f20eadec23949fd57fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref></type>
        <definition>any_quantity_cref quantit::btensor::element_conserved_qtt</definition>
        <argsstring>(size_t dim, size_t element) const</argsstring>
        <name>element_conserved_qtt</name>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="221" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a06bbbb38aaf2a2ce2bfb72a64daa94d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structquantit_1_1vQuantiT__iterator_1_1const__cgroup__iterator" kindref="compound">any_quantity_vector::const_iterator</ref>, <ref refid="structquantit_1_1vQuantiT__iterator_1_1const__cgroup__iterator" kindref="compound">any_quantity_vector::const_iterator</ref> &gt;</type>
        <definition>std::tuple&lt;any_quantity_vector::const_iterator, any_quantity_vector::const_iterator&gt; quantit::btensor::section_conserved_qtt_range</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>section_conserved_qtt_range</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="222" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a361df233fa9fdcd0b30f00f4a96d5bfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; size_t, <ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref> &gt;</type>
        <definition>std::tuple&lt;size_t, any_quantity_cref&gt; quantit::btensor::section_size_cqtt</definition>
        <argsstring>(size_t dim, size_t section) const</argsstring>
        <name>section_size_cqtt</name>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>section</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="224" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ab310947ff381e337d498cc343766a13c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor &amp;</type>
        <definition>torch::Tensor&amp; quantit::btensor::block_at</definition>
        <argsstring>(const index_list &amp;)</argsstring>
        <name>block_at</name>
        <param>
          <type>const index_list &amp;</type>
        </param>
        <briefdescription>
<para>access the block at the block index given in argument. </para>
        </briefdescription>
        <detaileddescription>
<para>Throws a std::out_of_range if the block isn&apos;t allocated or allowed.</para>
<para><simplesect kind="return"><para>torch::Tensor&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="233" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a04c88f784e4188dcb1f96e10a280bec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor &amp;</type>
        <definition>torch::Tensor&amp; quantit::btensor::block</definition>
        <argsstring>(const index_list &amp;)</argsstring>
        <name>block</name>
        <param>
          <type>const index_list &amp;</type>
        </param>
        <briefdescription>
<para>access the block at the index given in argument. Allocate space for the block if necessary. </para>
        </briefdescription>
        <detaileddescription>
<para>Throws a std::bad_argument if the block isn&apos;t allowed by the conservation law.</para>
<para><simplesect kind="return"><para>torch::Tensor&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="241" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a18334e24f0068037814d8b060c60a0fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classquantit_1_1flat__map" kindref="compound">block_list_t</ref> &amp;</type>
        <definition>const block_list_t&amp; quantit::btensor::blocks</definition>
        <argsstring>() const</argsstring>
        <name>blocks</name>
        <briefdescription>
<para>const reference to the raw block list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const block_list_t&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="248" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a1720ff8aa74853ae8bb00909342b6776" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_qtt_view</ref></type>
        <definition>const_block_qtt_view quantit::btensor::block_quantities</definition>
        <argsstring>(const index_list &amp;block_index) const</argsstring>
        <name>block_quantities</name>
        <param>
          <type>const index_list &amp;</type>
          <declname>block_index</declname>
        </param>
        <briefdescription>
<para>obtain a view on the conserved quantities of each indices of a block with the block index given in argument </para>
        </briefdescription>
        <detaileddescription>
<para>the conserved quantity for any block can be accessed that way, whether non-zero values are allowed or not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_index</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the block </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_block_qtt_view </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="259" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a18efb9612ab0b9c34f438f0197abc502" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_size_view</ref></type>
        <definition>const_block_size_view quantit::btensor::block_sizes</definition>
        <argsstring>(const index_list &amp;block_index) const</argsstring>
        <name>block_sizes</name>
        <param>
          <type>const index_list &amp;</type>
          <declname>block_index</declname>
        </param>
        <briefdescription>
<para>obtain a view on the size of the block. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of any block can be accessed in this manner, whether non-zero values are allowed or not.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const_block_size_view </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="268" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t quantit::btensor::dim</definition>
        <argsstring>() const</argsstring>
        <name>dim</name>
        <briefdescription>
<para>Return the rank of the tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int64_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="274" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="274" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1af88cd6bb654832133a7dfbefa8f629c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t quantit::btensor::section_number</definition>
        <argsstring>(size_t dim) const</argsstring>
        <name>section_number</name>
        <param>
          <type>size_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>return the number of sections in a given dimension </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="281" column="8" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ab35ce624f7923057fe83535f2a72b87d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const auto &amp;</type>
        <definition>const auto&amp; quantit::btensor::section_numbers</definition>
        <argsstring>() const</argsstring>
        <name>section_numbers</name>
        <briefdescription>
<para>return the number of section for all the dimensions, in order. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const auto&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="287" column="12" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="287" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1abfa2904aa349cfaff3cb451676bfd1e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const auto &amp;</type>
        <definition>const auto&amp; quantit::btensor::get_cvals</definition>
        <argsstring>() const</argsstring>
        <name>get_cvals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="290" column="12" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="290" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aee959f8823a1ccb165e6ddeced75b0f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::shape_from</definition>
        <argsstring>(const std::vector&lt; int64_t &gt; &amp;dims) const</argsstring>
        <name>shape_from</name>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
<para>create an empty tensor from selected dimensions of this. Minimum necessary set of feature for tensor network reshape. </para>
        </briefdescription>
        <detaileddescription>
<para>Basic version of index, it can only discard whole dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dims</parametername>
</parameternamelist>
<parameterdescription>
<para>List of dimensions, put -1 to keep the dimension, specify the index to keep otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="301" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a8619fb2e99352fa12aa8525ea3ecdcf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::basic_create_view</definition>
        <argsstring>(const std::vector&lt; int64_t &gt; &amp;dims, bool preserve_rank=false)</argsstring>
        <name>basic_create_view</name>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>preserve_rank</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a view object on this tensor. Minimum necessary set of feature for tensor network reshape. </para>
        </briefdescription>
        <detaileddescription>
<para>Basic version of index, it can only discard whole dimensions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dims</parametername>
</parameternamelist>
<parameterdescription>
<para>List of dimensions, put -1 to keep the dimension, specify the index to keep otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="310" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad78bdfc2bf9c771f09ee0841c2455e02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::basic_index_put_</definition>
        <argsstring>(const std::vector&lt; int64_t &gt; &amp;dims, const btensor &amp;value)</argsstring>
        <name>basic_index_put_</name>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>make all the the conserved value and the conservation rule the neutral element of the group. works only on empty tensors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>btensor&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="318" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1abfb1f1daac073010f9ce461eeeb2953a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::basic_index_put_</definition>
        <argsstring>(const std::vector&lt; int64_t &gt; &amp;dims, const torch::Tensor &amp;value)</argsstring>
        <name>basic_index_put_</name>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>const torch::Tensor &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="319" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad0f6a9b00c7da20c43dca330f396e486" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::neutral_shape</definition>
        <argsstring>() const</argsstring>
        <name>neutral_shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="321" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6c5ce2bf6e0c189de1475db903fcef87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::neutral_shape_</definition>
        <argsstring>()</argsstring>
        <name>neutral_shape_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="327" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad0a016599b6c1ba4a98111075081acda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::tensor_product_shape</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>tensor_product_shape</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>compute the shape of the tensor product of this with the other tensor. store the shape information in an empty btensor </para>
        </briefdescription>
        <detaileddescription>
<para>If you want to actually proceed to the tensor product, use tensordot with no contracted</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="337" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ab59f73f7c6380e0bd8ca60e576d4b8d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::index</definition>
        <argsstring>(torch::ArrayRef&lt; torch::indexing::TensorIndex &gt; indices) const</argsstring>
        <name>index</name>
        <param>
          <type>torch::ArrayRef&lt; torch::indexing::TensorIndex &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>create a view on the block tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>The view on the btensor is itself a btensor. The underlying non-zero blocks are shared, new blocks cannot be added to the original tensor this way.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>torch&apos;s index class, allow for slices, ellipsis, boolean, tensors, and simple index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor view on the original tensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="348" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aa058a2117553c629ce362eb711945e58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::index</definition>
        <argsstring>(std::initializer_list&lt; torch::indexing::TensorIndex &gt; indices) const</argsstring>
        <name>index</name>
        <param>
          <type>std::initializer_list&lt; torch::indexing::TensorIndex &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>create a view on the block tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>The view on the btensor is itself a btensor. The underlying non-zero blocks are shared, new blocks cannot be added to the original tensor this way.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indicesa</parametername>
</parameternamelist>
<parameterdescription>
<para>list of torch&apos;s index class, allow for slices, ellipsis, and index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor view on the original tensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="358" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a8ee26adff8b22f7c20d85706b0deda4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::index_put_</definition>
        <argsstring>(torch::ArrayRef&lt; torch::indexing::TensorIndex &gt; indices, const torch::Tensor &amp;rhs)</argsstring>
        <name>index_put_</name>
        <param>
          <type>torch::ArrayRef&lt; torch::indexing::TensorIndex &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const torch::Tensor &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Elements insertion operator, for basic torch tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>The input tensor is sliced into blocks. elements of the input tensors disallowed by the conservation law are silently droped.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>list of torch&apos;s index class, allow for slices, ellipsis, and simple index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor of values to insert, it&apos;s shape must match the view described by the indices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor&amp; reference to this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="369" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a0a73b856d0a4da81209ed45b483bba4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::index_put_</definition>
        <argsstring>(torch::ArrayRef&lt; torch::indexing::TensorIndex &gt; indices, const btensor &amp;rhs)</argsstring>
        <name>index_put_</name>
        <param>
          <type>torch::ArrayRef&lt; torch::indexing::TensorIndex &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Elements insertion operator, for block tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>The input tensor block structure must match the view&apos;s block structure</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>list of torch&apos;s index class, allow for slices, ellipsis, and simple index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor of values to insert, it&apos;s shape must match the view described by the indices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor&amp; reference to this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="379" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a9f7fed837898e36e46e003819b5183ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::index_put_</definition>
        <argsstring>(torch::ArrayRef&lt; torch::indexing::TensorIndex &gt; indices, const Scalar &amp;v)</argsstring>
        <name>index_put_</name>
        <param>
          <type>torch::ArrayRef&lt; torch::indexing::TensorIndex &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const Scalar &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Elements insertion operator, for scalars. </para>
        </briefdescription>
        <detaileddescription>
<para>If the index describes multiple elements, all the element that respect the conservation law are set to the supplied value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>list of torch&apos;s index class, allow for slices, ellipsis, and simple index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor of values to insert, it&apos;s shape must match the view described by the indices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor&amp; reference to this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="390" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6fc6df002361366fd2a92b8719114ebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::index_put_</definition>
        <argsstring>(std::initializer_list&lt; torch::indexing::TensorIndex &gt; indices, const torch::Tensor &amp;rhs)</argsstring>
        <name>index_put_</name>
        <param>
          <type>std::initializer_list&lt; torch::indexing::TensorIndex &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const torch::Tensor &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Elements insertion operator, for basic torch tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>The input tensor is sliced into blocks. elements of the input tensors disallowed by the conservation law are silently droped.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>list of torch&apos;s index class, allow for slices, ellipsis, and simple index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor of values to insert, it&apos;s shape must match the view described by the indices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor&amp; reference to this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="401" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1abf801ccfc47e2cea549de96560345924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::index_put_</definition>
        <argsstring>(std::initializer_list&lt; torch::indexing::TensorIndex &gt; indices, const btensor &amp;rhs)</argsstring>
        <name>index_put_</name>
        <param>
          <type>std::initializer_list&lt; torch::indexing::TensorIndex &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Elements insertion operator, for block tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>The input tensor block structure must match the view&apos;s block structure</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>list of torch&apos;s index class, allow for slices, ellipsis, and simple index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor of values to insert, it&apos;s shape must match the view described by the indices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor&amp; reference to this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="411" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a89aa8e2f2b22575d4927170457d44a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::index_put_</definition>
        <argsstring>(std::initializer_list&lt; torch::indexing::TensorIndex &gt; indices, const Scalar &amp;v)</argsstring>
        <name>index_put_</name>
        <param>
          <type>std::initializer_list&lt; torch::indexing::TensorIndex &gt;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const Scalar &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Elements insertion operator, for scalars. </para>
        </briefdescription>
        <detaileddescription>
<para>If the index describes multiple elements, all the element that respect the conservation law are set to the supplied value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>list of torch&apos;s index class, allow for slices, ellipsis, and simple index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>tensor of values to insert, it&apos;s shape must match the view described by the indices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor&amp; reference to this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="422" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a00094f5a1ebec2e8ce64be0e46c94ebe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::const_iterator</type>
        <definition>block_list_t::const_iterator quantit::btensor::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="425" column="30" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="425" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a01eb039a3e9c204c80735ac4e0f74142" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::const_iterator</type>
        <definition>block_list_t::const_iterator quantit::btensor::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="426" column="30" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="426" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad8899443c274e6db7ca917836f861589" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::const_iterator</type>
        <definition>block_list_t::const_iterator quantit::btensor::cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="427" column="30" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="427" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a440442cbdd7adeff498dd085416e5c16" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::const_iterator</type>
        <definition>block_list_t::const_iterator quantit::btensor::cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="428" column="30" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="428" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a1af81f39b41b1c84109617d5c4ec0972" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::iterator</type>
        <definition>block_list_t::iterator quantit::btensor::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="429" column="24" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="429" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a7f16613c11ecfd2f15732ec5b607a877" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::iterator</type>
        <definition>block_list_t::iterator quantit::btensor::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="430" column="24" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="430" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6a22df7a1f01cdb4ccd465a03d4ca808" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::reverse_iterator</type>
        <definition>block_list_t::reverse_iterator quantit::btensor::rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="431" column="32" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="431" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1adcba131e1100c9098ed28212a9a12e8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::reverse_iterator</type>
        <definition>block_list_t::reverse_iterator quantit::btensor::rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="432" column="32" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="432" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a62792eef34b2dded3fbba91cd45996b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::const_reverse_iterator</type>
        <definition>block_list_t::const_reverse_iterator quantit::btensor::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="433" column="38" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="433" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1abd0ba29335c083d7961c4529fc602c2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::const_reverse_iterator</type>
        <definition>block_list_t::const_reverse_iterator quantit::btensor::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="434" column="38" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="434" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a7d94c40cbe874876ae68f77f2c79e348" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::const_reverse_iterator</type>
        <definition>block_list_t::const_reverse_iterator quantit::btensor::crbegin</definition>
        <argsstring>() const</argsstring>
        <name>crbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="435" column="38" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="435" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a5637f6bda9a4e667b129405552356c3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>block_list_t::const_reverse_iterator</type>
        <definition>block_list_t::const_reverse_iterator quantit::btensor::crend</definition>
        <argsstring>() const</argsstring>
        <name>crend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="436" column="38" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="436" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6a97b9d52b04fe14bf7bb5a55a810382" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor quantit::btensor::to_dense</definition>
        <argsstring>() const</argsstring>
        <name>to_dense</name>
        <briefdescription>
<para>Convert the block tensor to a regular torch tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>torch::Tensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="443" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1af96b62005aa71662e4c7be762595a91a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::add</definition>
        <argsstring>(const btensor &amp;other, Scalar alpha=1) const</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="460" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a8578bce0213f9a97133fe029d166379d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::add</definition>
        <argsstring>(btensor &amp;&amp;other, Scalar alpha=1) const</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="461" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a9526260fef259dd49605138f3769716f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::add_</definition>
        <argsstring>(const btensor &amp;other, Scalar alpha=1)</argsstring>
        <name>add_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="462" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a597fc1701d2ebd5c7d4e1c793eaa6f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::add_</definition>
        <argsstring>(btensor &amp;&amp;other, Scalar alpha=1)</argsstring>
        <name>add_</name>
        <param>
          <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="463" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a61453fe8c5919bb7b9d8c44bdec010b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::add</definition>
        <argsstring>(Scalar other, Scalar alpha=1) const</argsstring>
        <name>add</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="464" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a14ab2c98b40f8d211e7b29667a07db6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::add_</definition>
        <argsstring>(Scalar other, Scalar alpha=1)</argsstring>
        <name>add_</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="465" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a109c38d9761e577b74558b47d79d4578" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator+=</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="466" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="466" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ae39e1beeba982b25c0f685303e027e25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator-=</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="467" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="467" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ae0734b0facdc54c239ff1b64e87171d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator+=</definition>
        <argsstring>(const btensor &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="468" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="468" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a08d421493a2bef0fb493e62e5618a618" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator+=</definition>
        <argsstring>(btensor &amp;&amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="469" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="469" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a7dadd7696686ea3f3650421c11943fd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator-=</definition>
        <argsstring>(const btensor &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="470" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="470" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a572bea2379c409bb44200f0878b97e58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator-=</definition>
        <argsstring>(btensor &amp;&amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="471" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="471" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a0fbb649cdc2c3dccc52bc7bdb238fb48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::addmv</definition>
        <argsstring>(const btensor &amp;mat, const btensor &amp;vec, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>addmv</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="472" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ae1c237aa88404ca69b436595059891d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::addmv</definition>
        <argsstring>(const btensor &amp;mat, const btensor &amp;vec, Scalar beta=1)</argsstring>
        <name>addmv</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="473" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a85a1fabfd0e6a768b43eff04cf3f9a21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::addmm</definition>
        <argsstring>(const btensor &amp;mat, const btensor &amp;mat2, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>addmm</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="475" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ac6f44d187d4667fe0c81560b78484437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::addmm_</definition>
        <argsstring>(const btensor &amp;mat, const btensor &amp;mat2, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>addmm_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="476" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a934f94b32a52932fbf814752da785079" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::addbmm</definition>
        <argsstring>(const btensor &amp;mat, const btensor &amp;mat2, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>addbmm</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="479" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a4a5c505c6648216266a2b66aac9f180d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::addbmm_</definition>
        <argsstring>(const btensor &amp;mat, const btensor &amp;mat2, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>addbmm_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="480" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6e41d89ccffb5e64d76018b541063f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::addcdiv_</definition>
        <argsstring>(const btensor &amp;tensor1, const btensor &amp;tensor2, Scalar beta=1)</argsstring>
        <name>addcdiv_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>tensor1</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>tensor2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="481" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a98fd2e36a8a8e998c826a4f3deb702b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::addcdiv</definition>
        <argsstring>(const btensor &amp;tensor1, const btensor &amp;tensor2, Scalar beta=1)</argsstring>
        <name>addcdiv</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>tensor1</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>tensor2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="482" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a2cf4d3a76553ccfc58b4225dadd8edc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::addcmul_</definition>
        <argsstring>(const btensor &amp;tensor1, const btensor &amp;tensor2, Scalar beta=1)</argsstring>
        <name>addcmul_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>tensor1</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>tensor2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="483" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aed1b6997c86e54a0c155c835dc926e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::addcmul</definition>
        <argsstring>(const btensor &amp;tensor1, const btensor &amp;tensor2, Scalar beta=1)</argsstring>
        <name>addcmul</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>tensor1</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>tensor2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="484" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a7cea3afb4bf3aabde1c67496ef9417df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::baddbmm</definition>
        <argsstring>(const btensor &amp;bathc1, const btensor &amp;batch2, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>baddbmm</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>bathc1</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>batch2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="486" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a7027c2e58d1e8e37b4b3fd037d9e3bee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::baddbmm_</definition>
        <argsstring>(const btensor &amp;bathc1, const btensor &amp;batch2, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>baddbmm_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>bathc1</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>batch2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="487" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a268117f541ac845d75c1b1acd100332b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::bmm</definition>
        <argsstring>(const btensor &amp;mat) const</argsstring>
        <name>bmm</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="489" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1af41654c3bd38f3b1b33b84e3506582ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::dot</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="490" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a43817292c24dfe72c39c9e0603579de0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::vdot</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>vdot</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="491" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad212ce7cbdf200de9a551d7001f83b74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::kron</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>kron</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="492" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ae8698e15b3f765e2a86fe5c73bd7b03c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::matmul</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>matmul</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="494" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aebeb61ac88feba87faf1c79d6fdce752" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::mm</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>mm</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="496" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aa4a1677cb63da7bbf239d4e1d7afc09e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="497" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a0e7d6bc11752aad4ea4ef2a6e378cfc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::t</definition>
        <argsstring>() const</argsstring>
        <name>t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="499" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="499" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a3c2fb6168468677f515607b5fc0fd1ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::t_</definition>
        <argsstring>()</argsstring>
        <name>t_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="500" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="500" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a100bc35dd4606a1d980569ccf56585d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::sqrt</definition>
        <argsstring>() const</argsstring>
        <name>sqrt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="501" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a21d5621994a0b7ece0059ebb593d9734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::sqrt_</definition>
        <argsstring>()</argsstring>
        <name>sqrt_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="502" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1af695d8c1b5d38554476920f3f851ee47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="503" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ae9cc572eb5a962bcb4be2c1535ba0659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::abs_</definition>
        <argsstring>()</argsstring>
        <name>abs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="504" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a0edf85382bbee55870229540c4912f1d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::pow</definition>
        <argsstring>(btensor::Scalar exponent) const</argsstring>
        <name>pow</name>
        <param>
          <type>btensor::Scalar</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="505" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a23779d7148f1df5e9938eb0b3bf087e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::pow_</definition>
        <argsstring>(btensor::Scalar exponent)</argsstring>
        <name>pow_</name>
        <param>
          <type>btensor::Scalar</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="506" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a50dae84454200f432ddfd492fde24b72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::pow</definition>
        <argsstring>(const btensor &amp;exponent) const</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="507" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad52141be90fab8e1e2448b3e2aec7666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::pow_</definition>
        <argsstring>(const btensor &amp;exponent)</argsstring>
        <name>pow_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="508" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad47de70372c7a3f14c9d93adb9080b7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::ge</definition>
        <argsstring>(btensor::Scalar other) const</argsstring>
        <name>ge</name>
        <param>
          <type>btensor::Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="509" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a2b55ae642f17719ef8a2306e32b12784" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::ge</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>ge</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="510" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aea176d77f4c6f36028686deac4504598" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::le</definition>
        <argsstring>(btensor::Scalar other) const</argsstring>
        <name>le</name>
        <param>
          <type>btensor::Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="511" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ab478cbf5313025c9bf41f0ff54461551" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::le</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>le</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="512" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1af93efef1358386621a55b873ff07d9a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::less</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>less</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="513" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a65a198ec575e269590c4c64cee195811" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::less</definition>
        <argsstring>(btensor::Scalar other) const</argsstring>
        <name>less</name>
        <param>
          <type>btensor::Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="514" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a0f813e6608623a45693c1c382228c74e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::greater</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>greater</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="515" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a4fb9b50353bc493fc4d3821b316edc65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::greater</definition>
        <argsstring>(btensor::Scalar other) const</argsstring>
        <name>greater</name>
        <param>
          <type>btensor::Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="516" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a98bc5383bef6944c61e02a14a9a91518" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::eq</definition>
        <argsstring>(btensor::Scalar other) const</argsstring>
        <name>eq</name>
        <param>
          <type>btensor::Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="517" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ac34e73f2bdad1b54ec94c0a3b36a59a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::eq</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>eq</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="518" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aecc44085de7c7513c38b3f3ae9e43a1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::not_equal</definition>
        <argsstring>(btensor::Scalar other) const</argsstring>
        <name>not_equal</name>
        <param>
          <type>btensor::Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="519" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a2c2c790e8f5322426b50a0c4d82d1cbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::not_equal</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>not_equal</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="520" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a7aff6124cf79f4cb30bd60e6854d4144" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::div</definition>
        <argsstring>(btensor::Scalar) const</argsstring>
        <name>div</name>
        <param>
          <type>btensor::Scalar</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="522" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aa2171441c703a4fe016e25f6720c191b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::div_</definition>
        <argsstring>(btensor::Scalar)</argsstring>
        <name>div_</name>
        <param>
          <type>btensor::Scalar</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="523" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a5086e4795d6315c37e2f2cfe46fceca9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::div</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>div</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="524" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a463c224fcf93e375c7ce9e4bc814c75d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::div_</definition>
        <argsstring>(const btensor &amp;other)</argsstring>
        <name>div_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="525" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a25492fd0cf70bd04a15152b2828ff84a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator*=</definition>
        <argsstring>(btensor::Scalar val)</argsstring>
        <name>operator*=</name>
        <param>
          <type>btensor::Scalar</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="527" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="527" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6f4773f1a5435c9f67462c9d00bb69cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator*=</definition>
        <argsstring>(const btensor &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="528" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="528" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a9257048ffbc8a78ea6825c979b8c9f6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator/=</definition>
        <argsstring>(btensor::Scalar val)</argsstring>
        <name>operator/=</name>
        <param>
          <type>btensor::Scalar</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="529" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="529" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a7602827a205d1054a078242c3fde3b70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::operator/=</definition>
        <argsstring>(const btensor &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="530" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="530" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a1c927b4b96f0df440eb15d371d60326c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::operator-</definition>
        <argsstring>()</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="531" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="531" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ac88360f21d921bc565957aa94c292e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::mul_</definition>
        <argsstring>(const btensor &amp;other)</argsstring>
        <name>mul_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>in-place element wise product, with broadcasting on size 1 dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para>Will throw an error if the rank of this is smaller than the would be output. I suspect this is a bug in torch. There&apos;s no reason not to adapt the rank of the tensor, from a storage perspective this isn&apos;t different from increasing the size of one dimenion, which this function can do.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="544" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a53a0ad6ab7a223e665a04f2a4a74be54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::mul</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>mul</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="545" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a9329bdb7db6827c606f518afdf723bfc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::mul</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>mul</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="546" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ab4d4aeb5542d3b146adc8c7f618bd5d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::mul_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>mul_</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="547" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a648ff1a8b48695e2220c67c163d2b87a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::multiply</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>multiply</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="548" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aecbcd853d7db4e7f879281cacd927d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::multiply_</definition>
        <argsstring>(const btensor &amp;other)</argsstring>
        <name>multiply_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="549" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a5759ec5ee73a725f919e21c9ad5893da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::multiply</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>multiply</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="550" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="550" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1acdf2c3bced0851d2ffa2963b8f8f868a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::multiply_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>multiply_</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="551" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="551" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aef107bf98b7a14ff7b18ee6ab74138fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::mv</definition>
        <argsstring>(const btensor &amp;vec) const</argsstring>
        <name>mv</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="552" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a0c1f8e920e86f933c19ce6c3326104ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::permute</definition>
        <argsstring>(torch::IntArrayRef) const</argsstring>
        <name>permute</name>
        <param>
          <type>torch::IntArrayRef</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="553" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6e1177240b65cf9ae984ac05bd5d6453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::permute_</definition>
        <argsstring>(torch::IntArrayRef)</argsstring>
        <name>permute_</name>
        <param>
          <type>torch::IntArrayRef</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="554" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a444e6084e8589ae5ae4236cb35c27f01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::reshape</definition>
        <argsstring>(torch::IntArrayRef index_group) const</argsstring>
        <name>reshape</name>
        <param>
          <type>torch::IntArrayRef</type>
          <declname>index_group</declname>
        </param>
        <briefdescription>
<para>Reshape the btensor into a btensor of a lower rank. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is significantly different from torch&apos;s equivalent, both in the required input and the resulting tensor. The reshaping is done once on the block structure and once on the block content. Consequently, the content is permuted relative to the same reshape done on a regular tensor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index_group</parametername>
</parameternamelist>
<parameterdescription>
<para>each integer mark the first element of the next bundle of index to group for exemple: [3,4,5] would group index 0,1,2 into a single new index, leave 3 and 4 as they are, and group 5..rank-1 together </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor reshaped tensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="567" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a5c0f704cd6343d24b4a42031e2e22bc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>reshape_mode</type>
            <declname>mode</declname>
            <defname>mode</defname>
            <defval>reshape_mode::dims_only</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::reshape_as</definition>
        <argsstring>(const btensor &amp;other) const</argsstring>
        <name>reshape_as</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>reshape the tensor into the shape of the supplied tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>The supplied tensor must have conserved quantities compatible with this. Therefore, the conserved quantities of the blocks of this must factorize into the conserved quantity of the matching block of the arguement. Can reshape into a tensor of greater rank.</para>
<para>When overwrite_c_vals is true, the selection rule will be overwritten with the one of the input tensor. The non-zero blocks of this must satisfy the selection rule of the proposed output shape.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>reshaping</parametername>
</parameternamelist>
<parameterdescription>
<para>mode, modify the conserved quantities on the indices only by default, overwrite the selection rule with reshape_mode::overwrite_cvals </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor with the target shape. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor Reshaped tensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="584" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a391e6d73f73bc486c0f080e6cd8ab7a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::reshape</definition>
        <argsstring>(std::initializer_list&lt; int64_t &gt; a)</argsstring>
        <name>reshape</name>
        <param>
          <type>std::initializer_list&lt; int64_t &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Reshape the btensor into a btensor of a lower rank. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is significantly different from torch&apos;s equivalent, both in the required input and the resulting tensor. The reshaping is done once on the block structure and once on the block content. Consequently, the content is permuted relative to the same reshape done on a regular tensor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index_group</parametername>
</parameternamelist>
<parameterdescription>
<para>each integer mark the first element of the next bundle of index to group for exemple: [3,4,5] would group index 0,1,2 into a single new index, leave 3 and 4 as they are, and group 5..rank-1 together </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor reshaped tensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="598" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="598" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6176a831cc6ebf1769453bbd38846e3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::transpose</definition>
        <argsstring>(int64_t dim0, int64_t dim1) const</argsstring>
        <name>transpose</name>
        <param>
          <type>int64_t</type>
          <declname>dim0</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim1</declname>
        </param>
        <briefdescription>
<para>exchange the order of two indices. </para>
        </briefdescription>
        <detaileddescription>
<para>Simplify to a matrix transpose for tensors of rank 2.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim0</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="608" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a68dcc4e14de14d0077d36d74455e5273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::transpose_</definition>
        <argsstring>(int64_t dim0, int64_t dim1)</argsstring>
        <name>transpose_</name>
        <param>
          <type>int64_t</type>
          <declname>dim0</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="610" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a401c2c270d7f5f3863215461c914e602" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::sub</definition>
        <argsstring>(const btensor &amp;other, Scalar alpha=1) const</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="611" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="611" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a8a8a3cb85f0c1835e35be8e9fda06691" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::sub_</definition>
        <argsstring>(const btensor &amp;other, Scalar alpha=1)</argsstring>
        <name>sub_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="612" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="612" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1adb8cefd06bd67dfd951c7a94401887b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::sub</definition>
        <argsstring>(btensor &amp;&amp;other, Scalar alpha=1) const</argsstring>
        <name>sub</name>
        <param>
          <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="613" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="613" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a4d131c891643d88c0528c9065d37de5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::sub_</definition>
        <argsstring>(btensor &amp;&amp;other, Scalar alpha=1)</argsstring>
        <name>sub_</name>
        <param>
          <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="614" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="614" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ac466be1e461dcb032af2f3ab98493448" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::sub</definition>
        <argsstring>(Scalar other, Scalar alpha=1) const</argsstring>
        <name>sub</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="615" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="615" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a1a49aa0e6dd17e12ad2d19286499acaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::sub_</definition>
        <argsstring>(Scalar other, Scalar alpha=1)</argsstring>
        <name>sub_</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="616" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="616" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a87cd93fed91f19af47c00bb34ff38191" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::subtract</definition>
        <argsstring>(const btensor &amp;other, Scalar alpha=1) const</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="617" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="617" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a3a2d3056bf180fc794a0d5ecfee4105e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::subtract_</definition>
        <argsstring>(const btensor &amp;other, Scalar alpha=1)</argsstring>
        <name>subtract_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="618" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="618" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a3a2304fb10f081161f3bfe8ceabd60b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::subtract</definition>
        <argsstring>(Scalar other, Scalar alpha=1) const</argsstring>
        <name>subtract</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="619" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="619" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a307aac4131fc15a55d2badd728eaf5c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::subtract_</definition>
        <argsstring>(Scalar other, Scalar alpha=1)</argsstring>
        <name>subtract_</name>
        <param>
          <type>Scalar</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="620" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="620" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aa4c0666de033a5a36b7cb44a25ba264a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::tensordot</definition>
        <argsstring>(const btensor &amp;other, torch::IntArrayRef dim_self, torch::IntArrayRef dims_other) const</argsstring>
        <name>tensordot</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>torch::IntArrayRef</type>
          <declname>dim_self</declname>
        </param>
        <param>
          <type>torch::IntArrayRef</type>
          <declname>dims_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="621" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a156b81939db01a79de8ce940526a8d6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::tensorgdot</definition>
        <argsstring>(const btensor &amp;mul1, const btensor &amp;mul2, torch::IntArrayRef dims1, torch::IntArrayRef dims2, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>tensorgdot</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mul1</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mul2</declname>
        </param>
        <param>
          <type>torch::IntArrayRef</type>
          <declname>dims1</declname>
        </param>
        <param>
          <type>torch::IntArrayRef</type>
          <declname>dims2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="622" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1af1b6cdd46a57cdf88154a7f037d19517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::tensorgdot_</definition>
        <argsstring>(const btensor &amp;mul1, const btensor &amp;mul2, torch::IntArrayRef dims1, torch::IntArrayRef dims2, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>tensorgdot_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mul1</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>mul2</declname>
        </param>
        <param>
          <type>torch::IntArrayRef</type>
          <declname>dims1</declname>
        </param>
        <param>
          <type>torch::IntArrayRef</type>
          <declname>dims2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>Scalar</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="624" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aa2702c03eed0b59e2aeddb841c192fa9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::squeeze</definition>
        <argsstring>() const</argsstring>
        <name>squeeze</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="626" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a34cea434fb7a2ad8f76d9f963b6d7e1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::squeeze</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>squeeze</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="627" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a5aec6d672f962905833cd3dd78f99463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::squeeze_</definition>
        <argsstring>(int64_t dim)</argsstring>
        <name>squeeze_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="628" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad8ee2b72c7e9770a451578470a3006ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::squeeze_</definition>
        <argsstring>()</argsstring>
        <name>squeeze_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="629" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a300ab07624a9c6e63cd48e89eea35fc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::isnan</definition>
        <argsstring>() const</argsstring>
        <name>isnan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="630" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a2252bc461a496d4006b6cf7c92c6ea63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor quantit::btensor::any</definition>
        <argsstring>() const</argsstring>
        <name>any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="631" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aa573174ccaa323bf64189e3a88eb1a14" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool quantit::btensor::anynan</definition>
        <argsstring>() const</argsstring>
        <name>anynan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="632" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a7ecbb590915372481349263bcc60cfd8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::conj</definition>
        <argsstring>() const</argsstring>
        <name>conj</name>
        <briefdescription>
<para>return the complex conjugate of this tensor and inverse the conserved quantities </para>
        </briefdescription>
        <detaileddescription>
<para>For non complex type, the only the conserved quantities are modified. Those two operation are grouped together because in the context of tensor networks for quantum mechanics. the adjoint operation conjugate the values and inverse the conserved quantities. The adjoint also transpose the opterator or state, but the effect of the transposition of a network on its constituant tensor depends storngly on the structure of the network and must be done on a case by case basis.</para>
<para>grouping those two operation together is necessary to bring the textual difference in an implementation of an algorithm for torch::Tensor and <ref refid="classquantit_1_1btensor" kindref="compound">quantit::btensor</ref></para>
<para><simplesect kind="return"><para>btensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="647" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a902003e818128aef05e5e6a39ac77501" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::conj_only</definition>
        <argsstring>() const</argsstring>
        <name>conj_only</name>
        <briefdescription>
<para>return the complex conjugate of this tensor </para>
        </briefdescription>
        <detaileddescription>
<para>For non complex type, the output is identical to the input. The conserved quantities are unaffected.</para>
<para><simplesect kind="return"><para>btensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="656" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a1742f2450d18a58b0508799e9d48c469" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::inverse_cvals</definition>
        <argsstring>() const</argsstring>
        <name>inverse_cvals</name>
        <briefdescription>
<para>create a new tensor with its section rule and all its conserved quantities inversed. </para>
        </briefdescription>
        <detaileddescription>
<para>Conserved quantities must be inversed when doing the hermitian conjugation of an operator.</para>
<para>Caution: The blocks of the new tensors are shallow copies of the original.</para>
<para><simplesect kind="return"><para>btensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="667" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a5960100f9b13fb48702b30644283d9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::inverse_cvals_</definition>
        <argsstring>()</argsstring>
        <name>inverse_cvals_</name>
        <briefdescription>
<para>inverse the selection rule and all the conserved quantities of this btensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Conserved quantities must be inversed when doing the hermitian conjugation of an operator.</para>
<para><simplesect kind="return"><para>btensor&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="675" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aef10a4a7f737d8d45fb4e457440bf7de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::cval_shift</definition>
        <argsstring>(any_quantity_cref shift, int64_t dim) const</argsstring>
        <name>cval_shift</name>
        <param>
          <type><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Shifts the conserved quantities of one dimension of the tensor, applies the opposite shift to the conservation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>shift to apply </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension to which the shift is applied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="683" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a037f8cc269cc93d75d84a95fbb0b16a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::cval_shift_</definition>
        <argsstring>(any_quantity_cref shift, int64_t dim)</argsstring>
        <name>cval_shift_</name>
        <param>
          <type><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Shifts the conserved quantities of one dimension of the tensor, applies the opposite shift to the conservation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>shift to apply </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension to which the shift is applied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="691" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6934183b8e07a5548b6af93fa6d30676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::non_conserving_cval_shift_</definition>
        <argsstring>(any_quantity_cref shift, int64_t dim)</argsstring>
        <name>non_conserving_cval_shift_</name>
        <param>
          <type><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Shifts the conserved quantities of one dimension of the tensor without regards for the conservation laws. </para>
        </briefdescription>
        <detaileddescription>
<para>Can only be applied to empty tensors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para>shift to apply </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension to which the shift is applied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="700" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1af4e02d410e3e3c2f32903b352917877a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::shift_selection_rule_</definition>
        <argsstring>(any_quantity_cref shift)</argsstring>
        <name>shift_selection_rule_</name>
        <param>
          <type><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref></type>
          <declname>shift</declname>
        </param>
        <briefdescription>
<para>Modify the selection rule by the value of shift. Can only be done on empty tensors . </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="707" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1af1f9b62db4386110f2b9db59615638f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::btensor::reserve_space_</definition>
        <argsstring>(size_t N)</argsstring>
        <name>reserve_space_</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
<para>Reserve space in the block list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of blocks for which to reserve space </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="714" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1af22340d87671cb9256b2ddd62a3d1419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::btensor::reserve_space_</definition>
        <argsstring>(btensor_size)</argsstring>
        <name>reserve_space_</name>
        <param>
          <type>btensor_size</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="715" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a8eb0fa9598edbcca7bd461e828efcae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::set_selection_rule_</definition>
        <argsstring>(any_quantity_cref value)</argsstring>
        <name>set_selection_rule_</name>
        <param>
          <type><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the selection rule of the block tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Only works on empty btensor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>btensor&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="725" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a9938ca873fca45a633e65c789586a3dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::neutral_selection_rule_</definition>
        <argsstring>()</argsstring>
        <name>neutral_selection_rule_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="726" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="726" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6491831f28313cb7bfb8898d382c6cfc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::neutral_selection_rule</definition>
        <argsstring>() const</argsstring>
        <name>neutral_selection_rule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="727" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="727" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a4df6cbc84f2195e0e9c31bb46ddf8c7f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::to</definition>
        <argsstring>(const torch::TensorOptions &amp;options={}, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <param>
          <type>const torch::TensorOptions &amp;</type>
          <declname>options</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="737" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="737" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad7dad57c873818fa9617f58522a1a9a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::to</definition>
        <argsstring>(const btensor &amp;other, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="747" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="747" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a45c16637e525d988d89da32becf61b75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::to</definition>
        <argsstring>(torch::Device device, torch::ScalarType dtype, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <param>
          <type>torch::Device</type>
          <declname>device</declname>
        </param>
        <param>
          <type>torch::ScalarType</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="753" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="753" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ab66093d2d85010a3398aa2785e7cf7e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::to</definition>
        <argsstring>(torch::ScalarType dtype, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <param>
          <type>torch::ScalarType</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="763" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="763" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6e2807c9fa229dd591b20d3b66eee7cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::to</definition>
        <argsstring>(caffe2::TypeMeta type_meta, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <param>
          <type>caffe2::TypeMeta</type>
          <declname>type_meta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="773" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="773" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad8f19565b73f40fd31973702e6862f46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::to</definition>
        <argsstring>(const torch::Tensor &amp;other, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <param>
          <type>const torch::Tensor &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="783" column="9" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="783" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a0bd5ce01b1230d8623719b3671337a8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>c10::TensorOptions</type>
        <definition>c10::TensorOptions quantit::btensor::options</definition>
        <argsstring>() const</argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="793" column="20" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="793" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad9a02622134dc835f3a333bac282a1cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; index_list, index_list &gt;</type>
        <definition>std::tuple&lt;index_list, index_list&gt; quantit::btensor::element_index_decompose</definition>
        <argsstring>(const index_list &amp;element_index) const</argsstring>
        <name>element_index_decompose</name>
        <param>
          <type>const index_list &amp;</type>
          <declname>element_index</declname>
        </param>
        <briefdescription>
<para>split an index adressing an element within the full tensor into a block index, block-element index pair. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element_index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;index_list,index_list&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="816" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classquantit_1_1btensor_1aac31d2c7bd9c3900b27542ce17fbe274" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t quantit::btensor::btensor_compute_max_size</definition>
        <argsstring>(const btensor &amp;btens, size_t max=std::numeric_limits&lt; size_t &gt;::max())</argsstring>
        <name>btensor_compute_max_size</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>btens</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max</declname>
          <defval>std::numeric_limits&lt; size_t &gt;::max()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="187" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a917ea0d16b970cf832504a502cbf1289" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void quantit::btensor::add_tensor_check</definition>
        <argsstring>(const btensor &amp;a, const btensor &amp;b)</argsstring>
        <name>add_tensor_check</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="188" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1aaba4b107e02154ce231380c1bb844766" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string quantit::btensor::check_tensor</definition>
        <argsstring>(const btensor &amp;)</argsstring>
        <name>check_tensor</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Check that the tensor is correct. </para>
        </briefdescription>
        <detaileddescription>
<para>No forbidden element allocated, torch tensor sizes matches their sectors sizes, etc.</para>
<para>return a string explaining violations.</para>
<para><simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="453" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a5d8897e8e51c880654c5d467b2b0a8bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void quantit::btensor::throw_bad_tensor</definition>
        <argsstring>(const btensor &amp;)</argsstring>
        <name>throw_bad_tensor</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        </param>
        <briefdescription>
<para>throw an error in any situation where check_tensor return a non-empty string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="458" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a6638386777d0b8bed4efa38635f44d0a" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Throws</declname>
            <defname>Throws</defname>
            <defval>false</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool quantit::btensor::check_product_compat</definition>
        <argsstring>(const btensor &amp;in1, const btensor &amp;in2, torch::IntArrayRef dims1, torch::IntArrayRef dims2) noexcept(!Throws)</argsstring>
        <name>check_product_compat</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>in1</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>in2</declname>
        </param>
        <param>
          <type>torch::IntArrayRef</type>
          <declname>dims1</declname>
        </param>
        <param>
          <type>torch::IntArrayRef</type>
          <declname>dims2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="796" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a0584d58aef82ff1994c454d5644142e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; torch::indexing::TensorIndex &gt;</type>
        <definition>static std::vector&lt;torch::indexing::TensorIndex&gt; quantit::btensor::full_slice</definition>
        <argsstring>(const btensor &amp;tensor, const btensor::index_list &amp;block)</argsstring>
        <name>full_slice</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const btensor::index_list &amp;</type>
          <declname>block</declname>
        </param>
        <briefdescription>
<para>compute the slices associated with a block in a full tensor with the same shape. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tensor</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;torch::indexing::TensorIndex&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="805" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1acbb787c67f9a0c677d9182eb4e92ece6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool quantit::btensor::test_same_shape</definition>
        <argsstring>(const btensor &amp;a, const btensor &amp;b)</argsstring>
        <name>test_same_shape</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="808" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classquantit_1_1btensor_1aa504832b48a5bef1e748bb700c036919" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::btensor::btensor</definition>
        <argsstring>(const btensor &amp;shape, block_list_t &amp;&amp;block_list, c10::TensorOptions opt={})</argsstring>
        <name>btensor</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="classquantit_1_1flat__map" kindref="compound">block_list_t</ref> &amp;&amp;</type>
          <declname>block_list</declname>
        </param>
        <param>
          <type>c10::TensorOptions</type>
          <declname>opt</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct a new btensor object, copy the shape another btensor, uses the supplied block list. </para>
        </briefdescription>
        <detaileddescription>
<para>non-default options specified in argument overwrite the tensor options stored in the shape for the resulting btensor. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>block_list</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="847" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="847" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a030b742a781eceef34c1869e94f72f90" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structquantit_1_1vQuantiT__iterator_1_1cgroup__iterator" kindref="compound">any_quantity_vector::iterator</ref>, <ref refid="structquantit_1_1vQuantiT__iterator_1_1cgroup__iterator" kindref="compound">any_quantity_vector::iterator</ref> &gt;</type>
        <definition>std::tuple&lt;any_quantity_vector::iterator, any_quantity_vector::iterator&gt; quantit::btensor::section_conserved_qtt_range</definition>
        <argsstring>(size_t index)</argsstring>
        <name>section_conserved_qtt_range</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>private, mutable version of the public function. With some const cast they can share implementation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;any_quantity_vector::iterator, any_quantity_vector::iterator&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="859" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad3b2e95b7c6e1f9c7e2b764332182a2e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::btensor::shift_impl</definition>
        <argsstring>(any_quantity_cref shift, int64_t dim)</argsstring>
        <name>shift_impl</name>
        <param>
          <type><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref></type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>common part of conserving and non conserving shift. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shift</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="866" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a98f618f430aee62b37b28137c962bf2f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void quantit::btensor::apply_to_all_blocks_mod_index</definition>
        <argsstring>(A &amp;&amp;a, F &amp;&amp;f, Args &amp;&amp;...args)</argsstring>
        <name>apply_to_all_blocks_mod_index</name>
        <param>
          <type>A &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>apply a function to all torch tensors contained in this </para>
        </briefdescription>
        <detaileddescription>
<para>only useful for in place operations...</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>function like object to apply to the block index, takes the block index by reference. ATTENTION: you can mess up ordering. it is your responsability to reorder the <ref refid="classquantit_1_1flat__map" kindref="compound">flat_map</ref> if the operation affect block index ordering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function (member) reference/pointer to apply to the blovk tensors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>argument to pass to f </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="878" column="6" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="878" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1adf64948e6ca2187c9fa697e206266784" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void quantit::btensor::apply_to_all_blocks</definition>
        <argsstring>(F &amp;&amp;f, Args &amp;&amp;...args)</argsstring>
        <name>apply_to_all_blocks</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>apply a function to all torch tensors contained in this </para>
        </briefdescription>
        <detaileddescription>
<para>only useful for in place operations...</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function (member) reference/pointer to apply to the blovk tensors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>argument to pass to f </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="895" column="6" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="895" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a1d1b7e427b632a559056c24ab3a19464" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void quantit::btensor::force_inplace_apply_to_all_blocks_mod_index</definition>
        <argsstring>(A &amp;&amp;a, F &amp;&amp;f, Args &amp;&amp;...args)</argsstring>
        <name>force_inplace_apply_to_all_blocks_mod_index</name>
        <param>
          <type>A &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>apply a function to all torch tensors contained in this </para>
        </briefdescription>
        <detaileddescription>
<para>for out-of-place operations, asign the result to the input tensors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>function like object to apply to the block index, takes the block index by reference. ATTENTION: you can mess up ordering. it is your responsability to reorder the <ref refid="classquantit_1_1flat__map" kindref="compound">flat_map</ref> if the operation affect block index ordering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function (member) reference/pointer to apply to the blovk tensors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>argument to pass to f </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="910" column="6" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="910" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a2f372b06476be245a10fcfe4ce104b4f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void quantit::btensor::force_inplace_apply_to_all_blocks</definition>
        <argsstring>(F &amp;&amp;f, Args &amp;&amp;...args)</argsstring>
        <name>force_inplace_apply_to_all_blocks</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>apply a function to all torch tensors contained in this </para>
        </briefdescription>
        <detaileddescription>
<para>for out-of-place operations, asign the result to the input tensors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function (member) reference/pointer to apply to the blovk tensors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>argument to pass to f </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="927" column="6" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="927" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ac66045a2c916677899b796f93dd6116e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classquantit_1_1flat__map" kindref="compound">block_list_t</ref></type>
        <definition>block_list_t quantit::btensor::new_block_list_apply_to_all_blocks_mod_index</definition>
        <argsstring>(A &amp;&amp;a, F &amp;&amp;f, Args &amp;&amp;...args) const</argsstring>
        <name>new_block_list_apply_to_all_blocks_mod_index</name>
        <param>
          <type>A &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>apply a function to all torch tensors contained in this </para>
        </briefdescription>
        <detaileddescription>
<para>return a block_list containing the result of the operation</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>function like object to apply to the block index, takes the block index by reference. ATTENTION: you can mess up ordering. it is your responsability to reorder the <ref refid="classquantit_1_1flat__map" kindref="compound">flat_map</ref> if the operation affect block index ordering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function reference or method pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>argument pack for the function to apply, excluding the torch::tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>block_list_t block_list containing the transformed tensors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="944" column="14" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="944" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a060533a5bb281929e7d9d529fb78704e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classquantit_1_1flat__map" kindref="compound">block_list_t</ref></type>
        <definition>block_list_t quantit::btensor::new_block_list_apply_to_all_blocks</definition>
        <argsstring>(F &amp;&amp;f, Args &amp;&amp;...args) const</argsstring>
        <name>new_block_list_apply_to_all_blocks</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>apply a function to all torch tensors contained in this </para>
        </briefdescription>
        <detaileddescription>
<para>return a block_list containing the result of the operation</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function reference or method pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>argument pack for the function to apply, excluding the torch::tensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>block_list_t block_list containing the transformed tensors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="966" column="14" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="966" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ab2a262f1eb48572cbe3938ff4eb3020f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>bool</type>
            <declname>promote</declname>
            <defname>promote</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></type>
        <definition>btensor quantit::btensor::broadcast_operation</definition>
        <argsstring>(const btensor &amp;other, F &amp;&amp;f) const</argsstring>
        <name>broadcast_operation</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="972" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1ad48a67afc6f25a02533cd7f94666c3bb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class F_</type>
          </param>
        </templateparamlist>
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::broadcast_operation_</definition>
        <argsstring>(const btensor &amp;other, F &amp;&amp;f, F_ &amp;&amp;f_)</argsstring>
        <name>broadcast_operation_</name>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>F_ &amp;&amp;</type>
          <declname>f_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="974" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1btensor_1a199bfcf5d9fece46a90ae9c69e5e29c6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
        <definition>btensor&amp; quantit::btensor::impl_basic_index_put_</definition>
        <argsstring>(const std::vector&lt; int64_t &gt; &amp;dims, const btensor &amp;value)</argsstring>
        <name>impl_basic_index_put_</name>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>const <ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="975" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>btensor is a type meant to represent block sparse tensor with conservation laws. The conservation law determines which block can or cannot be non-nul. Each block is itself a tensor of the same rank as the overall tensor. </para>
    </briefdescription>
    <detaileddescription>
<para>Each dimensions of the tensor are separated in sections with independent sizes, each of those section has an associated conserved quantity. The blocks are formed by the intersection of those section. The only block that can contain non-zero values are those the satisfy the selection rule: the sum over the dimension of the conserved quantity must equal a specififed value (the selection rule).</para>
<para>exemple with a rank 2 tensor (matrix) of the inner structure of this type: <verbatim>             S0,0 │ S0,1 │ S0,2 │ S0,3
            ╔═════╪══════╪══════╪═════╗
            ║     │      │      │     ║
        S1,0║(0,0)│ (0,1)│ (0,2)│(0,3)║
            ║     │      │      │     ║
           ─╫─────┼──────┼──────┼─────╢
            ║     │      │      │     ║
        S1,1║(1,0)│ (1,1)│ (1,2)│(1,3)║
            ║     │      │      │     ║
           ─╫─────┼──────┼──────┼─────╢
            ║     │      │      │     ║
        S1,2║(2,0)│ (2,1)│ (2,2)│(2,3)║
            ║     │      │      │     ║
            ╚═════╧══════╧══════╧═════╝
</verbatim> In the preceding exemple, the rows are separated in 4 sections, and the columns in 3 sections. This make up to 12 blocks, that we label by section. Let&apos;s consider that the conserved quantity is simply an integer under the addition,that the column sections [-2,-1,1], the row sections have the conserved quantity [1,2,3,-1] and the selection rule is 0. In that case, only the blocks [(1,0),(0,1),(2,3)] can be non-zero. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>quantit::btensor</label>
        <link refid="classquantit_1_1btensor"/>
        <childnode refid="2" relation="usage">
          <edgelabel>selection_rule</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>property&lt; quantit::any_quantity, quantit::btensor, quantit::vquantity &gt;</label>
        <link refid="classproperty"/>
      </node>
    </collaborationgraph>
    <location file="/home/alex/project/quantt/include/blockTensor/btensor.h" line="103" column="1" bodyfile="/home/alex/project/quantt/include/blockTensor/btensor.h" bodystart="104" bodyend="976"/>
    <listofallmembers>
      <member refid="classquantit_1_1btensor_1a13688c300912aeb8761f20d9451606c0" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>_options</name></member>
      <member refid="classquantit_1_1btensor_1af695d8c1b5d38554476920f3f851ee47" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>abs</name></member>
      <member refid="classquantit_1_1btensor_1ae9cc572eb5a962bcb4be2c1535ba0659" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>abs_</name></member>
      <member refid="classquantit_1_1btensor_1af96b62005aa71662e4c7be762595a91a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>add</name></member>
      <member refid="classquantit_1_1btensor_1a8578bce0213f9a97133fe029d166379d" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>add</name></member>
      <member refid="classquantit_1_1btensor_1a61453fe8c5919bb7b9d8c44bdec010b8" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>add</name></member>
      <member refid="classquantit_1_1btensor_1a9526260fef259dd49605138f3769716f" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>add_</name></member>
      <member refid="classquantit_1_1btensor_1a597fc1701d2ebd5c7d4e1c793eaa6f0a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>add_</name></member>
      <member refid="classquantit_1_1btensor_1a14ab2c98b40f8d211e7b29667a07db6d" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>add_</name></member>
      <member refid="classquantit_1_1btensor_1a917ea0d16b970cf832504a502cbf1289" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>add_tensor_check</name></member>
      <member refid="classquantit_1_1btensor_1a934f94b32a52932fbf814752da785079" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>addbmm</name></member>
      <member refid="classquantit_1_1btensor_1a4a5c505c6648216266a2b66aac9f180d" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>addbmm_</name></member>
      <member refid="classquantit_1_1btensor_1a98fd2e36a8a8e998c826a4f3deb702b9" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>addcdiv</name></member>
      <member refid="classquantit_1_1btensor_1a6e41d89ccffb5e64d76018b541063f9b" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>addcdiv_</name></member>
      <member refid="classquantit_1_1btensor_1aed1b6997c86e54a0c155c835dc926e17" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>addcmul</name></member>
      <member refid="classquantit_1_1btensor_1a2cf4d3a76553ccfc58b4225dadd8edc2" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>addcmul_</name></member>
      <member refid="classquantit_1_1btensor_1a85a1fabfd0e6a768b43eff04cf3f9a21" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>addmm</name></member>
      <member refid="classquantit_1_1btensor_1ac6f44d187d4667fe0c81560b78484437" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>addmm_</name></member>
      <member refid="classquantit_1_1btensor_1a0fbb649cdc2c3dccc52bc7bdb238fb48" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>addmv</name></member>
      <member refid="classquantit_1_1btensor_1ae1c237aa88404ca69b436595059891d2" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>addmv</name></member>
      <member refid="classquantit_1_1btensor_1a2252bc461a496d4006b6cf7c92c6ea63" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>any</name></member>
      <member refid="classquantit_1_1btensor_1aa573174ccaa323bf64189e3a88eb1a14" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>anynan</name></member>
      <member refid="classquantit_1_1btensor_1adf64948e6ca2187c9fa697e206266784" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>apply_to_all_blocks</name></member>
      <member refid="classquantit_1_1btensor_1a98f618f430aee62b37b28137c962bf2f" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>apply_to_all_blocks_mod_index</name></member>
      <member refid="classquantit_1_1btensor_1a7cea3afb4bf3aabde1c67496ef9417df" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>baddbmm</name></member>
      <member refid="classquantit_1_1btensor_1a7027c2e58d1e8e37b4b3fd037d9e3bee" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>baddbmm_</name></member>
      <member refid="classquantit_1_1btensor_1a8619fb2e99352fa12aa8525ea3ecdcf0" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>basic_create_view</name></member>
      <member refid="classquantit_1_1btensor_1ad78bdfc2bf9c771f09ee0841c2455e02" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>basic_index_put_</name></member>
      <member refid="classquantit_1_1btensor_1abfb1f1daac073010f9ce461eeeb2953a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>basic_index_put_</name></member>
      <member refid="classquantit_1_1btensor_1a00094f5a1ebec2e8ce64be0e46c94ebe" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>begin</name></member>
      <member refid="classquantit_1_1btensor_1a1af81f39b41b1c84109617d5c4ec0972" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>begin</name></member>
      <member refid="classquantit_1_1btensor_1a04c88f784e4188dcb1f96e10a280bec8" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block</name></member>
      <member refid="classquantit_1_1btensor_1ab310947ff381e337d498cc343766a13c" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block_at</name></member>
      <member refid="classquantit_1_1btensor_1a0b489b6f960e7846245baf2aaa7d66a0" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block_conservation_rule_test</name></member>
      <member refid="classquantit_1_1btensor_1a7831359050b455e8bf4ead7bf205a1ae" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block_increment</name></member>
      <member refid="classquantit_1_1btensor_1ad5e43901944555555e9bfee4f0d9ee3f" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block_list_t</name></member>
      <member refid="classquantit_1_1btensor_1a2b9ad2e8d2b3d1631ee17c453e501fe4" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block_qtt_iter</name></member>
      <member refid="classquantit_1_1btensor_1aec964e3f38a2231d64318270f09e9eef" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block_qtt_view</name></member>
      <member refid="classquantit_1_1btensor_1a1720ff8aa74853ae8bb00909342b6776" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block_quantities</name></member>
      <member refid="classquantit_1_1btensor_1ab9a8bc9c7102251ee3411c774ff625ce" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block_size_iter</name></member>
      <member refid="classquantit_1_1btensor_1ab1d7a3469e70533a3d74ba7df3475a3d" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block_size_view</name></member>
      <member refid="classquantit_1_1btensor_1a18efb9612ab0b9c34f438f0197abc502" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>block_sizes</name></member>
      <member refid="classquantit_1_1btensor_1a18334e24f0068037814d8b060c60a0fc" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>blocks</name></member>
      <member refid="classquantit_1_1btensor_1a135e856a180c6a7227896ee9dadd1d67" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>blocks_list</name></member>
      <member refid="classquantit_1_1btensor_1a268117f541ac845d75c1b1acd100332b" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>bmm</name></member>
      <member refid="classquantit_1_1btensor_1ab2a262f1eb48572cbe3938ff4eb3020f" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>broadcast_operation</name></member>
      <member refid="classquantit_1_1btensor_1ad48a67afc6f25a02533cd7f94666c3bb" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>broadcast_operation_</name></member>
      <member refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>btensor</name></member>
      <member refid="classquantit_1_1btensor_1a0df7d7b6f5fba87b3b0afeb64cc82cc9" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>btensor</name></member>
      <member refid="classquantit_1_1btensor_1a7c4b39c3944d26c53ce30924d9d19221" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>btensor</name></member>
      <member refid="classquantit_1_1btensor_1a2e126c2f39920056eeb828d2dda317c2" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>btensor</name></member>
      <member refid="classquantit_1_1btensor_1a781eda489246a61d7e0dec211ebdd8ba" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>btensor</name></member>
      <member refid="classquantit_1_1btensor_1a5def988851a7a1761cb2956c1914b1f2" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>btensor</name></member>
      <member refid="classquantit_1_1btensor_1a9c4b09d43d375bcacfde1e9d3828c9f4" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>btensor</name></member>
      <member refid="classquantit_1_1btensor_1aa504832b48a5bef1e748bb700c036919" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>btensor</name></member>
      <member refid="classquantit_1_1btensor_1aac31d2c7bd9c3900b27542ce17fbe274" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>btensor_compute_max_size</name></member>
      <member refid="classquantit_1_1btensor_1a09dcf6f808fb249841ff312a654382de" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>c_vals</name></member>
      <member refid="classquantit_1_1btensor_1ad8899443c274e6db7ca917836f861589" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>cbegin</name></member>
      <member refid="classquantit_1_1btensor_1a440442cbdd7adeff498dd085416e5c16" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>cend</name></member>
      <member refid="classquantit_1_1btensor_1a6638386777d0b8bed4efa38635f44d0a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>check_product_compat</name></member>
      <member refid="classquantit_1_1btensor_1aaba4b107e02154ce231380c1bb844766" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>check_tensor</name></member>
      <member refid="classquantit_1_1btensor_1a7ecbb590915372481349263bcc60cfd8" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>conj</name></member>
      <member refid="classquantit_1_1btensor_1a902003e818128aef05e5e6a39ac77501" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>conj_only</name></member>
      <member refid="classquantit_1_1btensor_1a6de658368d5bec0fcf660f1493e80779" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>const_block_qtt_iter</name></member>
      <member refid="classquantit_1_1btensor_1a04baa4f670f521b48b99b2386d618b2d" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>const_block_qtt_view</name></member>
      <member refid="classquantit_1_1btensor_1a94aeb11429eb42d05d0607f25848050f" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>const_block_size_iter</name></member>
      <member refid="classquantit_1_1btensor_1ac85a6e0adca11b45539314974bd4a970" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>const_block_size_view</name></member>
      <member refid="classquantit_1_1btensor_1a7d94c40cbe874876ae68f77f2c79e348" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>crbegin</name></member>
      <member refid="classquantit_1_1btensor_1a5637f6bda9a4e667b129405552356c3c" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>crend</name></member>
      <member refid="classquantit_1_1btensor_1aef10a4a7f737d8d45fb4e457440bf7de" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>cval_shift</name></member>
      <member refid="classquantit_1_1btensor_1a037f8cc269cc93d75d84a95fbb0b16a2" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>cval_shift_</name></member>
      <member refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>dim</name></member>
      <member refid="classquantit_1_1btensor_1a7aff6124cf79f4cb30bd60e6854d4144" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>div</name></member>
      <member refid="classquantit_1_1btensor_1a5086e4795d6315c37e2f2cfe46fceca9" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>div</name></member>
      <member refid="classquantit_1_1btensor_1aa2171441c703a4fe016e25f6720c191b" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>div_</name></member>
      <member refid="classquantit_1_1btensor_1a463c224fcf93e375c7ce9e4bc814c75d" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>div_</name></member>
      <member refid="classquantit_1_1btensor_1af41654c3bd38f3b1b33b84e3506582ab" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>dot</name></member>
      <member refid="classquantit_1_1btensor_1aa72c9562dfdb8f20eadec23949fd57fd" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>element_conserved_qtt</name></member>
      <member refid="classquantit_1_1btensor_1ad9a02622134dc835f3a333bac282a1cb" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>element_index_decompose</name></member>
      <member refid="classquantit_1_1btensor_1a01eb039a3e9c204c80735ac4e0f74142" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>end</name></member>
      <member refid="classquantit_1_1btensor_1a7f16613c11ecfd2f15732ec5b607a877" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>end</name></member>
      <member refid="classquantit_1_1btensor_1a98bc5383bef6944c61e02a14a9a91518" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>eq</name></member>
      <member refid="classquantit_1_1btensor_1ac34e73f2bdad1b54ec94c0a3b36a59a8" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>eq</name></member>
      <member refid="classquantit_1_1btensor_1ac56cbb1dbc7e3b803e8e44aca0a02c45" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>eye_like</name></member>
      <member refid="classquantit_1_1btensor_1a8abcac097679ea55af2d1d69154fc3cd" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>fmt::formatter&lt; quantit::btensor &gt;</name></member>
      <member refid="classquantit_1_1btensor_1a2f372b06476be245a10fcfe4ce104b4f" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>force_inplace_apply_to_all_blocks</name></member>
      <member refid="classquantit_1_1btensor_1a1d1b7e427b632a559056c24ab3a19464" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>force_inplace_apply_to_all_blocks_mod_index</name></member>
      <member refid="classquantit_1_1btensor_1a0584d58aef82ff1994c454d5644142e5" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>full_slice</name></member>
      <member refid="classquantit_1_1btensor_1ad47de70372c7a3f14c9d93adb9080b7f" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>ge</name></member>
      <member refid="classquantit_1_1btensor_1a2b55ae642f17719ef8a2306e32b12784" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>ge</name></member>
      <member refid="classquantit_1_1btensor_1abfa2904aa349cfaff3cb451676bfd1e7" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>get_cvals</name></member>
      <member refid="classquantit_1_1btensor_1a0f813e6608623a45693c1c382228c74e" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>greater</name></member>
      <member refid="classquantit_1_1btensor_1a4fb9b50353bc493fc4d3821b316edc65" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>greater</name></member>
      <member refid="classquantit_1_1btensor_1a199bfcf5d9fece46a90ae9c69e5e29c6" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>impl_basic_index_put_</name></member>
      <member refid="classquantit_1_1btensor_1ab59f73f7c6380e0bd8ca60e576d4b8d2" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>index</name></member>
      <member refid="classquantit_1_1btensor_1aa058a2117553c629ce362eb711945e58" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>index</name></member>
      <member refid="classquantit_1_1btensor_1aeb10af309cd0aa5b68f995f237f115fb" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>index_list</name></member>
      <member refid="classquantit_1_1btensor_1a8ee26adff8b22f7c20d85706b0deda4a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>index_put_</name></member>
      <member refid="classquantit_1_1btensor_1a0a73b856d0a4da81209ed45b483bba4a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>index_put_</name></member>
      <member refid="classquantit_1_1btensor_1a9f7fed837898e36e46e003819b5183ca" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>index_put_</name></member>
      <member refid="classquantit_1_1btensor_1a6fc6df002361366fd2a92b8719114ebf" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>index_put_</name></member>
      <member refid="classquantit_1_1btensor_1abf801ccfc47e2cea549de96560345924" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>index_put_</name></member>
      <member refid="classquantit_1_1btensor_1a89aa8e2f2b22575d4927170457d44a30" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>index_put_</name></member>
      <member refid="classquantit_1_1btensor_1a799bb042f48eff373f4362c44682f39a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>init_list_t</name></member>
      <member refid="classquantit_1_1btensor_1a1742f2450d18a58b0508799e9d48c469" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>inverse_cvals</name></member>
      <member refid="classquantit_1_1btensor_1a5960100f9b13fb48702b30644283d9a4" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>inverse_cvals_</name></member>
      <member refid="classquantit_1_1btensor_1a300ab07624a9c6e63cd48e89eea35fc7" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>isnan</name></member>
      <member refid="classquantit_1_1btensor_1a01c490238e0022b585dc430b13ec7dd1" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>item</name></member>
      <member refid="classquantit_1_1btensor_1ad212ce7cbdf200de9a551d7001f83b74" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>kron</name></member>
      <member refid="classquantit_1_1btensor_1aea176d77f4c6f36028686deac4504598" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>le</name></member>
      <member refid="classquantit_1_1btensor_1ab478cbf5313025c9bf41f0ff54461551" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>le</name></member>
      <member refid="classquantit_1_1btensor_1af93efef1358386621a55b873ff07d9a6" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>less</name></member>
      <member refid="classquantit_1_1btensor_1a65a198ec575e269590c4c64cee195811" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>less</name></member>
      <member refid="classquantit_1_1btensor_1ae8698e15b3f765e2a86fe5c73bd7b03c" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>matmul</name></member>
      <member refid="classquantit_1_1btensor_1aebeb61ac88feba87faf1c79d6fdce752" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>mm</name></member>
      <member refid="classquantit_1_1btensor_1a53a0ad6ab7a223e665a04f2a4a74be54" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>mul</name></member>
      <member refid="classquantit_1_1btensor_1a9329bdb7db6827c606f518afdf723bfc" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>mul</name></member>
      <member refid="classquantit_1_1btensor_1ac88360f21d921bc565957aa94c292e3e" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>mul_</name></member>
      <member refid="classquantit_1_1btensor_1ab4d4aeb5542d3b146adc8c7f618bd5d4" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>mul_</name></member>
      <member refid="classquantit_1_1btensor_1a5093c86ab4783ee74c199212372e1a8d" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>mul_helpers</name></member>
      <member refid="classquantit_1_1btensor_1a648ff1a8b48695e2220c67c163d2b87a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>multiply</name></member>
      <member refid="classquantit_1_1btensor_1a5759ec5ee73a725f919e21c9ad5893da" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>multiply</name></member>
      <member refid="classquantit_1_1btensor_1aecbcd853d7db4e7f879281cacd927d24" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>multiply_</name></member>
      <member refid="classquantit_1_1btensor_1acdf2c3bced0851d2ffa2963b8f8f868a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>multiply_</name></member>
      <member refid="classquantit_1_1btensor_1aef107bf98b7a14ff7b18ee6ab74138fe" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>mv</name></member>
      <member refid="classquantit_1_1btensor_1a6491831f28313cb7bfb8898d382c6cfc" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>neutral_selection_rule</name></member>
      <member refid="classquantit_1_1btensor_1a9938ca873fca45a633e65c789586a3dc" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>neutral_selection_rule_</name></member>
      <member refid="classquantit_1_1btensor_1ad0f6a9b00c7da20c43dca330f396e486" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>neutral_shape</name></member>
      <member refid="classquantit_1_1btensor_1a6c5ce2bf6e0c189de1475db903fcef87" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>neutral_shape_</name></member>
      <member refid="classquantit_1_1btensor_1a060533a5bb281929e7d9d529fb78704e" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>new_block_list_apply_to_all_blocks</name></member>
      <member refid="classquantit_1_1btensor_1ac66045a2c916677899b796f93dd6116e" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>new_block_list_apply_to_all_blocks_mod_index</name></member>
      <member refid="classquantit_1_1btensor_1a6934183b8e07a5548b6af93fa6d30676" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>non_conserving_cval_shift_</name></member>
      <member refid="classquantit_1_1btensor_1aecc44085de7c7513c38b3f3ae9e43a1c" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>not_equal</name></member>
      <member refid="classquantit_1_1btensor_1a2c2c790e8f5322426b50a0c4d82d1cbf" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>not_equal</name></member>
      <member refid="classquantit_1_1btensor_1a25492fd0cf70bd04a15152b2828ff84a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator*=</name></member>
      <member refid="classquantit_1_1btensor_1a6f4773f1a5435c9f67462c9d00bb69cd" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator*=</name></member>
      <member refid="classquantit_1_1btensor_1a109c38d9761e577b74558b47d79d4578" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator+=</name></member>
      <member refid="classquantit_1_1btensor_1ae0734b0facdc54c239ff1b64e87171d3" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator+=</name></member>
      <member refid="classquantit_1_1btensor_1a08d421493a2bef0fb493e62e5618a618" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator+=</name></member>
      <member refid="classquantit_1_1btensor_1a1c927b4b96f0df440eb15d371d60326c" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator-</name></member>
      <member refid="classquantit_1_1btensor_1ae39e1beeba982b25c0f685303e027e25" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator-=</name></member>
      <member refid="classquantit_1_1btensor_1a7dadd7696686ea3f3650421c11943fd0" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator-=</name></member>
      <member refid="classquantit_1_1btensor_1a572bea2379c409bb44200f0878b97e58" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator-=</name></member>
      <member refid="classquantit_1_1btensor_1a9257048ffbc8a78ea6825c979b8c9f6c" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator/=</name></member>
      <member refid="classquantit_1_1btensor_1a7602827a205d1054a078242c3fde3b70" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator/=</name></member>
      <member refid="classquantit_1_1btensor_1ab8accb3d7600a33d405d8c82d11c902c" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>operator=</name></member>
      <member refid="classquantit_1_1btensor_1a0bd5ce01b1230d8623719b3671337a8c" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>options</name></member>
      <member refid="classquantit_1_1btensor_1a0c1f8e920e86f933c19ce6c3326104ef" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>permute</name></member>
      <member refid="classquantit_1_1btensor_1a6e1177240b65cf9ae984ac05bd5d6453" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>permute_</name></member>
      <member refid="classquantit_1_1btensor_1a0edf85382bbee55870229540c4912f1d" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>pow</name></member>
      <member refid="classquantit_1_1btensor_1a50dae84454200f432ddfd492fde24b72" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>pow</name></member>
      <member refid="classquantit_1_1btensor_1a23779d7148f1df5e9938eb0b3bf087e6" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>pow_</name></member>
      <member refid="classquantit_1_1btensor_1ad52141be90fab8e1e2448b3e2aec7666" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>pow_</name></member>
      <member refid="classquantit_1_1btensor_1a409a9a8f7b44119cf2b4234d50618f95" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>rank</name></member>
      <member refid="classquantit_1_1btensor_1a6a22df7a1f01cdb4ccd465a03d4ca808" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>rbegin</name></member>
      <member refid="classquantit_1_1btensor_1a62792eef34b2dded3fbba91cd45996b2" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>rbegin</name></member>
      <member refid="classquantit_1_1btensor_1adcba131e1100c9098ed28212a9a12e8a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>rend</name></member>
      <member refid="classquantit_1_1btensor_1abd0ba29335c083d7961c4529fc602c2f" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>rend</name></member>
      <member refid="classquantit_1_1btensor_1af1f9b62db4386110f2b9db59615638f1" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>reserve_space_</name></member>
      <member refid="classquantit_1_1btensor_1af22340d87671cb9256b2ddd62a3d1419" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>reserve_space_</name></member>
      <member refid="classquantit_1_1btensor_1a444e6084e8589ae5ae4236cb35c27f01" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>reshape</name></member>
      <member refid="classquantit_1_1btensor_1a391e6d73f73bc486c0f080e6cd8ab7a8" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>reshape</name></member>
      <member refid="classquantit_1_1btensor_1a5c0f704cd6343d24b4a42031e2e22bc5" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>reshape_as</name></member>
      <member refid="classquantit_1_1btensor_1aeb69df3f09347a2c02e972d09db4d300" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>Scalar</name></member>
      <member refid="classquantit_1_1btensor_1a735a54314939812d6a072b99e08e4f41" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>section_conserved_qtt</name></member>
      <member refid="classquantit_1_1btensor_1a06bbbb38aaf2a2ce2bfb72a64daa94d3" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>section_conserved_qtt_range</name></member>
      <member refid="classquantit_1_1btensor_1a030b742a781eceef34c1869e94f72f90" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>section_conserved_qtt_range</name></member>
      <member refid="classquantit_1_1btensor_1a8011c285612e00a24b08f15fad6b3ea7" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>section_cqtts</name></member>
      <member refid="classquantit_1_1btensor_1af88cd6bb654832133a7dfbefa8f629c1" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>section_number</name></member>
      <member refid="classquantit_1_1btensor_1ab35ce624f7923057fe83535f2a72b87d" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>section_numbers</name></member>
      <member refid="classquantit_1_1btensor_1a1d4ad1dc15c534551a0e716f779f6347" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>section_size</name></member>
      <member refid="classquantit_1_1btensor_1a361df233fa9fdcd0b30f00f4a96d5bfa" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>section_size_cqtt</name></member>
      <member refid="classquantit_1_1btensor_1a294fa5ce9cebda7d6e4dfe94bc2c0384" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>section_sizes</name></member>
      <member refid="classquantit_1_1btensor_1ae60ecb2f76a04f7c8aa26650065b4919" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>section_sizes_cqtts</name></member>
      <member refid="classquantit_1_1btensor_1aa9022a8fc879ed5e55c729943141b109" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>sections_by_dim</name></member>
      <member refid="classquantit_1_1btensor_1a2e1977d45ea382985a737dc2058a5f0d" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>sections_sizes</name></member>
      <member refid="classquantit_1_1btensor_1a30cc2f016d81c4956955aeff74f9683e" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>selection_rule</name></member>
      <member refid="classquantit_1_1btensor_1a8eb0fa9598edbcca7bd461e828efcae9" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>set_selection_rule_</name></member>
      <member refid="classquantit_1_1btensor_1aee959f8823a1ccb165e6ddeced75b0f6" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>shape_from</name></member>
      <member refid="classquantit_1_1btensor_1ad3b2e95b7c6e1f9c7e2b764332182a2e" prot="private" virt="non-virtual"><scope>quantit::btensor</scope><name>shift_impl</name></member>
      <member refid="classquantit_1_1btensor_1af4e02d410e3e3c2f32903b352917877a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>shift_selection_rule_</name></member>
      <member refid="classquantit_1_1btensor_1a210be19c2e6965f45a5d028a27edb2df" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sizes</name></member>
      <member refid="classquantit_1_1btensor_1a17d65b7567711e3a99727df6139563d8" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sparse_zeros_like</name></member>
      <member refid="classquantit_1_1btensor_1a100bc35dd4606a1d980569ccf56585d2" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sqrt</name></member>
      <member refid="classquantit_1_1btensor_1a21d5621994a0b7ece0059ebb593d9734" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sqrt_</name></member>
      <member refid="classquantit_1_1btensor_1aa2702c03eed0b59e2aeddb841c192fa9" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>squeeze</name></member>
      <member refid="classquantit_1_1btensor_1a34cea434fb7a2ad8f76d9f963b6d7e1a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>squeeze</name></member>
      <member refid="classquantit_1_1btensor_1a5aec6d672f962905833cd3dd78f99463" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>squeeze_</name></member>
      <member refid="classquantit_1_1btensor_1ad8ee2b72c7e9770a451578470a3006ae" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>squeeze_</name></member>
      <member refid="classquantit_1_1btensor_1a401c2c270d7f5f3863215461c914e602" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sub</name></member>
      <member refid="classquantit_1_1btensor_1adb8cefd06bd67dfd951c7a94401887b8" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sub</name></member>
      <member refid="classquantit_1_1btensor_1ac466be1e461dcb032af2f3ab98493448" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sub</name></member>
      <member refid="classquantit_1_1btensor_1a8a8a3cb85f0c1835e35be8e9fda06691" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sub_</name></member>
      <member refid="classquantit_1_1btensor_1a4d131c891643d88c0528c9065d37de5b" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sub_</name></member>
      <member refid="classquantit_1_1btensor_1a1a49aa0e6dd17e12ad2d19286499acaa" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sub_</name></member>
      <member refid="classquantit_1_1btensor_1a87cd93fed91f19af47c00bb34ff38191" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>subtract</name></member>
      <member refid="classquantit_1_1btensor_1a3a2304fb10f081161f3bfe8ceabd60b5" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>subtract</name></member>
      <member refid="classquantit_1_1btensor_1a3a2d3056bf180fc794a0d5ecfee4105e" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>subtract_</name></member>
      <member refid="classquantit_1_1btensor_1a307aac4131fc15a55d2badd728eaf5c5" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>subtract_</name></member>
      <member refid="classquantit_1_1btensor_1aa4a1677cb63da7bbf239d4e1d7afc09e" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>sum</name></member>
      <member refid="classquantit_1_1btensor_1a3ebd3d5bdf055354b82254067e13e5c9" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>swap</name></member>
      <member refid="classquantit_1_1btensor_1a0e7d6bc11752aad4ea4ef2a6e378cfc0" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>t</name></member>
      <member refid="classquantit_1_1btensor_1a3c2fb6168468677f515607b5fc0fd1ac" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>t_</name></member>
      <member refid="classquantit_1_1btensor_1ad0a016599b6c1ba4a98111075081acda" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>tensor_product_shape</name></member>
      <member refid="classquantit_1_1btensor_1aa4c0666de033a5a36b7cb44a25ba264a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>tensordot</name></member>
      <member refid="classquantit_1_1btensor_1a156b81939db01a79de8ce940526a8d6a" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>tensorgdot</name></member>
      <member refid="classquantit_1_1btensor_1af1b6cdd46a57cdf88154a7f037d19517" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>tensorgdot_</name></member>
      <member refid="classquantit_1_1btensor_1acbb787c67f9a0c677d9182eb4e92ece6" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>test_same_shape</name></member>
      <member refid="classquantit_1_1btensor_1a5d8897e8e51c880654c5d467b2b0a8bc" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>throw_bad_tensor</name></member>
      <member refid="classquantit_1_1btensor_1a4df6cbc84f2195e0e9c31bb46ddf8c7f" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>to</name></member>
      <member refid="classquantit_1_1btensor_1ad7dad57c873818fa9617f58522a1a9a8" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>to</name></member>
      <member refid="classquantit_1_1btensor_1a45c16637e525d988d89da32becf61b75" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>to</name></member>
      <member refid="classquantit_1_1btensor_1ab66093d2d85010a3398aa2785e7cf7e4" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>to</name></member>
      <member refid="classquantit_1_1btensor_1a6e2807c9fa229dd591b20d3b66eee7cd" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>to</name></member>
      <member refid="classquantit_1_1btensor_1ad8f19565b73f40fd31973702e6862f46" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>to</name></member>
      <member refid="classquantit_1_1btensor_1a6a97b9d52b04fe14bf7bb5a55a810382" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>to_dense</name></member>
      <member refid="classquantit_1_1btensor_1a6176a831cc6ebf1769453bbd38846e3f" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>transpose</name></member>
      <member refid="classquantit_1_1btensor_1a68dcc4e14de14d0077d36d74455e5273" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>transpose_</name></member>
      <member refid="classquantit_1_1btensor_1aba0ba61994d2725dc6cc24c47deefa7f" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>truncate_impl</name></member>
      <member refid="classquantit_1_1btensor_1a43817292c24dfe72c39c9e0603579de0" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>vdot</name></member>
      <member refid="classquantit_1_1btensor_1a37483f60431fd313140dc861cb436fa8" prot="public" virt="non-virtual"><scope>quantit::btensor</scope><name>vec_list_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
