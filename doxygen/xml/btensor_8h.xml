<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="btensor_8h" kind="file" language="C++">
    <compoundname>btensor.h</compoundname>
    <includes refid="cquantity_8h" local="yes">Conserved/Composite/cquantity.h</includes>
    <includes refid="quantity__vector_8h" local="yes">Conserved/Composite/quantity_vector.h</includes>
    <includes refid="quantity_8h" local="yes">Conserved/quantity.h</includes>
    <includes refid="flat__map_8h" local="yes">blockTensor/flat_map.h</includes>
    <includes local="yes">boost/stl_interfaces/iterator_interface.hpp</includes>
    <includes local="yes">boost/stl_interfaces/view_interface.hpp</includes>
    <includes refid="property_8h" local="yes">property.h</includes>
    <includes refid="torch__formatter_8h" local="yes">torch_formatter.h</includes>
    <includes local="no">ATen/Functions.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">exception</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">torch/csrc/utils/variadic.h</includes>
    <includes local="no">torch/torch.h</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">vector</includes>
    <includes local="yes">doctest/doctest_proxy.h</includes>
    <includedby refid="blockTensor_2LinearAlgebra_8h" local="yes">/home/alex/project/quantt/include/blockTensor/LinearAlgebra.h</includedby>
    <includedby refid="dmrg__logger_8h" local="yes">/home/alex/project/quantt/include/dmrg_logger.h</includedby>
    <includedby refid="MPT_8h" local="yes">/home/alex/project/quantt/include/MPT.h</includedby>
    <includedby refid="operators_8h" local="yes">/home/alex/project/quantt/include/operators.h</includedby>
    <incdepgraph>
      <node id="12">
        <label>functional</label>
      </node>
      <node id="20">
        <label>fmt/format.h</label>
      </node>
      <node id="13">
        <label>iterator</label>
      </node>
      <node id="24">
        <label>cstdint</label>
      </node>
      <node id="33">
        <label>charconv</label>
      </node>
      <node id="26">
        <label>Conserved/Composite/quantity_vector.h</label>
        <link refid="quantity__vector_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>boost/stl_interfaces/iterator_interface.hpp</label>
      </node>
      <node id="29">
        <label>property.h</label>
        <link refid="property_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="32">
        <label>fmt/ostream.h</label>
      </node>
      <node id="36">
        <label>stdexcept</label>
      </node>
      <node id="14">
        <label>numeric</label>
      </node>
      <node id="34">
        <label>ATen/Functions.h</label>
      </node>
      <node id="35">
        <label>exception</label>
      </node>
      <node id="28">
        <label>boost/stl_interfaces/view_interface.hpp</label>
      </node>
      <node id="3">
        <label>Conserved/Composite/quantity_impl.h</label>
        <link refid="quantity__impl_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>ostream</label>
      </node>
      <node id="30">
        <label>torch_formatter.h</label>
        <link refid="torch__formatter_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>fmt/core.h</label>
      </node>
      <node id="17">
        <label>templateMeta.h</label>
        <link refid="templateMeta_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Conserved/Composite/cquantity.h</label>
        <link refid="cquantity_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ios</label>
      </node>
      <node id="5">
        <label>blockTensor/flat_map.h</label>
        <link refid="flat__map_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>Conserved/quantity.h</label>
        <link refid="quantity_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>tuple</label>
      </node>
      <node id="37">
        <label>torch/csrc/utils/variadic.h</label>
      </node>
      <node id="11">
        <label>fmt/ranges.h</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
      <node id="15">
        <label>utility</label>
      </node>
      <node id="1">
        <label>/home/alex/project/quantt/include/blockTensor/btensor.h</label>
        <link refid="btensor_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>torch/torch.h</label>
      </node>
      <node id="4">
        <label>Conserved/quantity_utils.h</label>
        <link refid="quantity__utils_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>type_traits</label>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
      <node id="27">
        <label>Conserved/Composite/quantity_vector_impl.h</label>
        <link refid="quantity__vector__impl_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>memory</label>
      </node>
      <node id="6">
        <label>doctest/doctest_proxy.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>/home/alex/project/quantt/include/dmrg.h</label>
        <link refid="dmrg_8h_source"/>
      </node>
      <node id="7">
        <label>/home/alex/project/quantt/include/operators.h</label>
        <link refid="operators_8h_source"/>
      </node>
      <node id="5">
        <label>/home/alex/project/quantt/include/MPT.h</label>
        <link refid="MPT_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/alex/project/quantt/include/blockTensor/LinearAlgebra.h</label>
        <link refid="blockTensor_2LinearAlgebra_8h_source"/>
      </node>
      <node id="1">
        <label>/home/alex/project/quantt/include/blockTensor/btensor.h</label>
        <link refid="btensor_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/alex/project/quantt/include/models.h</label>
        <link refid="models_8h_source"/>
      </node>
      <node id="3">
        <label>/home/alex/project/quantt/include/dmrg_logger.h</label>
        <link refid="dmrg__logger_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classquantit_1_1btensor" prot="public">quantit::btensor</innerclass>
    <innerclass refid="structquantit_1_1torch__shape" prot="public">quantit::torch_shape</innerclass>
    <innerclass refid="structquantit_1_1btensor_1_1block__prop__iter" prot="public">quantit::btensor::block_prop_iter</innerclass>
    <innerclass refid="structquantit_1_1btensor_1_1const__block__prop__iter" prot="public">quantit::btensor::const_block_prop_iter</innerclass>
    <innerclass refid="structquantit_1_1btensor_1_1block__prop__view" prot="public">quantit::btensor::block_prop_view</innerclass>
    <innerclass refid="structquantit_1_1btensor_1_1const__block__prop__view" prot="public">quantit::btensor::const_block_prop_view</innerclass>
    <innerclass refid="classquantit_1_1bad__selection__rule" prot="public">quantit::bad_selection_rule</innerclass>
    <innerclass refid="classquantit_1_1non__matching__cvals" prot="public">quantit::non_matching_cvals</innerclass>
    <innerclass refid="classquantit_1_1non__matching__sizes" prot="public">quantit::non_matching_sizes</innerclass>
    <innerclass refid="structfmt_1_1formatter_3_01quantit_1_1btensor_01_4" prot="public">fmt::formatter&lt; quantit::btensor &gt;</innerclass>
    <innernamespace refid="namespacequantit">quantit</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/>btensor.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Project:<sp/>QuantiT</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>File<sp/>Created:<sp/>Thursday,<sp/>1st<sp/>October<sp/>2020<sp/>10:54:53<sp/>am</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Alexandre<sp/>Foley<sp/>(Alexandre.foley@usherbrooke.ca)</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>-----</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Last<sp/>Modified:<sp/>Friday,<sp/>8th<sp/>January<sp/>2021<sp/>12:02:08<sp/>pm</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Modified<sp/>By:<sp/>Alexandre<sp/>Foley<sp/>(Alexandre.foley@usherbrooke.ca&gt;)</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>-----</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>Alexandre<sp/>Foley</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>GPL<sp/>v3</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>D49FFA60_85C4_431A_BA62_9B1D30D67E86</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>D49FFA60_85C4_431A_BA62_9B1D30D67E86</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Conserved/Composite/cquantity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Conserved/Composite/quantity_vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Conserved/quantity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blockTensor/flat_map.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/stl_interfaces/iterator_interface.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/stl_interfaces/view_interface.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;property.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;torch_formatter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/Functions.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;torch/csrc/utils/variadic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;torch/torch.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;doctest/doctest_proxy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">quantit</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">block_qtt_view;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>btensor_size</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>max</highlight></codeline>
<codeline lineno="43"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>reshape_mode</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>dims_only,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>overwrite_c_vals</highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>any_truth(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;in)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>out<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;it<sp/>:<sp/>in)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>|=<sp/>bool(it);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103" refid="classquantit_1_1btensor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref></highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>index_list<sp/>=<sp/>std::vector&lt;int64_t&gt;;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1flat__map" kindref="compound">block_list_t</ref><sp/>=<sp/><ref refid="classquantit_1_1flat__map" kindref="compound">flat_map&lt;index_list, torch::Tensor&gt;</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>init_list_t<sp/>=<sp/>std::initializer_list&lt;std::initializer_list&lt;std::tuple&lt;size_t,<sp/>any_quantity&gt;&gt;&gt;;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vec_list_t<sp/>=<sp/>std::vector&lt;std::vector&lt;std::tuple&lt;size_t,<sp/>any_quantity&gt;&gt;&gt;;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Scalar<sp/>=<sp/>torch::Scalar;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classproperty" kindref="compound">property&lt;any_quantity, btensor, any_quantity_cref&gt;</ref><sp/>selection_rule;<sp/></highlight><highlight class="comment">//<sp/>dmrjulia<sp/>equiv:<sp/>the<sp/>flux.</highlight></codeline>
<codeline lineno="121" refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vec_list_t<sp/>&amp;dir_block_size_cqtt,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>selection_rule,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vec_list_t<sp/>&amp;dir_block_size_cqtt,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>selection_rule,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_blocks,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>btensor(vec_list_t,<sp/>any_quantity,c10::TensorOptions<sp/>opt<sp/>=<sp/>{});<sp/>//for<sp/>python</highlight></codeline>
<codeline lineno="133" refid="classquantit_1_1btensor_1a7c4b39c3944d26c53ce30924d9d19221" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7c4b39c3944d26c53ce30924d9d19221" kindref="member">btensor</ref>(index_list<sp/>_sections_by_dim,<sp/><ref refid="classquantit_1_1any__quantity__vector" kindref="compound">any_quantity_vector</ref><sp/>_c_vals,<sp/>index_list<sp/>_section_sizes,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>_sel_rule,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>selection_rule((other.selection_rule.value)),<sp/>rank(other.rank),<sp/>sections_by_dim((other.sections_by_dim)),</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sections_sizes((other.sections_sizes)),<sp/>blocks_list((other.blocks_list)),<sp/>c_vals((other.c_vals)),</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_options(other._options)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor(btensor<sp/>&amp;&amp;other)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>selection_rule(std::move(other.selection_rule.value)),<sp/>rank(other.rank),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sections_by_dim(std::move(other.sections_by_dim)),<sp/>sections_sizes(std::move(other.sections_sizes)),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocks_list(std::move(other.blocks_list)),<sp/>c_vals(std::move(other.c_vals)),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_options(std::move(other._options))</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;operator=(btensor<sp/>other)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166" refid="classquantit_1_1btensor_1a9c4b09d43d375bcacfde1e9d3828c9f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a9c4b09d43d375bcacfde1e9d3828c9f4" kindref="member">btensor</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_rank,<sp/><ref refid="classquantit_1_1flat__map" kindref="compound">block_list_t</ref><sp/>_blocks,<sp/>index_list<sp/>_sections_by_dims,<sp/>index_list<sp/>_sections_sizes,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity__vector" kindref="compound">any_quantity_vector</ref><sp/>_c_vals,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>_sel_rule,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="classquantit_1_1btensor_1a210be19c2e6965f45a5d028a27edb2df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/><ref refid="classquantit_1_1btensor_1a210be19c2e6965f45a5d028a27edb2df" kindref="member">sizes</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180" refid="classquantit_1_1btensor_1a01c490238e0022b585dc430b13ec7dd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor::Scalar<sp/><ref refid="classquantit_1_1btensor_1a01c490238e0022b585dc430b13ec7dd1" kindref="member">item</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186" refid="classquantit_1_1btensor_1a7831359050b455e8bf4ead7bf205a1ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a7831359050b455e8bf4ead7bf205a1ae" kindref="member">block_increment</ref>(btensor::index_list<sp/>&amp;block_index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>btensor_compute_max_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;btens,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>std::numeric_limits&lt;size_t&gt;::max());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_tensor_check(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;b);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>utility<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>val_iter&gt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>const_val_iter,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>val_iter&gt;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>iter&gt;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_prop_view</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>const_iterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>iterator&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_prop_view</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_qtt_iter</ref><sp/>=<sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter&lt;any_quantity_vector::iterator&gt;</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_qtt_iter</ref><sp/>=</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter&lt;any_quantity_vector::const_iterator, any_quantity_vector::iterator&gt;</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_qtt_view</ref><sp/>=<sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_prop_view&lt;block_qtt_iter&gt;</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_qtt_view</ref><sp/>=<sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_prop_view&lt;const_block_qtt_iter, block_qtt_iter&gt;</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_size_iter</ref><sp/>=<sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter&lt;index_list::iterator&gt;</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_size_iter</ref><sp/>=<sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter&lt;index_list::const_iterator, index_list::iterator&gt;</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_size_view</ref><sp/>=<sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_prop_view&lt;block_size_iter&gt;</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_size_view</ref><sp/>=<sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_prop_view&lt;const_block_size_iter, block_size_iter&gt;</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>block_conservation_rule_test(index_list<sp/>block_index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>section_size(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>section)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;index_list::const_iterator,<sp/>index_list::const_iterator&gt;<sp/>section_sizes(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;any_quantity_vector::const_iterator,<sp/>any_quantity_vector::const_iterator&gt;<sp/>section_cqtts(</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;index_list::const_iterator,<sp/>index_list::const_iterator,<sp/><ref refid="structquantit_1_1vQuantiT__iterator_1_1const__cgroup__iterator" kindref="compound">any_quantity_vector::const_iterator</ref>,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1vQuantiT__iterator_1_1const__cgroup__iterator" kindref="compound">any_quantity_vector::const_iterator</ref>&gt;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>section_sizes_cqtts(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>section_conserved_qtt(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>section)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>element_conserved_qtt(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>element)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;any_quantity_vector::const_iterator,<sp/>any_quantity_vector::const_iterator&gt;<sp/>section_conserved_qtt_range(</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1ab59f73f7c6380e0bd8ca60e576d4b8d2" kindref="member">index</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;size_t,<sp/>any_quantity_cref&gt;<sp/>section_size_cqtt(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>section)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>accessor</highlight></codeline>
<codeline lineno="233" refid="classquantit_1_1btensor_1ab310947ff381e337d498cc343766a13c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>&amp;<ref refid="classquantit_1_1btensor_1ab310947ff381e337d498cc343766a13c" kindref="member">block_at</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_list<sp/>&amp;);</highlight></codeline>
<codeline lineno="241" refid="classquantit_1_1btensor_1a04c88f784e4188dcb1f96e10a280bec8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>&amp;<ref refid="classquantit_1_1btensor_1a04c88f784e4188dcb1f96e10a280bec8" kindref="member">block</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_list<sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>block<sp/>if<sp/>it<sp/>isn&apos;t<sp/>present<sp/>and<sp/>allowed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="classquantit_1_1btensor_1a18334e24f0068037814d8b060c60a0fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1flat__map" kindref="compound">block_list_t</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a18334e24f0068037814d8b060c60a0fc" kindref="member">blocks</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="classquantit_1_1btensor_1a1720ff8aa74853ae8bb00909342b6776" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_qtt_view</ref><sp/><ref refid="classquantit_1_1btensor_1a1720ff8aa74853ae8bb00909342b6776" kindref="member">block_quantities</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_list<sp/>&amp;block_index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268" refid="classquantit_1_1btensor_1a18efb9612ab0b9c34f438f0197abc502" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_size_view</ref><sp/><ref refid="classquantit_1_1btensor_1a18efb9612ab0b9c34f438f0197abc502" kindref="member">block_sizes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_list<sp/>&amp;block_index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274" refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rank;<sp/>}</highlight></codeline>
<codeline lineno="281" refid="classquantit_1_1btensor_1af88cd6bb654832133a7dfbefa8f629c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1af88cd6bb654832133a7dfbefa8f629c1" kindref="member">section_number</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sections_by_dim[<ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>];<sp/>}</highlight></codeline>
<codeline lineno="287" refid="classquantit_1_1btensor_1ab35ce624f7923057fe83535f2a72b87d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<ref refid="classquantit_1_1btensor_1ab35ce624f7923057fe83535f2a72b87d" kindref="member">section_numbers</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sections_by_dim;<sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block_qtt_view<sp/>block_quantities(index_list<sp/>block_index);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;get_cvals()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_vals;<sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="classquantit_1_1btensor_1aee959f8823a1ccb165e6ddeced75b0f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1aee959f8823a1ccb165e6ddeced75b0f6" kindref="member">shape_from</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;<sp/>&amp;dims)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310" refid="classquantit_1_1btensor_1a8619fb2e99352fa12aa8525ea3ecdcf0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1a8619fb2e99352fa12aa8525ea3ecdcf0" kindref="member">basic_create_view</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;<sp/>&amp;dims,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>preserve_rank<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318" refid="classquantit_1_1btensor_1ad78bdfc2bf9c771f09ee0841c2455e02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1ad78bdfc2bf9c771f09ee0841c2455e02" kindref="member">basic_index_put_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;<sp/>&amp;dims,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;value);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1ad78bdfc2bf9c771f09ee0841c2455e02" kindref="member">basic_index_put_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;<sp/>&amp;dims,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;value);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>neutral_shape()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327" refid="classquantit_1_1btensor_1a6c5ce2bf6e0c189de1475db903fcef87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a6c5ce2bf6e0c189de1475db903fcef87" kindref="member">neutral_shape_</ref>();</highlight></codeline>
<codeline lineno="337" refid="classquantit_1_1btensor_1ad0a016599b6c1ba4a98111075081acda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1ad0a016599b6c1ba4a98111075081acda" kindref="member">tensor_product_shape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="classquantit_1_1btensor_1ab59f73f7c6380e0bd8ca60e576d4b8d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1ab59f73f7c6380e0bd8ca60e576d4b8d2" kindref="member">index</ref>(torch::ArrayRef&lt;torch::indexing::TensorIndex&gt;<sp/>indices)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358" refid="classquantit_1_1btensor_1aa058a2117553c629ce362eb711945e58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1aa058a2117553c629ce362eb711945e58" kindref="member">index</ref>(std::initializer_list&lt;torch::indexing::TensorIndex&gt;<sp/>indices)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369" refid="classquantit_1_1btensor_1a8ee26adff8b22f7c20d85706b0deda4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a8ee26adff8b22f7c20d85706b0deda4a" kindref="member">index_put_</ref>(torch::ArrayRef&lt;torch::indexing::TensorIndex&gt;<sp/>indices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;rhs);</highlight></codeline>
<codeline lineno="379" refid="classquantit_1_1btensor_1a0a73b856d0a4da81209ed45b483bba4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a0a73b856d0a4da81209ed45b483bba4a" kindref="member">index_put_</ref>(torch::ArrayRef&lt;torch::indexing::TensorIndex&gt;<sp/>indices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;rhs);</highlight></codeline>
<codeline lineno="390" refid="classquantit_1_1btensor_1a9f7fed837898e36e46e003819b5183ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a9f7fed837898e36e46e003819b5183ca" kindref="member">index_put_</ref>(torch::ArrayRef&lt;torch::indexing::TensorIndex&gt;<sp/>indices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar<sp/>&amp;v);</highlight></codeline>
<codeline lineno="401" refid="classquantit_1_1btensor_1a6fc6df002361366fd2a92b8719114ebf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a6fc6df002361366fd2a92b8719114ebf" kindref="member">index_put_</ref>(std::initializer_list&lt;torch::indexing::TensorIndex&gt;<sp/>indices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;rhs);</highlight></codeline>
<codeline lineno="411" refid="classquantit_1_1btensor_1abf801ccfc47e2cea549de96560345924" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1abf801ccfc47e2cea549de96560345924" kindref="member">index_put_</ref>(std::initializer_list&lt;torch::indexing::TensorIndex&gt;<sp/>indices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;rhs);</highlight></codeline>
<codeline lineno="422" refid="classquantit_1_1btensor_1a89aa8e2f2b22575d4927170457d44a30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a89aa8e2f2b22575d4927170457d44a30" kindref="member">index_put_</ref>(std::initializer_list&lt;torch::indexing::TensorIndex&gt;<sp/>indices,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Scalar<sp/>&amp;v);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::const_iterator<sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.begin();<sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::const_iterator<sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.end();<sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::const_iterator<sp/>cbegin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.cbegin();<sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::const_iterator<sp/>cend()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.cend();<sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::iterator<sp/>begin()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.begin();<sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::iterator<sp/>end()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.end();<sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::reverse_iterator<sp/>rbegin()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.rbegin();<sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::reverse_iterator<sp/>rend()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.rend();<sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::const_reverse_iterator<sp/>rbegin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.rbegin();<sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::const_reverse_iterator<sp/>rend()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.rend();<sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::const_reverse_iterator<sp/>crbegin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.crbegin();<sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t::const_reverse_iterator<sp/>crend()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blocks_list.crend();<sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="classquantit_1_1btensor_1a6a97b9d52b04fe14bf7bb5a55a810382" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/><ref refid="classquantit_1_1btensor_1a6a97b9d52b04fe14bf7bb5a55a810382" kindref="member">to_dense</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453" refid="classquantit_1_1btensor_1aaba4b107e02154ce231380c1bb844766" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classquantit_1_1btensor_1aaba4b107e02154ce231380c1bb844766" kindref="member">check_tensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="458" refid="classquantit_1_1btensor_1a5d8897e8e51c880654c5d467b2b0a8bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a5d8897e8e51c880654c5d467b2b0a8bc" kindref="member">throw_bad_tensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Algebra<sp/>!!Attention!!<sp/>most<sp/>of<sp/>this<sp/>stuff<sp/>isn&apos;t<sp/>implemented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>add(<ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;&amp;other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;add_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;add_(<ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;&amp;other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>add(Scalar<sp/>other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;add_(Scalar<sp/>other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;operator+=(Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add_(other);<sp/>};</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;operator-=(Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sub_(other);<sp/>};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>&amp;operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add_(other);<sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;operator+=(btensor<sp/>&amp;&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add_(std::move(other));<sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;operator-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add_(other,<sp/>-1);<sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;operator-=(btensor<sp/>&amp;&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add_(std::move(other),<sp/>-1);<sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>addmv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;vec,<sp/>Scalar<sp/>beta<sp/>=<sp/>1,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;addmv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;vec,<sp/>Scalar<sp/>beta<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>addmm<sp/>do<sp/>fused<sp/>matrix<sp/>multiply-add<sp/>on<sp/>the<sp/>last<sp/>two<sp/>dimensions,<sp/>with<sp/>broadcasting<sp/>on<sp/>the<sp/>other<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>addmm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat2,<sp/>Scalar<sp/>beta<sp/>=<sp/>1,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;addmm_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat2,<sp/>Scalar<sp/>beta<sp/>=<sp/>1,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>addbmm<sp/>function<sp/>do<sp/>fused<sp/>matrix<sp/>multiply-add,<sp/>with<sp/>a<sp/>reduction<sp/>on<sp/>the<sp/>first<sp/>tensor<sp/>index.<sp/>See<sp/>baddbmm<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reduction<sp/>is<sp/>not<sp/>desired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>addbmm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat2,<sp/>Scalar<sp/>beta<sp/>=<sp/>1,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;addbmm_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat2,<sp/>Scalar<sp/>beta<sp/>=<sp/>1,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;addcdiv_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tensor1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tensor2,<sp/>Scalar<sp/>beta<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>addcdiv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tensor1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tensor2,<sp/>Scalar<sp/>beta<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;addcmul_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tensor1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tensor2,<sp/>Scalar<sp/>beta<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>addcmul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tensor1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tensor2,<sp/>Scalar<sp/>beta<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>baddbmm<sp/>is<sp/>the<sp/>batched<sp/>fused<sp/>mutiply<sp/>add.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>baddbmm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;bathc1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;batch2,<sp/>Scalar<sp/>beta<sp/>=<sp/>1,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;baddbmm_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;bathc1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;batch2,<sp/>Scalar<sp/>beta<sp/>=<sp/>1,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>batched<sp/>matrix-multiply,<sp/>no<sp/>broadcast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>bmm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mat)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>dot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>vdot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>kron(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>broadcasting<sp/>matmul<sp/>(batched)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>matmul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matmul<sp/>no<sp/>broadcast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>mm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>sum()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>t()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a6176a831cc6ebf1769453bbd38846e3f" kindref="member">transpose</ref>(<ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>()<sp/>-<sp/>1,<sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>()<sp/>-<sp/>2);<sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;t_()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transpose_(<ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>()<sp/>-<sp/>1,<sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>()<sp/>-<sp/>2);<sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>sqrt()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;sqrt_();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>abs()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;abs_();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>pow(btensor::Scalar<sp/>exponent)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;pow_(btensor::Scalar<sp/>exponent);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>pow(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;exponent)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;pow_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;exponent);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>ge(btensor::Scalar<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>ge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>le(btensor::Scalar<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>le(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>less(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>less(btensor::Scalar<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>greater(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>greater(btensor::Scalar<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>eq(btensor::Scalar<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>eq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>not_equal(btensor::Scalar<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>not_equal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>div(btensor::Scalar)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;div_(btensor::Scalar);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>div(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;div_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;operator*=(btensor::Scalar<sp/>val)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1ac88360f21d921bc565957aa94c292e3e" kindref="member">mul_</ref>(val);<sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;operator*=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1ac88360f21d921bc565957aa94c292e3e" kindref="member">mul_</ref>(other);<sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;operator/=(btensor::Scalar<sp/>val)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>div_(val);<sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;operator/=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>div_(other);<sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>operator-()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mul(-1);<sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="classquantit_1_1btensor_1ac88360f21d921bc565957aa94c292e3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1ac88360f21d921bc565957aa94c292e3e" kindref="member">mul_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>mul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>mul(Scalar<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1ac88360f21d921bc565957aa94c292e3e" kindref="member">mul_</ref>(Scalar<sp/>other);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>multiply(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;multiply_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>multiply(Scalar<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mul(other);<sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;multiply_(Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1ac88360f21d921bc565957aa94c292e3e" kindref="member">mul_</ref>(other);<sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>mv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;vec)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>permute(torch::IntArrayRef)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>&amp;permute_(torch::IntArrayRef);</highlight></codeline>
<codeline lineno="567" refid="classquantit_1_1btensor_1a444e6084e8589ae5ae4236cb35c27f01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1a444e6084e8589ae5ae4236cb35c27f01" kindref="member">reshape</ref>(torch::IntArrayRef<sp/>index_group)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;reshape_mode<sp/>mode<sp/>=<sp/>reshape_mode::dims_only&gt;</highlight></codeline>
<codeline lineno="584" refid="classquantit_1_1btensor_1a5c0f704cd6343d24b4a42031e2e22bc5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1a5c0f704cd6343d24b4a42031e2e22bc5" kindref="member">reshape_as</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="598" refid="classquantit_1_1btensor_1a391e6d73f73bc486c0f080e6cd8ab7a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1a391e6d73f73bc486c0f080e6cd8ab7a8" kindref="member">reshape</ref>(std::initializer_list&lt;int64_t&gt;<sp/>a)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a391e6d73f73bc486c0f080e6cd8ab7a8" kindref="member">reshape</ref>(torch::IntArrayRef(a));<sp/>}</highlight></codeline>
<codeline lineno="608" refid="classquantit_1_1btensor_1a6176a831cc6ebf1769453bbd38846e3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1a6176a831cc6ebf1769453bbd38846e3f" kindref="member">transpose</ref>(int64_t<sp/>dim0,<sp/>int64_t<sp/>dim1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>btensor<sp/>transpose(torch::Dimname<sp/>dim0,<sp/>torch::Dimname<sp/>dim1)<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;transpose_(int64_t<sp/>dim0,<sp/>int64_t<sp/>dim1);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>sub(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add(other,<sp/>-alpha);<sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;sub_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add_(other,<sp/>-alpha);<sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>sub(btensor<sp/>&amp;&amp;other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add(std::move(other),<sp/>-alpha);<sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;sub_(btensor<sp/>&amp;&amp;other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add_(std::move(other),<sp/>-alpha);<sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>sub(Scalar<sp/>other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add(other,<sp/>-alpha);<sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;sub_(Scalar<sp/>other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add_(other,<sp/>-alpha);<sp/>};</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>subtract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sub(other,<sp/>alpha);<sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;subtract_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sub_(other,<sp/>alpha);<sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>subtract(Scalar<sp/>other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sub(other,<sp/>alpha);<sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;subtract_(Scalar<sp/>other,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sub_(other,<sp/>alpha);<sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>tensordot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other,<sp/>torch::IntArrayRef<sp/>dim_self,<sp/>torch::IntArrayRef<sp/>dims_other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>tensorgdot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mul1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mul2,<sp/>torch::IntArrayRef<sp/>dims1,<sp/>torch::IntArrayRef<sp/>dims2,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>beta<sp/>=<sp/>1,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;tensorgdot_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mul1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mul2,<sp/>torch::IntArrayRef<sp/>dims1,<sp/>torch::IntArrayRef<sp/>dims2,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Scalar<sp/>beta<sp/>=<sp/>1,<sp/>Scalar<sp/>alpha<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>squeeze()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>squeeze(int64_t<sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;squeeze_(int64_t<sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>&amp;squeeze_();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor_1a7b943710b36561f1f76f2bec7e5fa63b" kindref="member">btensor</ref><sp/>isnan()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>any()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>anynan()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647" refid="classquantit_1_1btensor_1a7ecbb590915372481349263bcc60cfd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1a7ecbb590915372481349263bcc60cfd8" kindref="member">conj</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656" refid="classquantit_1_1btensor_1a902003e818128aef05e5e6a39ac77501" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1a902003e818128aef05e5e6a39ac77501" kindref="member">conj_only</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="667" refid="classquantit_1_1btensor_1a1742f2450d18a58b0508799e9d48c469" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1a1742f2450d18a58b0508799e9d48c469" kindref="member">inverse_cvals</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="675" refid="classquantit_1_1btensor_1a5960100f9b13fb48702b30644283d9a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a5960100f9b13fb48702b30644283d9a4" kindref="member">inverse_cvals_</ref>();</highlight></codeline>
<codeline lineno="683" refid="classquantit_1_1btensor_1aef10a4a7f737d8d45fb4e457440bf7de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1aef10a4a7f737d8d45fb4e457440bf7de" kindref="member">cval_shift</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>shift,<sp/>int64_t<sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="691" refid="classquantit_1_1btensor_1a037f8cc269cc93d75d84a95fbb0b16a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a037f8cc269cc93d75d84a95fbb0b16a2" kindref="member">cval_shift_</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>shift,<sp/>int64_t<sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="700" refid="classquantit_1_1btensor_1a6934183b8e07a5548b6af93fa6d30676" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a6934183b8e07a5548b6af93fa6d30676" kindref="member">non_conserving_cval_shift_</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>shift,<sp/>int64_t<sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="707" refid="classquantit_1_1btensor_1af4e02d410e3e3c2f32903b352917877a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1af4e02d410e3e3c2f32903b352917877a" kindref="member">shift_selection_rule_</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>shift);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="classquantit_1_1btensor_1af1f9b62db4386110f2b9db59615638f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1af1f9b62db4386110f2b9db59615638f1" kindref="member">reserve_space_</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1af1f9b62db4386110f2b9db59615638f1" kindref="member">reserve_space_</ref>(btensor_size);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="725" refid="classquantit_1_1btensor_1a8eb0fa9598edbcca7bd461e828efcae9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;<ref refid="classquantit_1_1btensor_1a8eb0fa9598edbcca7bd461e828efcae9" kindref="member">set_selection_rule_</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>value);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;neutral_selection_rule_()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1a8eb0fa9598edbcca7bd461e828efcae9" kindref="member">set_selection_rule_</ref>(selection_rule-&gt;neutral());<sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>neutral_selection_rule()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="728"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>out<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.<ref refid="classquantit_1_1btensor_1a8eb0fa9598edbcca7bd461e828efcae9" kindref="member">set_selection_rule_</ref>(selection_rule-&gt;neutral());</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>BTENS&gt;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::tuple&lt;btensor,<sp/>std::tuple&lt;BTENS...&gt;&gt;<sp/>truncate_impl(btensor<sp/>&amp;&amp;d,<sp/>std::tuple&lt;BTENS...&gt;<sp/>&amp;&amp;unitaries,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min,<sp/>btensor::Scalar<sp/>tol,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor::Scalar<sp/>pow);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>to(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::TensorOptions<sp/>&amp;options<sp/>=<sp/>{},<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor::block_list_t<sp/>out_list<sp/>=</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_block_list_apply_to_all_blocks([&amp;options,<sp/>non_blocking,<sp/>copy,<sp/>memory_format](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atensor)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atensor.to(options,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);<sp/>});</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>btensor(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::move(out_list));</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out._options<sp/>=<sp/>out.begin()-&gt;second.options();</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>to(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="749"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>other.options();</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to(options,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>to(torch::Device<sp/>device,<sp/>torch::ScalarType<sp/>dtype,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="755"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor::block_list_t<sp/>out_list<sp/>=<sp/>new_block_list_apply_to_all_blocks(</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[device,<sp/>dtype,<sp/>non_blocking,<sp/>copy,<sp/>memory_format](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atensor)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atensor.to(device,<sp/>dtype,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);<sp/>});</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>btensor(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::move(out_list));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out._options<sp/>=<sp/>out.begin()-&gt;second.options();</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>to(torch::ScalarType<sp/>dtype,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="765"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor::block_list_t<sp/>out_list<sp/>=</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_block_list_apply_to_all_blocks([dtype,<sp/>non_blocking,<sp/>copy,<sp/>memory_format](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atensor)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atensor.to(dtype,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);<sp/>});</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>btensor(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::move(out_list));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out._options<sp/>=<sp/>out.begin()-&gt;second.options();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>to(caffe2::TypeMeta<sp/>type_meta,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="775"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor::block_list_t<sp/>out_list<sp/>=</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_block_list_apply_to_all_blocks([type_meta,<sp/>non_blocking,<sp/>copy,<sp/>memory_format](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atensor)</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atensor.to(type_meta,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);<sp/>});</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>btensor(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::move(out_list));</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out._options<sp/>=<sp/>out.begin()-&gt;second.options();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>to(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="785"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor::block_list_t<sp/>out_list<sp/>=</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_block_list_apply_to_all_blocks([&amp;other,<sp/>non_blocking,<sp/>copy,<sp/>memory_format](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atensor)</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>atensor.to(other,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);<sp/>});</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>btensor(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::move(out_list));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out._options<sp/>=<sp/>out.begin()-&gt;second.options();</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>options()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_options;<sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/><ref refid="classquantit_1_1btensor_1a17d65b7567711e3a99727df6139563d8" kindref="member">sparse_zeros_like</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>c10::TensorOptions<sp/>opt);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Throws<sp/>=<sp/>false&gt;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_product_compat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;in1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;in2,<sp/>torch::IntArrayRef<sp/>dims1,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::IntArrayRef<sp/>dims2)<sp/>noexcept(!Throws);</highlight></codeline>
<codeline lineno="805" refid="classquantit_1_1btensor_1a0584d58aef82ff1994c454d5644142e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;torch::indexing::TensorIndex&gt;<sp/><ref refid="classquantit_1_1btensor_1a0584d58aef82ff1994c454d5644142e5" kindref="member">full_slice</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;tensor,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::index_list<sp/>&amp;<ref refid="classquantit_1_1btensor_1a04c88f784e4188dcb1f96e10a280bec8" kindref="member">block</ref>);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test_same_shape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;b);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="816" refid="classquantit_1_1btensor_1ad9a02622134dc835f3a333bac282a1cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;index_list,<sp/>index_list&gt;<sp/><ref refid="classquantit_1_1btensor_1ad9a02622134dc835f3a333bac282a1cb" kindref="member">element_index_decompose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_list<sp/>&amp;element_index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>index_list<sp/>sections_by_dim;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>index_list<sp/>sections_sizes;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>non-empty<sp/>slices,<sp/>this<sp/>is<sp/>strictly<sp/>redundent:<sp/>the<sp/>information<sp/>could<sp/>be<sp/>found<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inspecting<sp/>the<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>truncation<sp/>should<sp/>remove<sp/>any<sp/>and<sp/>all<sp/>empty<sp/>slices,<sp/>but<sp/>user-written<sp/>tensor<sp/>could<sp/>have<sp/>empty<sp/>slices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1flat__map" kindref="compound">block_list_t</ref><sp/>blocks_list;<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity__vector" kindref="compound">any_quantity_vector</ref></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_vals;<sp/></highlight><highlight class="comment">//<sp/>dmrjulia<sp/>equiv:<sp/>QnumSum<sp/>in<sp/>the<sp/>QTensor<sp/>class.<sp/>This<sp/>structure<sp/>doesn&apos;t<sp/>need<sp/>the<sp/>full<sp/>list<sp/>(QnumMat)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>_options;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fmt::formatter&lt;quantit::<ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>&gt;;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>friend<sp/>class<sp/>mul_helpers;</highlight></codeline>
<codeline lineno="838" refid="classquantit_1_1btensor_1ac56cbb1dbc7e3b803e8e44aca0a02c45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>friend<sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/><ref refid="classquantit_1_1btensor_1ac56cbb1dbc7e3b803e8e44aca0a02c45" kindref="member">eye_like</ref>(const<sp/>btensor&amp;<sp/>shape,c10::TensorOptions<sp/>opt);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>(const<sp/>btensor<sp/>&amp;shape,<sp/>block_list_t<sp/>&amp;&amp;block_list,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>selection_rule(shape.selection_rule.value),<sp/>rank(shape.rank),<sp/>sections_by_dim(shape.sections_by_dim),</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sections_sizes(shape.sections_sizes),<sp/>blocks_list(std::move(block_list)),<sp/>c_vals(shape.c_vals),</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_options(shape._options.merge_in(opt))</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;any_quantity_vector::iterator,<sp/>any_quantity_vector::iterator&gt;<sp/>section_conserved_qtt_range(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor_1ab59f73f7c6380e0bd8ca60e576d4b8d2" kindref="member">index</ref>);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>shift_impl(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>shift,<sp/>int64_t<sp/><ref refid="classquantit_1_1btensor_1a399cee30857b6b711c46817bbc0a9c56" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">F,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply_to_all_blocks_mod_index(A<sp/>&amp;&amp;a,<sp/>F<sp/>&amp;&amp;f,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;b<sp/>:<sp/>blocks_list)</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a(std::get&lt;0&gt;(b));</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::invoke(std::forward&lt;F&gt;(f),<sp/>std::get&lt;1&gt;(b),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">F,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>apply_to_all_blocks(F<sp/>&amp;&amp;f,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apply_to_all_blocks_mod_index([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x)<sp/>{},<sp/>std::forward&lt;F&gt;(f),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">F,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>force_inplace_apply_to_all_blocks_mod_index(A<sp/>&amp;&amp;a,<sp/>F<sp/>&amp;&amp;f,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;b<sp/>:<sp/>blocks_list)</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a(std::get&lt;0&gt;(b));</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;1&gt;(b)<sp/>=<sp/>std::invoke(std::forward&lt;F&gt;(f),<sp/>std::get&lt;1&gt;(b),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">F,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>force_inplace_apply_to_all_blocks(F<sp/>&amp;&amp;f,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force_inplace_apply_to_all_blocks_mod_index([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;)<sp/>{},<sp/>std::forward&lt;F&gt;(f),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">F,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t<sp/>new_block_list_apply_to_all_blocks_mod_index(A<sp/>&amp;&amp;a,<sp/>F<sp/>&amp;&amp;f,<sp/>Args<sp/>&amp;&amp;...args)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="945"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block_list_t<sp/>new_blocks;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_blocks.reserve(blocks_list.size());</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;b<sp/>:<sp/>blocks_list)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_blocks.emplace(new_blocks.end(),<sp/>std::get&lt;0&gt;(b),</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::invoke(std::forward&lt;F&gt;(f),<sp/>std::get&lt;1&gt;(b),<sp/>std::forward&lt;Args&gt;(args)...));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a(std::get&lt;0&gt;(*(new_blocks.end()<sp/>-<sp/>1)));</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_blocks;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">F,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>block_list_t<sp/>new_block_list_apply_to_all_blocks(F<sp/>&amp;&amp;f,<sp/>Args<sp/>&amp;&amp;...args)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="967"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_block_list_apply_to_all_blocks_mod_index([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;)<sp/>{},<sp/>std::forward&lt;F&gt;(f),</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>promote<sp/>=<sp/>true&gt;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>broadcast_operation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other,<sp/>F<sp/>&amp;&amp;f)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F_&gt;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>&amp;broadcast_operation_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other,<sp/>F<sp/>&amp;&amp;f,<sp/>F_<sp/>&amp;&amp;f_);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>&amp;impl_basic_index_put_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;<sp/>&amp;dims,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;value);</highlight></codeline>
<codeline lineno="976"><highlight class="normal">};</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="985" refid="classquantit_1_1btensor_1a17d65b7567711e3a99727df6139563d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>sparse_zeros_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;tens,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>(tens,<ref refid="classquantit_1_1flat__map" kindref="compound">btensor::block_list_t</ref>());</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>out._options<sp/>=<sp/>out._options.merge_in(opt);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>shape_from(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;btensor&gt;<sp/>&amp;btens_list)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>what&apos;s<sp/>missing<sp/>is<sp/>a<sp/>way<sp/>to<sp/>make<sp/>view<sp/>on<sp/>btensors.<sp/>For<sp/>that<sp/>i<sp/>will<sp/>almost<sp/>definitly<sp/>need<sp/>to<sp/>reproduce<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>equivalent<sp/>part<sp/>of<sp/>pytorch.<sp/>I<sp/>had<sp/>hoped<sp/>to<sp/>make<sp/>that<sp/>at<sp/>a<sp/>much<sp/>later<sp/>point,<sp/>but<sp/>it<sp/>needed<sp/>now.<sp/>This<sp/>function<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>very<sp/>useful<sp/>to<sp/>implement<sp/>the<sp/>tensor<sp/>(kronecker)<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>quantit::sparse_zeros_like(*btens_list.begin());</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tens_it<sp/>=<sp/>btens_list.begin();</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>++tens_it;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>tens_it<sp/>!=<sp/>btens_list.end();<sp/>++tens_it)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>out.tensor_product_shape(*tens_it);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>disambiguated_shape_from(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;btensor&gt;<sp/>&amp;btens_list)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_from(btens_list);<sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&lt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>remove_cvref_t<sp/>=<sp/>std::remove_cv_t&lt;std::remove_reference_t&lt;A&gt;&gt;;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>remove_cvref_t<sp/>=<sp/>std::remove_cvref_t&lt;A&gt;;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>shape_from(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;<sp/>&amp;inds)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.<ref refid="classquantit_1_1btensor_1aee959f8823a1ccb165e6ddeced75b0f6" kindref="member">shape_from</ref>(inds);<sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044" refid="structquantit_1_1torch__shape" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref></highlight></codeline>
<codeline lineno="1045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>_sizes;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::TensorOptions<sp/>opt;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;tens)<sp/>:<sp/>_sizes(tens.sizes().begin(),<sp/>tens.sizes().end()),<sp/>opt(tens.options())<sp/>{}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref>(std::vector&lt;int64_t&gt;<sp/>_sizes,<sp/>torch::TensorOptions<sp/>_opt)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_sizes(std::move(_sizes)),<sp/>opt(std::move(_opt))</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>dim()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_sizes.size();<sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::IntArrayRef<sp/>sizes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_sizes;<sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>torch::Tensor()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::empty(_sizes,<sp/>opt);<sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref><sp/>neutral_shape()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref><sp/>&amp;neutral_shape_()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref><sp/>&amp;inverse_cvals()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref><sp/>inverse_cvals_()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref><sp/>neutral_selection_rule()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref><sp/>&amp;neutral_selection_rule_()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref><sp/>&amp;set_selection_rule_(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>get_section_cval(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1torch__shape" kindref="compound">torch_shape</ref><sp/>&amp;,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1quantity" kindref="compound">quantity&lt;conserved::C&lt;1&gt;</ref>&gt;(0);<sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>any_quantity_cref<sp/>get_section_cval(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>section)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.section_conserved_qtt(dim,<sp/>section);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">torch_shape<sp/>shape_from(std::initializer_list&lt;torch_shape&gt;<sp/>shapes);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Enabled<sp/>=<sp/>std::enable_if_t&lt;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::conjunction_v&lt;std::is_convertible&lt;remove_cvref_t&lt;Args&gt;,<sp/>torch_shape&gt;...&gt;<sp/>or</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::conjunction_v&lt;std::is_same&lt;remove_cvref_t&lt;Args&gt;,<sp/>btensor&gt;...&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape_from(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args<sp/>&amp;...args)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::conjunction_v&lt;std::is_convertible&lt;Args,<sp/>torch_shape&gt;...&gt;<sp/>or</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::conjunction_v&lt;std::is_same&lt;remove_cvref_t&lt;Args&gt;,<sp/>btensor&gt;...&gt;,</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;All<sp/>the<sp/>arguments<sp/>must<sp/>be<sp/>either<sp/>torch_shape<sp/>or<sp/>btensor<sp/>to<sp/>get<sp/>into<sp/>this<sp/>function,<sp/>don&apos;t<sp/>try<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;side-step<sp/>the<sp/>enable<sp/>if.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_from({args...});</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">torch_shape<sp/>shape_from(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch_shape<sp/>&amp;shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;<sp/>inds);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_refcount(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;tens);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(btensor<sp/>&amp;a,<sp/>btensor<sp/>&amp;b)<sp/>{<sp/>a.swap(b);<sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>value_iterator&gt;</highlight></codeline>
<codeline lineno="1100" refid="structquantit_1_1btensor_1_1block__prop__iter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">btensor::block_prop_iter</ref></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>boost::stl_interfaces::iterator_interface&lt;block_prop_iter&lt;value_iterator&gt;,<sp/>std::bidirectional_iterator_tag,</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>value_iterator::value_type,<sp/>typename<sp/>value_iterator::reference,</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>value_iterator::pointer,</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>value_iterator::difference_type&gt;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>il_iter<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>btensor::index_list::const_iterator;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ValueIterator<sp/>=<sp/>value_iterator;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>value_iterator<sp/>val_iter;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>il_iter<sp/>section_by_dim;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>il_iter<sp/>block_index;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref>(value_iterator<sp/>val_it,<sp/>il_iter<sp/>sect_by_dim,<sp/>il_iter<sp/>block_ind)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>val_iter(val_it),<sp/>section_by_dim(sect_by_dim),<sp/>block_index(block_ind)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref>()<sp/>:<sp/>val_iter(),<sp/>section_by_dim(),<sp/>block_index()<sp/>{}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base_type<sp/>=<sp/>boost::stl_interfaces::iterator_interface&lt;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref>,<sp/>std::bidirectional_iterator_tag,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>value_iterator::value_type,</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>value_iterator::reference,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>value_iterator::pointer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>value_iterator::difference_type&gt;;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>base_type::reference<sp/>operator*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(val_iter<sp/>+<sp/>*block_index);<sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>comparison<sp/>between<sp/>the<sp/>iterators<sp/>of<sp/>2<sp/>different<sp/>view<sp/>object<sp/>will<sp/>alway<sp/>return<sp/>not<sp/>equal,<sp/>enev<sp/>if<sp/>constructed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>same<sp/>block<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val_iter<sp/>==<sp/>other.val_iter<sp/>&amp;&amp;<sp/>section_by_dim<sp/>==<sp/>other.section_by_dim<sp/>&amp;&amp;<sp/>block_index<sp/>==<sp/>other.block_index;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref><sp/>&amp;operator++()</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++block_index;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val_iter<sp/>+=<sp/>*section_by_dim;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++section_by_dim;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref><sp/>&amp;operator--()</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--section_by_dim;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val_iter<sp/>-=<sp/>*section_by_dim;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--block_index;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base_type::operator++;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base_type::operator--;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_iterator<sp/>&amp;get_val_iter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val_iter;<sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>il_iter<sp/>&amp;get_section()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>section_by_dim;<sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>il_iter<sp/>&amp;get_bi()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>block_index;<sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>const_value_iter,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>value_iter&gt;</highlight></codeline>
<codeline lineno="1151" refid="structquantit_1_1btensor_1_1const__block__prop__iter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">btensor::const_block_prop_iter</ref><sp/>:<sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">btensor::block_prop_iter</ref>&lt;const_value_iter&gt;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter&lt;value_iter&gt;</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter&lt;const_value_iter&gt;</ref>(other.get_val_iter(),<sp/>other.get_section(),<sp/>other.get_bi())</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter&lt;const_value_iter&gt;::block_prop_iter</ref>;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref><sp/>&amp;operator++()</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter&lt;const_value_iter&gt;::operator++</ref>();</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref><sp/>&amp;operator--()</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter&lt;const_value_iter&gt;::operator--</ref>();</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref><sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter&lt;const_value_iter&gt;::operator++</ref>();</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref><sp/>operator--(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter&lt;const_value_iter&gt;::operator--</ref>();</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>iterator&gt;</highlight></codeline>
<codeline lineno="1183" refid="structquantit_1_1btensor_1_1block__prop__view" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">btensor::block_prop_view</ref><sp/>:<sp/>boost::stl_interfaces::view_interface&lt;block_prop_view&lt;iterator&gt;&gt;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_prop_view</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_prop_view</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>iterator::ValueIterator<sp/>val_first,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>iterator::ValueIterator<sp/>val_last,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_list::const_iterator<sp/>section_by_dim_begin,<sp/>index_list::const_iterator<sp/>section_by_dim_end,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_list<sp/>_block_index)</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>block_index(std::move(_block_index)),<sp/>first(val_first,<sp/>section_by_dim_begin,<sp/>block_index.begin()),</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last(val_last,<sp/>section_by_dim_end,<sp/>block_index.end())</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_prop_view</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>iterator::ValueIterator<sp/>val_first,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>iterator::ValueIterator<sp/>val_last,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_list<sp/>&amp;section_by_dim,<sp/>index_list<sp/>_block_index)</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>block_index(std::move(_block_index)),<sp/>first(val_first,<sp/>section_by_dim.begin(),<sp/>block_index.begin()),</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last(val_last,<sp/>section_by_dim.end(),<sp/>block_index.end())</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first;<sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last;<sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_list<sp/>&amp;get_index()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>block_index;<sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor::index_list<sp/>block_index;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>first;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>last;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>const_iterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>iterator&gt;</highlight></codeline>
<codeline lineno="1210" refid="structquantit_1_1btensor_1_1const__block__prop__view" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">btensor::const_block_prop_view</ref><sp/>:<sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">btensor::block_prop_view</ref>&lt;const_iterator&gt;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_prop_view&lt;const_iterator&gt;::block_prop_view</ref>;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structquantit_1_1btensor_1_1const__block__prop__view" kindref="compound">const_block_prop_view</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">btensor::block_prop_view&lt;iterator&gt;</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structquantit_1_1btensor_1_1block__prop__view" kindref="compound">block_prop_view&lt;const_iterator&gt;</ref>(other.begin().get_val_iter(),<sp/>other.end().get_val_iter(),</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.begin().get_section(),<sp/>other.end().get_section(),<sp/>other.get_index())</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>tensordot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;right,<sp/>torch::IntArrayRef<sp/>dims_left,</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::IntArrayRef<sp/>dims_right)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left.tensordot(right,<sp/>dims_left,<sp/>dims_right);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>tensorgdot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;add,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;mul1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>&amp;mul2,<sp/>torch::IntArrayRef<sp/>dims1,</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::IntArrayRef<sp/>dims2,<sp/>btensor::Scalar<sp/>beta<sp/>=<sp/>1,<sp/>btensor::Scalar<sp/>alpha<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add.tensorgdot(mul1,<sp/>mul2,<sp/>dims1,<sp/>dims2,<sp/>beta,<sp/>alpha);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tensorgdot_(btensor<sp/>&amp;add,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mul1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;mul2,<sp/>torch::IntArrayRef<sp/>dims1,</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::IntArrayRef<sp/>dims2,<sp/>btensor::Scalar<sp/>beta<sp/>=<sp/>1,<sp/>btensor::Scalar<sp/>alpha<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>add.tensorgdot_(mul1,<sp/>mul2,<sp/>dims1,<sp/>dims2,<sp/>beta,<sp/>alpha);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>sparse_zeros(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>btensor(shape_spec,<sp/>std::move(selection_rule),<sp/>std::move(opt)<sp/>);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal">btensor<sp/>zeros(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">btensor<sp/>zeros_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">btensor<sp/>ones(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">btensor<sp/>ones_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">btensor<sp/>empty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">btensor<sp/>empty_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">btensor<sp/>rand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">btensor<sp/>rand_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">btensor<sp/>full(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,<sp/>btensor::Scalar<sp/>fill_value,</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">btensor<sp/>full_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>btensor::Scalar<sp/>fill_value,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">btensor<sp/>randint(int64_t<sp/>low,<sp/>int64_t<sp/>high,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>randint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,<sp/>int64_t<sp/>low,<sp/>int64_t<sp/>high,</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>randint(low,<sp/>high,<sp/>shape_spec,<sp/>selection_rule,<sp/>opt);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">btensor<sp/>randint_like(int64_t<sp/>low,<sp/>int64_t<sp/>high,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>randint_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;shape,<sp/>int64_t<sp/>low,<sp/>int64_t<sp/>high,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>randint_like(low,<sp/>high,<sp/>shape,<sp/>opt);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>randint(int64_t<sp/>high,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>randint(0,<sp/>high,<sp/>shape_spec,<sp/>selection_rule,<sp/>opt);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>randint_like(int64_t<sp/>high,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>randint_like(0,<sp/>high,<sp/>tens,<sp/>opt);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>randint_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>int64_t<sp/>high,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>randint_like(high,<sp/>tens,<sp/>opt);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>randint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,<sp/>int64_t<sp/>high,</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>randint(high,<sp/>shape_spec,<sp/>selection_rule,<sp/>opt);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">btensor<sp/>eye(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t&amp;<sp/>shape_n,c10::TensorOptions<sp/>opt<sp/>={});</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">btensor<sp/>eye_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor&amp;<sp/>shape,c10::TensorOptions<sp/>opt<sp/>={});</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal">btensor<sp/>randn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">btensor<sp/>randn_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal">btensor<sp/>from_basic_tensor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::vec_list_t<sp/>&amp;shape_spec,<sp/>any_quantity<sp/>selection_rule,</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;values,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Scalar<sp/>cutoff<sp/>=<sp/>1e-16,<sp/>c10::TensorOptions<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">btensor<sp/>from_basic_tensor_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;values,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Scalar<sp/>cutoff<sp/>=<sp/>1e-16,</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::TensorOptions<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>zeros_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch_shape<sp/>&amp;shape,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::zeros(shape._sizes,<sp/>shape.opt.merge_in(opt));</highlight></codeline>
<codeline lineno="1343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>eye_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch_shape<sp/>&amp;shape,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape._sizes.size()<sp/>!=<sp/>2)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;eye_like<sp/>only<sp/>accept<sp/>rank<sp/>2<sp/>shapes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::eye(shape._sizes[0],shape._sizes[2],<sp/>shape.opt.merge_in(opt));</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>ones_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch_shape<sp/>&amp;shape,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::ones(shape._sizes,<sp/>shape.opt.merge_in(opt));</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>empty_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch_shape<sp/>&amp;shape,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::empty(shape._sizes,<sp/>shape.opt.merge_in(opt));</highlight></codeline>
<codeline lineno="1356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>rand_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch_shape<sp/>&amp;shape,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::rand(shape._sizes,<sp/>shape.opt.merge_in(opt));</highlight></codeline>
<codeline lineno="1360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>full_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch_shape<sp/>&amp;shape,<sp/>btensor::Scalar<sp/>fill,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::full(shape._sizes,<sp/>fill,<sp/>shape.opt.merge_in(opt));</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>randint_like(int64_t<sp/>low,<sp/>int64_t<sp/>high,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch_shape<sp/>&amp;shape,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::randint(low,<sp/>high,<sp/>shape._sizes,<sp/>shape.opt.merge_in(opt));</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>randint_like(int64_t<sp/>high,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch_shape<sp/>&amp;shape,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::randint(0,<sp/>high,<sp/>shape._sizes,<sp/>shape.opt.merge_in(opt));</highlight></codeline>
<codeline lineno="1372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>randn_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch_shape<sp/>&amp;shape,<sp/>c10::TensorOptions<sp/>opt<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="1374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::randn(shape._sizes,<sp/>shape.opt.merge_in(opt));</highlight></codeline>
<codeline lineno="1376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator+(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;B)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.add(B);<sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;B)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.sub(B);<sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator-(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.mul(-1);<sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;B)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.mul(B);<sp/>}</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::Scalar<sp/>&amp;B)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.mul(B);<sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::Scalar<sp/>&amp;B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.mul(B);<sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator/(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;B)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.div(B);<sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator/(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::Scalar<sp/>&amp;B)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.div(B);<sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">btensor<sp/>operator/(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor::Scalar<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;B);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>sqrt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.sqrt();<sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;sqrt_(btensor<sp/>&amp;A)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.sqrt_();<sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>pow(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.pow(p);<sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>pow(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.pow(p);<sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;pow_(btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.pow_(p);<sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;pow_(btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.pow_(p);<sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>ge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.ge(other);<sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>ge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.ge(other);<sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>le(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.le(other);<sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>le(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.le(other);<sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>less(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.less(other);<sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>less(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.less(other);<sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>greater(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.greater(other);<sp/>}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>greater(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.greater(other);<sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>greater(btensor::Scalar<sp/>other,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.less(other);<sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>less(btensor::Scalar<sp/>other,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.greater(other);<sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>le(btensor::Scalar<sp/>other,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.ge(other);<sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>ge(btensor::Scalar<sp/>other,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.le(other);<sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>eq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;B)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.eq(B);<sp/>}</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>eq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>B)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.eq(B);<sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>eq(btensor::Scalar<sp/>B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.eq(B);<sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>not_equal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;B)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.not_equal(B);<sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>not_equal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>B)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.not_equal(B);<sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>not_equal(btensor::Scalar<sp/>B,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A.not_equal(B);<sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>greater(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>greater(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&gt;(btensor::Scalar<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>greater(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>less(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>less(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&lt;(btensor::Scalar<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>less(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ge(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ge(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&gt;=(btensor::Scalar<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ge(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>le(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&lt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>le(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator&lt;=(btensor::Scalar<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>le(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eq(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eq(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator==(btensor::Scalar<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eq(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/>btensor::Scalar<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>not_equal(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>not_equal(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>operator!=(btensor::Scalar<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>not_equal(A,<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allclose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rtol<sp/>=<sp/>1e-5,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>atol<sp/>=<sp/>1e-8,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal_nan<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>sum(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t.sum();<sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>torch::pow;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>torch::sqrt;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>torch::tensordot;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>inverse_cvals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.<ref refid="classquantit_1_1btensor_1a1742f2450d18a58b0508799e9d48c469" kindref="member">inverse_cvals</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>inverse_cvals(btensor<sp/>&amp;&amp;tens)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(tens.inverse_cvals_());<sp/>}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>inverse_cvals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;tens)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens;<sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>inverse_cvals(torch::Tensor<sp/>&amp;&amp;tens)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(tens);<sp/>}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;inverse_cvals_(btensor<sp/>&amp;tens)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.<ref refid="classquantit_1_1btensor_1a5960100f9b13fb48702b30644283d9a4" kindref="member">inverse_cvals_</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;inverse_cvals_(torch::Tensor<sp/>&amp;tens)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens;<sp/>}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;cval_shift_(btensor<sp/>&amp;tens,<sp/>any_quantity_cref<sp/>shift,<sp/>int64_t<sp/>dim)</highlight></codeline>
<codeline lineno="1473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.<ref refid="classquantit_1_1btensor_1a037f8cc269cc93d75d84a95fbb0b16a2" kindref="member">cval_shift_</ref>(shift,<sp/>dim);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;non_conserving_cval_shift_(btensor<sp/>&amp;tens,<sp/>any_quantity_cref<sp/>shift,<sp/>int64_t<sp/>dim)</highlight></codeline>
<codeline lineno="1485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.<ref refid="classquantit_1_1btensor_1a6934183b8e07a5548b6af93fa6d30676" kindref="member">non_conserving_cval_shift_</ref>(shift,<sp/>dim);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;shift_selection_rule_(btensor<sp/>&amp;tens,<sp/>any_quantity_cref<sp/>shift)</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.<ref refid="classquantit_1_1btensor_1af4e02d410e3e3c2f32903b352917877a" kindref="member">shift_selection_rule_</ref>(shift);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>squeeze(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.squeeze();<sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>squeeze(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;tens,<sp/>int64_t<sp/>dim)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.squeeze(dim);<sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;squeeze_(btensor<sp/>&amp;tens)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.squeeze_();<sp/>}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;squeeze_(btensor<sp/>&amp;tens,<sp/>int64_t<sp/>dim)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.squeeze_(dim);<sp/>}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal">any_quantity<sp/>find_selection_rule(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;tens,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;shape,<sp/>btensor::Scalar<sp/>cutoff<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>increment_index_right(btensor::index_list<sp/>&amp;index,<sp/>torch::IntArrayRef<sp/>sizes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>increment_index_left(btensor::index_list<sp/>&amp;index,<sp/>torch::IntArrayRef<sp/>max_index,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;x);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">std::string<sp/>to_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;x);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;set_selection_rule_(btensor<sp/>&amp;tens,<sp/>any_quantity_cref<sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tens.<ref refid="classquantit_1_1btensor_1a8eb0fa9598edbcca7bd461e828efcae9" kindref="member">set_selection_rule_</ref>(value);<sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal">qtt_TEST_CASE(</highlight><highlight class="stringliteral">&quot;btensor&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>cqt<sp/>=<sp/>conserved::C&lt;5&gt;;<sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>put<sp/>negative<sp/>number<sp/>in<sp/>the<sp/>constructor<sp/>and<sp/>expect<sp/>sensible<sp/>results.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>btensor::index_list;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>any_quantity<sp/>selection_rule(cqt(0));<sp/></highlight><highlight class="comment">//<sp/>DMRJulia<sp/>flux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>btensor<sp/>A({{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(1)}},<sp/>{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(1).inverse()}}},<sp/>selection_rule);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>to_string(A);<sp/></highlight><highlight class="comment">//<sp/>trying<sp/>to<sp/>force<sp/>to_string<sp/>into<sp/>existance<sp/>for<sp/>debugging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(A.end()<sp/>-<sp/>A.begin()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>A00<sp/>=<sp/>torch::rand({2,<sp/>2});</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>A11<sp/>=<sp/>torch::rand({3,<sp/>3});</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>A.block({0,<sp/>0})<sp/>=<sp/>A00;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>A.block({1,<sp/>1})<sp/>=<sp/>A11;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(<ref refid="classquantit_1_1btensor_1a5d8897e8e51c880654c5d467b2b0a8bc" kindref="member">btensor::throw_bad_tensor</ref>(A));</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(A.end()<sp/>-<sp/>A.begin()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(A.block_at({0,<sp/>0}));</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(A.block_at({1,<sp/>0}),<sp/>std::out_of_range);<sp/><sp/></highlight><highlight class="comment">//<sp/>there&apos;s<sp/>no<sp/>block<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(A.block({1,<sp/>0}),<sp/>std::invalid_argument);<sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>can&apos;t<sp/>create<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(<ref refid="classquantit_1_1btensor_1aaba4b107e02154ce231380c1bb844766" kindref="member">btensor::check_tensor</ref>(A)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;{}&quot;,<sp/>A);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;tensordot<sp/>trace,<sp/>index<sp/>order<sp/>independence&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>rand_like(shape_from(A,<sp/>A.permute({1,<sp/>0})));</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;{}\n\n&quot;,X);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>XX<sp/>=<sp/>X.reshape({});</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>inds<sp/>=<sp/>{0,<sp/>1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>correct_trace<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>X)</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;T<sp/>=<sp/>std::get&lt;1&gt;(x);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct_trace<sp/>+=<sp/>tensordot(T,<sp/>T.conj(),<sp/>inds,<sp/>inds).<ref refid="classquantit_1_1btensor_1a01c490238e0022b585dc430b13ec7dd1" kindref="member">item</ref>().toDouble();</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trXX<sp/>=<sp/>tensordot(XX,<sp/>XX.conj(),<sp/>{0},<sp/>{0}).<ref refid="classquantit_1_1btensor_1a01c490238e0022b585dc430b13ec7dd1" kindref="member">item</ref>().toDouble();</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>correct_trace2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;x<sp/>:<sp/>XX)</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;T<sp/>=<sp/>std::get&lt;1&gt;(x);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct_trace2<sp/>+=<sp/>tensordot(T,<sp/>T.conj(),<sp/>{0},<sp/>{0}).<ref refid="classquantit_1_1btensor_1a01c490238e0022b585dc430b13ec7dd1" kindref="member">item</ref>().toDouble();</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(trXX<sp/>==<sp/>doctest::Approx(correct_trace));</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(correct_trace2<sp/>==<sp/>doctest::Approx(correct_trace));</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;<sp/>correct<sp/>traces:<sp/>{}<sp/>{}\n&quot;,correct_trace2,<sp/>correct_trace);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tr2<sp/>=<sp/>tensordot(X,<sp/>X.conj(),<sp/>inds,<sp/>inds);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace2<sp/>=<sp/>tr2.item().toDouble();</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_MESSAGE(doctest::Approx(correct_trace)<sp/>==<sp/>trace2,<sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;index<sp/>order:<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>inds));</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::next_permutation(inds.begin(),<sp/>inds.end());</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;tensor<sp/>contraction&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>B({{{3,<sp/>cqt(4)},<sp/>{2,<sp/>cqt(0)}},<sp/>{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(1)}},<sp/>{{1,<sp/>cqt(1)},<sp/>{3,<sp/>cqt(0)}}},</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any_quantity(cqt(1)));</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B100<sp/>=<sp/>torch::rand({2,<sp/>2,<sp/>1});</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B010<sp/>=<sp/>torch::rand({3,<sp/>3,<sp/>1});</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B111<sp/>=<sp/>torch::rand({2,<sp/>3,<sp/>3});</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.block({0,<sp/>1,<sp/>0})<sp/>=<sp/>B010;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.block({1,<sp/>1,<sp/>1})<sp/>=<sp/>B111;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.block({1,<sp/>0,<sp/>0})<sp/>=<sp/>B100;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(<ref refid="classquantit_1_1btensor_1a5d8897e8e51c880654c5d467b2b0a8bc" kindref="member">btensor::throw_bad_tensor</ref>(B));</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>C;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C100<sp/>=<sp/>torch::tensordot(A11,<sp/>B010,<sp/>{1},<sp/>{1});</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C010<sp/>=<sp/>torch::tensordot(A00,<sp/>B100,<sp/>{1},<sp/>{1});</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C111<sp/>=<sp/>torch::tensordot(A11,<sp/>B111,<sp/>{1},<sp/>{1});</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(C<sp/>=<sp/>A.tensordot(B,<sp/>{1},<sp/>{1}));</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(C.block_at({0,<sp/>1,<sp/>0}));</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(C.block_at({1,<sp/>0,<sp/>0}));</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(C.block_at({1,<sp/>1,<sp/>1}));</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block_at({0,<sp/>1,<sp/>0}),<sp/>C010));</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block_at({1,<sp/>0,<sp/>0}),<sp/>C100));</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block_at({1,<sp/>1,<sp/>1}),<sp/>C111));</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>A_trace;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(A_trace<sp/>=<sp/>tensordot(A,<sp/>A.inverse_cvals(),<sp/>{0,<sp/>1},<sp/>{0,<sp/>1}));</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::allclose(A_trace.block_at({}),</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensordot(A00,<sp/>A00,<sp/>{0,<sp/>1},<sp/>{0,<sp/>1})<sp/>+<sp/>tensordot(A11,<sp/>A11,<sp/>{0,<sp/>1},<sp/>{0,<sp/>1}));</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;rank<sp/>0<sp/>tensors&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>zeros({},<sp/>selection_rule);<sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>one<sp/>work<sp/>all<sp/>the<sp/>factories<sp/>works.<sp/>Their<sp/>guts<sp/>is<sp/>shared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty_index_list<sp/>=<sp/>btensor::index_list{};</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x_begin_first<sp/>=<sp/>x.begin()-&gt;first;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(x_begin_first<sp/>==<sp/>empty_index_list);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(x.begin()-&gt;second,<sp/>torch::zeros({})));</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;Tensorproduct<sp/>from<sp/>tensordot&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>C;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(C<sp/>=<sp/>A.tensordot(A,<sp/>{},<sp/>{}));</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(C.dim()<sp/>==<sp/>A.dim()<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(C.block_at({0,<sp/>0,<sp/>0,<sp/>0}).equal(torch::tensordot(A00,<sp/>A00,<sp/>{},<sp/>{})));</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(C.block_at({0,<sp/>0,<sp/>1,<sp/>1}).equal(torch::tensordot(A00,<sp/>A11,<sp/>{},<sp/>{})));</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(C.block_at({1,<sp/>1,<sp/>0,<sp/>0}).equal(torch::tensordot(A11,<sp/>A00,<sp/>{},<sp/>{})));</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(C.block_at({1,<sp/>1,<sp/>1,<sp/>1}).equal(torch::tensordot(A11,<sp/>A11,<sp/>{},<sp/>{})));</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;{}\n&quot;,<sp/>A);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;{}\n&quot;,<sp/>C);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;addition&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>AA00({{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(1)}},<sp/>{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(1).inverse()}}},<sp/>selection_rule);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>AA11({{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(1)}},<sp/>{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(1).inverse()}}},<sp/>selection_rule);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AA00.block({0,<sp/>0})<sp/>=<sp/>A00;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AA11.block({1,<sp/>1})<sp/>=<sp/>A11;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AA00.add_(AA11);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B00<sp/>=<sp/>2<sp/>*<sp/>A00;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B11<sp/>=<sp/>2<sp/>*<sp/>A11;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>AP00<sp/>=<sp/>3<sp/>*<sp/>A00;<sp/></highlight><highlight class="comment">//<sp/>A<sp/>post<sp/>add_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>AP11<sp/>=<sp/>3<sp/>*<sp/>A11;<sp/></highlight><highlight class="comment">//<sp/>A<sp/>post<sp/>add_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C00<sp/>=<sp/>5<sp/>*<sp/>A00;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C11<sp/>=<sp/>5<sp/>*<sp/>A11;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>A.add(A);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>A.add(B);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.add_(B);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(A.block_at({0,<sp/>0}),<sp/>A00));</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(A.block_at({1,<sp/>1}),<sp/>A11));<sp/></highlight><highlight class="comment">//<sp/>A<sp/>unchanged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(A.block_at({0,<sp/>1}));</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(A.block_at({1,<sp/>0}));</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(B.block_at({0,<sp/>1}));</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(B.block_at({1,<sp/>0}));</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(C.block_at({0,<sp/>1}));</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(C.block_at({1,<sp/>0}));</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(A.block_at({0,<sp/>0}));</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(A.block_at({1,<sp/>1}));</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(B.block_at({0,<sp/>0}));</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(B.block_at({1,<sp/>1}));</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(C.block_at({0,<sp/>0}));</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(C.block_at({1,<sp/>1}));</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(B.block_at({0,<sp/>0}),<sp/>B00));</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(B.block_at({1,<sp/>1}),<sp/>B11));</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block_at({0,<sp/>0}),<sp/>C00));</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block_at({1,<sp/>1}),<sp/>C11));</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(AA00.block_at({0,<sp/>0}));</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(AA00.block_at({1,<sp/>0}));</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(AA00.block_at({1,<sp/>1}));</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(AA00.block_at({0,<sp/>1}));</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.add_(std::move(B));<sp/></highlight><highlight class="comment">//<sp/>this<sp/>destroys<sp/>B,<sp/>so<sp/>any<sp/>state<sp/>verification<sp/>on<sp/>it<sp/>must<sp/>be<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(A.block_at({0,<sp/>0}),<sp/>AP00));</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(A.block_at({1,<sp/>1}),<sp/>AP11));</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(get_refcount(AA00.block_at({1,<sp/>1}))<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;substraction&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>A<sp/>=<sp/>rand({},<sp/>quantity(cqt(0)));</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>B<sp/>=<sp/>rand({},<sp/>quantity(cqt(0)));</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>A<sp/>-<sp/>B;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(A.block_at({}));</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(B.block_at({}));</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(C.block_at({}));</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block_at({}),<sp/>A.block_at({})<sp/>-<sp/>B.block({})));</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;Reshape&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>A.reshape({});<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reshape<sp/>into<sp/>a<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(B.block_at({0}));<sp/></highlight><highlight class="comment">//<sp/>on<sp/>diagonnal<sp/>block<sp/>of<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(B.block_at({3}));<sp/></highlight><highlight class="comment">//<sp/>on-diagonal<sp/>block<sp/>of<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(B.block_at({1}));<sp/><sp/></highlight><highlight class="comment">//<sp/>off-diagonal<sp/>block<sp/>of<sp/>A,<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(B.block_at({2}));<sp/><sp/></highlight><highlight class="comment">//<sp/>off-diagonal<sp/>block<sp/>of<sp/>A,<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK((*B.block_quantities({0}).begin())<sp/>==<sp/>any_quantity(selection_rule));</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK((*B.block_quantities({3}).begin())<sp/>==<sp/>any_quantity(selection_rule));</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK((*B.block_quantities({1}).begin())<sp/>==<sp/>any_quantity(cqt(4)));<sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>correct<sp/>value<sp/>indeed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK((*B.block_quantities({2}).begin())<sp/>==<sp/>any_quantity(cqt(1)));</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK((*B.block_sizes({0}).begin())<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK((*B.block_sizes({3}).begin())<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK((*B.block_sizes({1}).begin())<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK((*B.block_sizes({2}).begin())<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK((B.block_at({0}).sizes())<sp/>==<sp/>std::vector&lt;int64_t&gt;{4});</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK((B.block_at({3}).sizes())<sp/>==<sp/>std::vector&lt;int64_t&gt;{9});</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>B.reshape_as(A);<sp/></highlight><highlight class="comment">//<sp/>reshape<sp/>it<sp/>back<sp/>to<sp/>its&apos;<sp/>original<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(<ref refid="classquantit_1_1btensor_1a5d8897e8e51c880654c5d467b2b0a8bc" kindref="member">btensor::throw_bad_tensor</ref>(C));</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(C.end()<sp/>-<sp/>C.begin()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(C.block_at({0,<sp/>0}));</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(C.block_at({1,<sp/>1}));</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(C.block_at({1,<sp/>0}),<sp/>std::out_of_range);<sp/><sp/></highlight><highlight class="comment">//<sp/>there&apos;s<sp/>no<sp/>block<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(C.block({1,<sp/>0}),<sp/>std::invalid_argument);<sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>can&apos;t<sp/>create<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(C.block_at({0,<sp/>0}).equal(A.block_at({0,<sp/>0})));</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(C.block_at({1,<sp/>1}).equal(A.block_at({1,<sp/>1})));</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(<ref refid="classquantit_1_1btensor_1aaba4b107e02154ce231380c1bb844766" kindref="member">btensor::check_tensor</ref>(C)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>A({{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(1)}},</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{1,<sp/>cqt(1)},<sp/>{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(-1)},<sp/>{1,<sp/>cqt(1)}},</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{3,<sp/>cqt(0)},<sp/>{2,<sp/>cqt(-2)},<sp/>{2,<sp/>cqt(-1)}}},</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection_rule);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({0,<sp/>0,<sp/>2})<sp/>=<sp/>torch::rand({2,<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({0,<sp/>1,<sp/>0})<sp/>=<sp/>torch::rand({2,<sp/>2,<sp/>3});</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({0,<sp/>3,<sp/>2})<sp/>=<sp/>torch::rand({2,<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({1,<sp/>0,<sp/>1})<sp/>=<sp/>torch::rand({3,<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({1,<sp/>1,<sp/>2})<sp/>=<sp/>torch::rand({3,<sp/>2,<sp/>2});</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({1,<sp/>2,<sp/>0})<sp/>=<sp/>torch::rand({3,<sp/>3,<sp/>3});</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({1,<sp/>3,<sp/>1})<sp/>=<sp/>torch::rand({3,<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(<ref refid="classquantit_1_1btensor_1a5d8897e8e51c880654c5d467b2b0a8bc" kindref="member">btensor::throw_bad_tensor</ref>(A));</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>B;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(B<sp/>=<sp/>A.reshape({1}));</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;Shape<sp/>building<sp/>tools&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>B;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>C;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(B<sp/>=<sp/>A.shape_from({-1,<sp/>0}));</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(C<sp/>=<sp/>shape_from(A,<sp/>B));</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>split<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>btensor({{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(1)}},</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{1,<sp/>cqt(1)},<sp/>{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(-1)},<sp/>{1,<sp/>cqt(1)}},</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{3,<sp/>cqt(0)},<sp/>{2,<sp/>cqt(-2)},<sp/>{2,<sp/>cqt(-1)}}},</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection_rule);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({0,<sp/>0,<sp/>2})<sp/>=<sp/>torch::rand({2,<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({0,<sp/>1,<sp/>0})<sp/>=<sp/>torch::rand({2,<sp/>2,<sp/>3});</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({0,<sp/>3,<sp/>2})<sp/>=<sp/>torch::rand({2,<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({1,<sp/>0,<sp/>1})<sp/>=<sp/>torch::rand({3,<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({1,<sp/>1,<sp/>2})<sp/>=<sp/>torch::rand({3,<sp/>2,<sp/>2});</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({1,<sp/>2,<sp/>0})<sp/>=<sp/>torch::rand({3,<sp/>3,<sp/>3});</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.block({1,<sp/>3,<sp/>1})<sp/>=<sp/>torch::rand({3,<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>rV({{{3,<sp/>cqt(1)},</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>cqt(4)},</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>cqt(0)},</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{6,<sp/>cqt(0)},</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,<sp/>cqt(3)},</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{4,<sp/>cqt(4)},</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{9,<sp/>cqt(4)},</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{6,<sp/>cqt(2)},</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{6,<sp/>cqt(3)},</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{3,<sp/>cqt(1)},</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>cqt(4)},</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{2,<sp/>cqt(0)}},</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(1)}}},</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection_rule);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rV.block({2,<sp/>0})<sp/>=<sp/>torch::rand({2,<sp/>2});</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rV.block({3,<sp/>0})<sp/>=<sp/>torch::rand({6,<sp/>2});</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rV.block({11,<sp/>0})<sp/>=<sp/>torch::rand({2,<sp/>2});</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rV.block({1,<sp/>1})<sp/>=<sp/>torch::rand({2,<sp/>3});</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rV.block({5,<sp/>1})<sp/>=<sp/>torch::rand({4,<sp/>3});</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rV.block({6,<sp/>1})<sp/>=<sp/>torch::rand({9,<sp/>3});</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rV.block({10,<sp/>1})<sp/>=<sp/>torch::rand({2,<sp/>3});</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE(<ref refid="classquantit_1_1btensor_1aaba4b107e02154ce231380c1bb844766" kindref="member">btensor::check_tensor</ref>(A)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE(<ref refid="classquantit_1_1btensor_1aaba4b107e02154ce231380c1bb844766" kindref="member">btensor::check_tensor</ref>(rV)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>V_shape(A.dim(),<sp/>-1);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>split;<sp/>++i)</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V_shape[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V_left_part<sp/>=<sp/>A.shape_from(V_shape);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>V_right_part<sp/>=<sp/>rV.shape_from({0,<sp/>-1});</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;V_left_part<sp/>\n{}\n\n&quot;,<sp/>V_left_part);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;V_right_part<sp/>\n{}\n\n&quot;,<sp/>V_right_part);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(rV.reshape_as(shape_from(V_left_part,<sp/>V_right_part)));</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;elementwise<sp/>multiplication<sp/>with<sp/>broadcasting&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>B({{{2,<sp/>cqt(0)},<sp/>{3,<sp/>cqt(0)}}},<sp/>selection_rule);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B0<sp/>=<sp/>torch::rand({2});</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B1<sp/>=<sp/>torch::rand({3});</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.block({0})<sp/>=<sp/>B0;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.block({1})<sp/>=<sp/>B1;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>A.mul(B);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block({0,<sp/>0}),<sp/>A00.mul(B0)));</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block({1,<sp/>1}),<sp/>A11.mul(B1)));</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>=<sp/>A.mul(1);<sp/></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>independant<sp/>copy?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block({0,<sp/>0}),<sp/>A.block({0,<sp/>0})));</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block({1,<sp/>1}),<sp/>A.block({1,<sp/>1})));</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.mul_(B);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(C.block({0,<sp/>0}),<sp/>A00.mul(B0)));<sp/></highlight><highlight class="comment">//<sp/>The<sp/>numerical<sp/>result<sp/>commutes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::allclose(C.block({1,<sp/>1}),<sp/>A11.mul(B1)));<sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>the<sp/>details<sp/>of<sp/>the<sp/>allocation<sp/>that<sp/>depends<sp/>on<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_WARN_THROWS(B.mul_(A));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>failure<sp/>on<sp/>pytorch<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;Basic<sp/>index<sp/>put&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>B({{{3,<sp/>cqt(1)},<sp/>{4,<sp/>cqt(4)},<sp/>{1,<sp/>cqt(3)}},</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{2,<sp/>cqt(-1)},<sp/>{4,<sp/>cqt(1)}},</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{4,<sp/>cqt(-3)},<sp/>{4,<sp/>cqt(-2)},<sp/>{2,<sp/>cqt(0)}}},</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any_quantity(cqt(0)));</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>C<sp/>=<sp/>quantit::rand({{{3,<sp/>cqt(1)},<sp/>{4,<sp/>cqt(4)},<sp/>{1,<sp/>cqt(3)}},</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{4,<sp/>cqt(-3)},<sp/>{4,<sp/>cqt(-2)},<sp/>{2,<sp/>cqt(0)}}},</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any_quantity(cqt(1)));</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(B.basic_index_put_({-1,0,-1},C));</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;batched<sp/>matrix<sp/>multiply&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B<sp/>and<sp/>C<sp/>are<sp/>compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>B({{{3,<sp/>cqt(1)},<sp/>{4,<sp/>cqt(4)},<sp/>{1,<sp/>cqt(3)}},</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{2,<sp/>cqt(-1)},<sp/>{4,<sp/>cqt(1)}},</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{4,<sp/>cqt(-3)},<sp/>{4,<sp/>cqt(-2)},<sp/>{2,<sp/>cqt(0)}}},</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any_quantity(cqt(0)));</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>C({{{3,<sp/>cqt(1)},<sp/>{4,<sp/>cqt(2)},<sp/>{1,<sp/>cqt(0)}},</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{4,<sp/>cqt(-3).inverse()},<sp/>{4,<sp/>cqt(-2).inverse()},<sp/>{2,<sp/>cqt(0)}},</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{2,<sp/>cqt(0)},<sp/>{2,<sp/>cqt(-3)},<sp/>{2,<sp/>cqt(-2)}}},</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any_quantity(cqt(1)));</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B002<sp/>=<sp/>torch::rand({3,<sp/>2,<sp/>2});</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B011<sp/>=<sp/>torch::rand({3,<sp/>4,<sp/>4});</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.block({0,<sp/>0,<sp/>2})<sp/>=<sp/>B002;</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.block({0,<sp/>1,<sp/>1})<sp/>=<sp/>B011;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C020<sp/>=<sp/>torch::rand({3,<sp/>2,<sp/>2});</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C001<sp/>=<sp/>torch::rand({3,<sp/>4,<sp/>2});</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C012<sp/>=<sp/>torch::rand({3,<sp/>4,<sp/>2});</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C111<sp/>=<sp/>torch::rand({4,<sp/>4,<sp/>2});</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C202<sp/>=<sp/>torch::rand({1,<sp/>4,<sp/>2});</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.block({0,<sp/>2,<sp/>0})<sp/>=<sp/>C020;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.block({0,<sp/>0,<sp/>1})<sp/>=<sp/>C001;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.block({0,<sp/>1,<sp/>2})<sp/>=<sp/>C012;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.block({1,<sp/>1,<sp/>1})<sp/>=<sp/>C111;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.block({2,<sp/>0,<sp/>2})<sp/>=<sp/>C202;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>BC;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>D,<sp/>E,<sp/>F,<sp/>G<sp/>are<sp/>incompatible<sp/>with<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>incompatible<sp/>batch<sp/>section<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>D({{{4,<sp/>cqt(2)},<sp/>{1,<sp/>cqt(0)}},<sp/>{{4,<sp/>cqt(-3)},<sp/>{4,<sp/>cqt(-2)},<sp/>{2,<sp/>cqt(0)}},<sp/>{{2,<sp/>cqt(0)},<sp/>{2,<sp/>cqt(1)}}},</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any_quantity(cqt(-1)));</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(B.bmm(D));</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>incompatible<sp/>batch<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>G({{{7,<sp/>cqt(1)},<sp/>{4,<sp/>cqt(2)},<sp/>{1,<sp/>cqt(0)}},</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{4,<sp/>cqt(-3)},<sp/>{4,<sp/>cqt(-2)},<sp/>{2,<sp/>cqt(0)}},</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{2,<sp/>cqt(0)},<sp/>{2,<sp/>cqt(1)}}},</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any_quantity(cqt(-1)));</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(B.bmm(G));</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>incompatible<sp/>conserved<sp/>quantities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>E({{{3,<sp/>cqt(1)},<sp/>{4,<sp/>cqt(2)},<sp/>{1,<sp/>cqt(0)}},</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{4,<sp/>cqt(-3)},<sp/>{4,<sp/>cqt(-5)},<sp/>{2,<sp/>cqt(0)}},</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{2,<sp/>cqt(0)},<sp/>{2,<sp/>cqt(1)}}},</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any_quantity(cqt(-1)));</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(B.bmm(E));</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>incompatible<sp/>matrix<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>F({{{3,<sp/>cqt(1)},<sp/>{4,<sp/>cqt(2)},<sp/>{1,<sp/>cqt(0)}},</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{4,<sp/>cqt(-3)},<sp/>{6,<sp/>cqt(-2)},<sp/>{2,<sp/>cqt(0)}},</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{2,<sp/>cqt(0)},<sp/>{2,<sp/>cqt(1)}}},</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any_quantity(cqt(-1)));</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS(B.bmm(F));</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(BC<sp/>=<sp/>B.bmm(C));</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>the<sp/>(no)throw<sp/>check<sp/>are<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remains<sp/>to<sp/>test<sp/>the<sp/>correctness<sp/>of<sp/>BC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>block<sp/>and<sp/>their<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;a<sp/>:<sp/>BC)</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ind<sp/>=<sp/>std::get&lt;0&gt;(a);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>ind<sp/>==<sp/>std::vector&lt;int64_t&gt;{0,<sp/>0,<sp/>0}<sp/>or<sp/>ind<sp/>==<sp/>std::vector&lt;int64_t&gt;{0,<sp/>1,<sp/>2};</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE(ok);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++n;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE(n<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(BC.block_at({0,<sp/>0,<sp/>0}),<sp/>B002.matmul(C020)));</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(BC.block_at({0,<sp/>1,<sp/>2}),<sp/>B011.matmul(C012)));</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>B.basic_create_view({1,<sp/>-1,<sp/>-1});</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>C.basic_create_view({1,<sp/>-1,<sp/>-1});</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE(<ref refid="classquantit_1_1btensor_1aaba4b107e02154ce231380c1bb844766" kindref="member">btensor::check_tensor</ref>(b)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE(<ref refid="classquantit_1_1btensor_1aaba4b107e02154ce231380c1bb844766" kindref="member">btensor::check_tensor</ref>(c)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(b.bmm(c));</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885" refid="classquantit_1_1bad__selection__rule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1bad__selection__rule" kindref="compound">bad_selection_rule</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::invalid_argument<sp/>{</highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::invalid_argument::invalid_argument;};</highlight></codeline>
<codeline lineno="1886" refid="classquantit_1_1non__matching__cvals" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1non__matching__cvals" kindref="compound">non_matching_cvals</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::invalid_argument<sp/>{</highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::invalid_argument::invalid_argument;};</highlight></codeline>
<codeline lineno="1887" refid="classquantit_1_1non__matching__sizes" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1non__matching__sizes" kindref="compound">non_matching_sizes</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::invalid_argument<sp/>{</highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::invalid_argument::invalid_argument;};</highlight></codeline>
<codeline lineno="1888"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>quantit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1891" refid="structfmt_1_1formatter_3_01quantit_1_1btensor_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">fmt::formatter&lt;quantit::btensor&gt;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(format_parse_context<sp/>&amp;ctx)</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>ctx.begin(),<sp/>end<sp/>=<sp/>ctx.end();</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it)</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>end<sp/>and<sp/>*it<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>format_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format,<sp/>no<sp/>formatting<sp/>option<sp/>for<sp/>quantit::btensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*it<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>format_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format,closing<sp/>brace<sp/>missing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>an<sp/>iterator<sp/>past<sp/>the<sp/>end<sp/>of<sp/>the<sp/>parsed<sp/>range:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">quantit::btensor</ref><sp/>&amp;t,<sp/>FormatContext<sp/>&amp;ctx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1909"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>btensor_fmt_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;btensor<sp/>rank<sp/>{}\n<sp/>selection<sp/>rule<sp/>{}\n<sp/>number<sp/>of<sp/>sections<sp/>by<sp/>dim<sp/>{}\n<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sections<sp/>sizes<sp/>{}\n<sp/>sections<sp/>conserved<sp/>quantity<sp/>{}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>btensor_fmt_blocks<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;block<sp/>at<sp/>{}\n<sp/>{}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>format_to(ctx.out(),<sp/>btensor_fmt_string,<sp/>t.rank,<sp/>t.selection_rule,<sp/>t.sections_by_dim,</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.sections_sizes,<sp/>t.c_vals);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;b<sp/>:<sp/>t.blocks_list)</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>format_to(out,<sp/>btensor_fmt_blocks,<sp/>b.first,<sp/>b.second);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>D49FFA60_85C4_431A_BA62_9B1D30D67E86<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/alex/project/quantt/include/blockTensor/btensor.h"/>
  </compounddef>
</doxygen>
