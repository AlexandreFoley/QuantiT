<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="MPT_8h" kind="file" language="C++">
    <compoundname>MPT.h</compoundname>
    <includes refid="btensor_8h" local="yes">blockTensor/btensor.h</includes>
    <includes refid="property_8h" local="yes">property.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">fmt/core.h</includes>
    <includes local="no">random</includes>
    <includes local="no">torch/torch.h</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">vector</includes>
    <includes local="yes">doctest/doctest_proxy.h</includes>
    <includedby refid="dmrg_8h" local="yes">/Users/alex/Documents/Prog/QuantiT/include/dmrg.h</includedby>
    <includedby refid="dmrg__logger_8h" local="yes">/Users/alex/Documents/Prog/QuantiT/include/dmrg_logger.h</includedby>
    <includedby refid="models_8h" local="yes">/Users/alex/Documents/Prog/QuantiT/include/models.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>Conserved/Composite/cquantity.h</label>
        <link refid="cquantity_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Conserved/Composite/quantity_impl.h</label>
        <link refid="quantity__impl_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>Conserved/Composite/quantity_vector.h</label>
        <link refid="quantity__vector_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>Conserved/Composite/quantity_vector_impl.h</label>
        <link refid="quantity__vector__impl_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>Conserved/quantity.h</label>
        <link refid="quantity_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Conserved/quantity_utils.h</label>
        <link refid="quantity__utils_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/alex/Documents/Prog/QuantiT/include/MPT.h</label>
        <link refid="MPT_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>blockTensor/btensor.h</label>
        <link refid="btensor_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>blockTensor/flat_map.h</label>
        <link refid="flat__map_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>property.h</label>
        <link refid="property_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>templateMeta.h</label>
        <link refid="templateMeta_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>torch_formatter.h</label>
        <link refid="torch__formatter_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>ATen/Functions.h</label>
      </node>
      <node id="8">
        <label>algorithm</label>
      </node>
      <node id="9">
        <label>boost/stl_interfaces/iterator_interface.hpp</label>
      </node>
      <node id="29">
        <label>boost/stl_interfaces/view_interface.hpp</label>
      </node>
      <node id="36">
        <label>c10/core/ScalarTypeToTypeMeta.h</label>
      </node>
      <node id="37">
        <label>c10/core/TensorOptions.h</label>
      </node>
      <node id="10">
        <label>cassert</label>
      </node>
      <node id="34">
        <label>charconv</label>
      </node>
      <node id="25">
        <label>cstdint</label>
      </node>
      <node id="7">
        <label>doctest/doctest_proxy.h</label>
      </node>
      <node id="38">
        <label>exception</label>
      </node>
      <node id="11">
        <label>fmt/core.h</label>
      </node>
      <node id="21">
        <label>fmt/format.h</label>
      </node>
      <node id="33">
        <label>fmt/ostream.h</label>
      </node>
      <node id="12">
        <label>fmt/ranges.h</label>
      </node>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="22">
        <label>ios</label>
      </node>
      <node id="14">
        <label>iterator</label>
      </node>
      <node id="23">
        <label>memory</label>
      </node>
      <node id="15">
        <label>numeric</label>
      </node>
      <node id="26">
        <label>ostream</label>
      </node>
      <node id="41">
        <label>random</label>
      </node>
      <node id="39">
        <label>stdexcept</label>
      </node>
      <node id="40">
        <label>torch/csrc/utils/variadic.h</label>
      </node>
      <node id="32">
        <label>torch/torch.h</label>
      </node>
      <node id="19">
        <label>tuple</label>
      </node>
      <node id="20">
        <label>type_traits</label>
      </node>
      <node id="16">
        <label>utility</label>
      </node>
      <node id="17">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/Users/alex/Documents/Prog/QuantiT/include/MPT.h</label>
        <link refid="MPT_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/alex/Documents/Prog/QuantiT/include/dmrg.h</label>
        <link refid="dmrg_8h_source"/>
      </node>
      <node id="3">
        <label>/Users/alex/Documents/Prog/QuantiT/include/dmrg_logger.h</label>
        <link refid="dmrg__logger_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/Users/alex/Documents/Prog/QuantiT/include/models.h</label>
        <link refid="models_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classquantit_1_1vector__lift" prot="public">quantit::vector_lift</innerclass>
    <innerclass refid="classquantit_1_1MPT" prot="public">quantit::MPT</innerclass>
    <innerclass refid="classquantit_1_1MPS" prot="public">quantit::MPS</innerclass>
    <innerclass refid="classquantit_1_1MPO" prot="public">quantit::MPO</innerclass>
    <innerclass refid="classquantit_1_1bMPT" prot="public">quantit::bMPT</innerclass>
    <innerclass refid="classquantit_1_1bMPS" prot="public">quantit::bMPS</innerclass>
    <innerclass refid="classquantit_1_1bMPO" prot="public">quantit::bMPO</innerclass>
    <innerclass refid="structquantit_1_1dependant__tensor__network_3_01btensor_01_4" prot="public">quantit::dependant_tensor_network&lt; btensor &gt;</innerclass>
    <innerclass refid="structquantit_1_1dependant__tensor__network_3_01torch_1_1Tensor_01_4" prot="public">quantit::dependant_tensor_network&lt; torch::Tensor &gt;</innerclass>
    <innerclass refid="structquantit_1_1dependant__tensor__network_3_01S_00_01std_1_1enable__if__t_3_01std_1_1is__base_060016cbe70a4089cd834cde17bb5eac" prot="public">quantit::dependant_tensor_network&lt; S, std::enable_if_t&lt; std::is_base_of_v&lt; vector_lift&lt; S, torch::Tensor &gt;, S &gt; &gt; &gt;</innerclass>
    <innerclass refid="structquantit_1_1dependant__tensor__network_3_01S_00_01std_1_1enable__if__t_3_01std_1_1is__base_7caa039768c7fc487ea8fbc6fa9338de" prot="public">quantit::dependant_tensor_network&lt; S, std::enable_if_t&lt; std::is_base_of_v&lt; vector_lift&lt; S, btensor &gt;, S &gt; &gt; &gt;</innerclass>
    <innernamespace refid="namespacequantit">quantit</innernamespace>
    <innernamespace refid="namespacequantit_1_1details">quantit::details</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/>MPT.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Project:<sp/>QuantiT</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>File<sp/>Created:<sp/>Thursday,<sp/>23rd<sp/>July<sp/>2020<sp/>9:38:33<sp/>am</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Alexandre<sp/>Foley<sp/>(Alexandre.foley@usherbrooke.ca)</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>-----</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Last<sp/>Modified:<sp/>Thursday,<sp/>23rd<sp/>July<sp/>2020<sp/>10:46:02<sp/>am</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Modified<sp/>By:<sp/>Alexandre<sp/>Foley<sp/>(Alexandre.foley@usherbrooke.ca&gt;)</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>-----</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Alexandre<sp/>Foley</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>GPL<sp/>v3</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ADA5A359_8ACF_448D_91BC_09C085F510CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADA5A359_8ACF_448D_91BC_09C085F510CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blockTensor/btensor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;property.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;torch/torch.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;doctest/doctest_proxy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">quantit</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>forward<sp/>declaration<sp/>for<sp/>dmrg_impl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">env_holder;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">benv_holder;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">dmrg_options;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">dmrg_logger;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MPS;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MPO;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MPT;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">bMPS;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">bMPO;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">bMPT;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">MPS<sp/>random_MPS(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bond_dim,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>phys_dim,<sp/>torch::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="44"><highlight class="normal">MPS<sp/>random_MPS(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bond_dim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPO<sp/>&amp;hamil,<sp/>torch::TensorOptions<sp/>opt<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="45"><highlight class="normal">MPS<sp/>random_MPS(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bond_dim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;<sp/>&amp;phys_dims,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::TensorOptions<sp/>opt<sp/>=<sp/>{});<sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>done<sp/>as<sp/>with<sp/>a<sp/>range<sp/>of<sp/>sort<sp/>for<sp/>the<sp/>phys_dim,<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>standard<sp/>c++20<sp/>is<sp/>well<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">bMPS<sp/>random_bMPS(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bond_dim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;phys_dim_spec,<sp/>any_quantity_cref<sp/>q_num,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::TensorOptions<sp/>opt<sp/>=<sp/>{},<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>(std::random_device())());</highlight></codeline>
<codeline lineno="51"><highlight class="normal">bMPS<sp/>random_bMPS(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bond_dim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPO<sp/>&amp;Hamil,<sp/>any_quantity_cref<sp/>q_num,<sp/>torch::TensorOptions<sp/>opt<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>(std::random_device())());</highlight></codeline>
<codeline lineno="53"><highlight class="normal">bMPS<sp/>random_bMPS(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bond_dim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;btensor&gt;<sp/>&amp;phys_dim_spec,<sp/>any_quantity_cref<sp/>q_num,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::TensorOptions<sp/>opt<sp/>=<sp/>{},<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>(std::random_device())());</highlight></codeline>
<codeline lineno="55"><highlight class="normal">bMPS<sp/>random_MPS(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bond_dim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;phys_dim_spec,<sp/>any_quantity_cref<sp/>q_num,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::TensorOptions<sp/>opt<sp/>=<sp/>{},<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>(std::random_device())());</highlight></codeline>
<codeline lineno="57"><highlight class="normal">bMPS<sp/>random_MPS(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bond_dim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPO<sp/>&amp;Hamil,<sp/>any_quantity_cref<sp/>q_num,<sp/>torch::TensorOptions<sp/>opt<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>(std::random_device())());</highlight></codeline>
<codeline lineno="59"><highlight class="normal">bMPS<sp/>random_MPS(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bond_dim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;btensor&gt;<sp/>&amp;phys_dim_spec,<sp/>any_quantity_cref<sp/>q_num,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::TensorOptions<sp/>opt<sp/>=<sp/>{},<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>(std::random_device())());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">details</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal">torch::Tensor<sp/>dmrg_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPO<sp/>&amp;hamiltonian,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPT<sp/>&amp;two_sites_hamil,<sp/>MPS<sp/>&amp;in_out_state,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dmrg_options<sp/>&amp;options,<sp/>env_holder<sp/>&amp;Env,<sp/>dmrg_logger<sp/>&amp;logger);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">btensor<sp/>dmrg_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPO<sp/>&amp;hamiltonian,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPT<sp/>&amp;two_sites_hamil,<sp/>bMPS<sp/>&amp;in_out_state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dmrg_options<sp/>&amp;options,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benv_holder<sp/>&amp;Env,<sp/>dmrg_logger<sp/>&amp;logger);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matrix<sp/>product<sp/>tensors<sp/>base<sp/>type.<sp/>require<sp/>concrete<sp/>derived<sp/>class<sp/>to<sp/>implement<sp/>MPT<sp/>empty_copy(const<sp/>S&amp;)</highlight></codeline>
<codeline lineno="89"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>tensor<sp/>=<sp/>torch::Tensor&gt;</highlight></codeline>
<codeline lineno="90" refid="classquantit_1_1vector__lift" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref></highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;tensor&gt;<sp/>tensors;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dependent<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Tens<sp/>=<sp/>tensor;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>VTens<sp/>=<sp/>std::vector&lt;Tens&gt;;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>size_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VTens::size_type;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VTens::iterator;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VTens::const_iterator;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reverse_iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VTens::reverse_iterator;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_reverse_iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VTens::const_reverse_iterator;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_reference<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VTens::const_reference;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VTens::reference;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>()<sp/>:<sp/>tensors()<sp/>{}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(size_type<sp/>size)<sp/>:<sp/>tensors(size)<sp/>{}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(size_type<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tens<sp/>&amp;val)<sp/>:<sp/>tensors(size,<sp/>val)<sp/>{}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>other_tensor&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>don&apos;t<sp/>know<sp/>of<sp/>a<sp/>way<sp/>to<sp/>limit<sp/>template<sp/>friend<sp/>to<sp/>types<sp/>with<sp/>the<sp/>same<sp/>tensors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="comment">//<sp/>can<sp/>copy<sp/>and<sp/>move<sp/>a<sp/>vector_lift<sp/>no<sp/>matter<sp/>the<sp/>derived<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;T, U&gt;</ref><sp/>&amp;other)<sp/>:<sp/>tensors(other.tensors)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Tens&gt;<sp/>other)<sp/>:<sp/>tensors(std::move(other))<sp/>{}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(<ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;T, U&gt;</ref><sp/>&amp;&amp;other)<sp/>noexcept<sp/>:<sp/>tensors(std::move(other.tensors))</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(VTens<sp/>&amp;other)<sp/>:<sp/>tensors(other)<sp/>{}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(std::initializer_list&lt;Tens&gt;<sp/>initl)<sp/>:<sp/>tensors(initl)<sp/>{}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(const_iterator<sp/>begin,<sp/>const_iterator<sp/>end)<sp/>:<sp/>tensors(begin,<sp/>end)<sp/>{}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">~vector_lift</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>S()</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>out;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref><sp/>*view<sp/>=<sp/>&amp;out;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view-&gt;tensors<sp/>=<sp/>this-&gt;tensors;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/>this-&gt;tensors.swap(other.tensors);<sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref><sp/>&amp;lhs,<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref><sp/>&amp;rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/>lhs.swap(rhs);<sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref><sp/>&amp;operator=(<ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref><sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interface<sp/>function<sp/>from<sp/>std::vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>elements<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/>at(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.at(i);<sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reference<sp/>at(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.at(i);<sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors[i];<sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reference<sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors[i];<sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/>front()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.front();<sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reference<sp/>front()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.front();<sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/>back()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.back();<sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reference<sp/>back()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.back();<sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>Tens<sp/>*data()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.data();<sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tens<sp/>*data()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.data();<sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>begin()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.begin();<sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>const_iterator<sp/>begin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.begin();<sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>const_iterator<sp/>cbegin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.cbegin();<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>end()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.end();<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>const_iterator<sp/>end()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.end();<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>const_iterator<sp/>cend()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.cend();<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>reverse_iterator<sp/>rbegin()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.rbegin();<sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reverse_iterator<sp/>rbegin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.rbegin();<sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reverse_iterator<sp/>crbegin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.crbegin();<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>reverse_iterator<sp/>rend()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.rend();<sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reverse_iterator<sp/>rend()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.rend();<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reverse_iterator<sp/>crend()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.crend();<sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>capacity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.empty();<sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.size();<sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.max_size();<sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reserve(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_cap)<sp/>{<sp/>tensors.reserve(new_cap);<sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>capacity()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.capacity();<sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>shrink_to_fit()<sp/>{<sp/>tensors.shrink_to_fit();<sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/>tensors.clear();<sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>insert(const_iterator<sp/>pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tens<sp/>&amp;val)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.insert(pos,<sp/>val);<sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>insert(const_iterator<sp/>pos,<sp/>Tens<sp/>&amp;&amp;val)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.insert(pos,<sp/>val);<sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>insert(const_iterator<sp/>pos,<sp/>size_type<sp/>count,<sp/>Tens<sp/>&amp;&amp;val)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.insert(pos,<sp/>count,<sp/>val);<sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIT&gt;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>insert(const_iterator<sp/>pos,<sp/>InputIT<sp/>first,<sp/>InputIT<sp/>last)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.insert(pos,<sp/>first,<sp/>last);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>insert(const_iterator<sp/>pos,<sp/>std::initializer_list&lt;Tens&gt;<sp/>list)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.insert(pos,<sp/>list);<sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>emplace(const_iterator<sp/>pos,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.emplace(pos,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>erase(const_iterator<sp/>pos)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.erase(pos);<sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>erase(const_iterator<sp/>first,<sp/>const_iterator<sp/>last)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.erase(first,<sp/>last);<sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tens<sp/>&amp;val)<sp/>{<sp/>tensors.push_back(val);<sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back(Tens<sp/>&amp;&amp;val)<sp/>{<sp/>tensors.push_back(val);<sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>emplace_back(Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors.emplace_back(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pop_back()<sp/>{<sp/>tensors.pop_back();<sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resize(size_type<sp/>count)<sp/>{<sp/>tensors.resize(count);<sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resize(size_type<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tens<sp/>&amp;value)<sp/>{<sp/>tensors.resize(count,<sp/>value);<sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stuff<sp/>about<sp/>the<sp/>tensors,<sp/>written<sp/>as<sp/>covariant<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>to(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::TensorOptions<sp/>&amp;options<sp/>=<sp/>{},<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>those<sp/>function<sp/>can&apos;t<sp/>really<sp/>exist<sp/>outside<sp/>the<sp/>derived<sp/>class<sp/>if<sp/>empty_copy<sp/>is<sp/>private,<sp/>which<sp/>it<sp/>is<sp/>for<sp/>MPT,<sp/>MPS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>MPO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>out<sp/>=<sp/>S::empty_copy(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">S<sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out_it<sp/>=<sp/>out.begin();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(this-&gt;cbegin(),<sp/>this-&gt;cend(),</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;out_it,<sp/>&amp;options,<sp/>non_blocking,<sp/>copy,<sp/>memory_format](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atensor)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>out<sp/>=<sp/>*(out_it++);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>atensor.to(options,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>to(torch::Device<sp/>device,<sp/>torch::ScalarType<sp/>dtype,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="219"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>out<sp/>=<sp/>S::empty_copy(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">S<sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out_it<sp/>=<sp/>out.begin();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(this-&gt;cbegin(),<sp/>this-&gt;cend(),</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;out_it,<sp/>device,<sp/>dtype,<sp/>non_blocking,<sp/>copy,<sp/>memory_format](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atensor)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>*(out_it++)<sp/>=<sp/>atensor.to(device,<sp/>dtype,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);<sp/>});</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>to(torch::ScalarType<sp/>dtype,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="229"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>out<sp/>=<sp/>S::empty_copy(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">S<sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out_it<sp/>=<sp/>out.begin();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(this-&gt;cbegin(),<sp/>this-&gt;cend(),</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;out_it,<sp/>dtype,<sp/>non_blocking,<sp/>copy,<sp/>memory_format](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atensor)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>*(out_it++)<sp/>=<sp/>atensor.to(dtype,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);<sp/>});</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>to(caffe2::TypeMeta<sp/>type_meta,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="239"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>out<sp/>=<sp/>S::empty_copy(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">S<sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out_it<sp/>=<sp/>out.begin();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(this-&gt;cbegin(),<sp/>this-&gt;cend(),</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;out_it,<sp/>type_meta,<sp/>non_blocking,<sp/>copy,<sp/>memory_format](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atensor)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>*(out_it++)<sp/>=<sp/>atensor.to(type_meta,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);<sp/>});</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>to(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tensor<sp/>&amp;other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c10::optional&lt;c10::MemoryFormat&gt;<sp/>memory_format<sp/>=<sp/>c10::nullopt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="249"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>out<sp/>=<sp/>S::empty_copy(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">S<sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out_it<sp/>=<sp/>out.begin();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(this-&gt;cbegin(),<sp/>this-&gt;cend(),</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;out_it,<sp/>&amp;other,<sp/>non_blocking,<sp/>copy,<sp/>memory_format](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;atensor)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>*(out_it++)<sp/>=<sp/>atensor.to(other,<sp/>non_blocking,<sp/>copy,<sp/>memory_format);<sp/>});</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inplace<sp/>version<sp/>of<sp/>to,<sp/>will<sp/>resolve<sp/>to<sp/>any<sp/>equivalent<sp/>out-of-place<sp/>equivalent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>&amp;to_(Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>torch::Tensor<sp/>is<sp/>really<sp/>a<sp/>pointer<sp/>type,<sp/>so<sp/>copying<sp/>it<sp/>is<sp/>pretty<sp/>cheap:<sp/>only<sp/>the<sp/>meta<sp/>data<sp/>get<sp/>copied<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shuffled<sp/>around</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>perhaps<sp/>this<sp/>could<sp/>be<sp/>done<sp/>more<sp/>efficiently,<sp/>but<sp/>the<sp/>gains<sp/>would<sp/>almost<sp/>certainly<sp/>be<sp/>incommensurate<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>efforts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>other<sp/>=<sp/>this-&gt;to(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">S<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal">};</highlight></codeline>
<codeline lineno="274" refid="classquantit_1_1MPT" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>&lt;MPT&gt;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MPT()<sp/>:<sp/>vector_lift&lt;MPT&gt;()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MPT(size_type<sp/>size)<sp/>:<sp/>vector_lift&lt;MPT&gt;(size)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MPT(size_type<sp/>size,<sp/>const<sp/>Tens<sp/>&amp;val)<sp/>:<sp/>vector_lift&lt;MPT&gt;(size,<sp/>val)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MPT(const<sp/>MPT<sp/>&amp;other)<sp/>:<sp/>vector_lift&lt;MPT&gt;(other)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MPT(MPT<sp/>&amp;&amp;other)<sp/>noexcept<sp/>:<sp/>vector_lift&lt;MPT&gt;(std::move(other))<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MPT(std::initializer_list&lt;Tens&gt;<sp/>initl)<sp/>:<sp/>vector_lift&lt;MPT&gt;(initl)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MPT(const_iterator<sp/>begin,<sp/>const_iterator<sp/>end)<sp/>:<sp/>vector_lift(begin,<sp/>end)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPT&gt;::vector_lift</ref>;<sp/></highlight><highlight class="comment">//<sp/>import<sp/>base<sp/>class<sp/>constructors<sp/>as<sp/>they<sp/>are.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">~MPT</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>&amp;other)<sp/>{<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPT&gt;::swap</ref>(other);<sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>&amp;lhs,<sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>&amp;rhs)<sp/>{<sp/>lhs.swap(rhs);<sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>&amp;operator=(<ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>other)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>empty_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>&amp;in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref>(in.size());<sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="classquantit_1_1MPS" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1MPS" kindref="compound">MPS</ref><sp/>final</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>&lt;MPS&gt;<sp/></highlight><highlight class="comment">//<sp/>specialization<sp/>for<sp/>rank<sp/>3<sp/>tensors,<sp/>addionnaly<sp/>can<sp/>have<sp/>an<sp/>orthogonality<sp/>center.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classproperty" kindref="compound">property&lt;size_t, MPS&gt;</ref><sp/>orthogonality_center;<sp/></highlight><highlight class="comment">//<sp/>read<sp/>only<sp/>for<sp/>users</highlight></codeline>
<codeline lineno="314" refid="classquantit_1_1MPS_1aa94c7caf5cc9dd3e0680e82047a96093" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPS_1aa94c7caf5cc9dd3e0680e82047a96093" kindref="member">check_ranks</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_one(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tens<sp/>&amp;tens);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPS" kindref="compound">MPS</ref>()<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>&lt;<ref refid="classquantit_1_1MPS" kindref="compound">MPS</ref>&gt;(),<sp/>orthogonality_center(0)<sp/>{}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPS" kindref="compound">MPS</ref>(size_type<sp/>size)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>&lt;<ref refid="classquantit_1_1MPS" kindref="compound">MPS</ref>&gt;(size),<sp/>orthogonality_center(0)<sp/>{}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS(size_type<sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc)<sp/>:<sp/>vector_lift&lt;MPS&gt;(size),<sp/>orthogonality_center(oc)<sp/>{}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPS<sp/>&amp;other)<sp/>:<sp/>vector_lift(other),<sp/>orthogonality_center(other.orthogonality_center)<sp/>{}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS(MPS<sp/>&amp;&amp;other)<sp/>noexcept<sp/>:<sp/>vector_lift(std::move(other)),<sp/>orthogonality_center(other.orthogonality_center)<sp/>{}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS(std::vector&lt;Tens&gt;<sp/>initl,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>0)<sp/>:<sp/>vector_lift&lt;MPS&gt;(std::move(initl)),<sp/>orthogonality_center(oc)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classquantit_1_1MPS_1aa94c7caf5cc9dd3e0680e82047a96093" kindref="member">check_ranks</ref>();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;one<sp/>or<sp/>more<sp/>input<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>3<sp/>and/or<sp/>a<sp/>bond<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oc<sp/>&gt;=<sp/>size()<sp/>and<sp/>oc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;orthogonality<sp/>center<sp/>position<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>defined<sp/>tensors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS(std::initializer_list&lt;Tens&gt;<sp/>initl,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>0)<sp/>:<sp/>vector_lift&lt;MPS&gt;(initl),<sp/>orthogonality_center(oc)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classquantit_1_1MPS_1aa94c7caf5cc9dd3e0680e82047a96093" kindref="member">check_ranks</ref>();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;one<sp/>or<sp/>more<sp/>input<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>3<sp/>and/or<sp/>a<sp/>bond<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oc<sp/>&gt;=<sp/>size()<sp/>and<sp/>oc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;orthogonality<sp/>center<sp/>position<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>defined<sp/>tensors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS(size_type<sp/>lenght,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tens<sp/>&amp;val,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>0)<sp/>:<sp/>vector_lift(lenght,<sp/>val),<sp/>orthogonality_center(oc)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_one(val);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oc<sp/>&gt;=<sp/>size()<sp/>and<sp/>oc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;orthogonality<sp/>center<sp/>position<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>defined<sp/>tensors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>tensor<sp/>must<sp/>be<sp/>of<sp/>rank<sp/>3<sp/>and<sp/>have<sp/>equal<sp/>bond<sp/>dimensions<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPT<sp/>&amp;other,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>0)<sp/>:<sp/>vector_lift&lt;MPS&gt;(other),<sp/>orthogonality_center(oc)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classquantit_1_1MPS_1aa94c7caf5cc9dd3e0680e82047a96093" kindref="member">check_ranks</ref>();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Input<sp/>MPT<sp/>is<sp/>an<sp/>invalid<sp/>MPS:<sp/>one<sp/>or<sp/>more<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>3<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and/or<sp/>a<sp/>bond<sp/>dimension<sp/>mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oc<sp/>&gt;=<sp/>size()<sp/>and<sp/>oc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;orthogonality<sp/>center<sp/>position<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>defined<sp/>tensors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS(MPT<sp/>&amp;&amp;other,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>0)<sp/>:<sp/>vector_lift&lt;MPS&gt;(std::move(other)),<sp/>orthogonality_center(oc)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classquantit_1_1MPS_1aa94c7caf5cc9dd3e0680e82047a96093" kindref="member">check_ranks</ref>();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Input<sp/>MPT<sp/>is<sp/>an<sp/>invalid<sp/>MPS:<sp/>one<sp/>or<sp/>more<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>3<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and/or<sp/>a<sp/>bond<sp/>dimension<sp/>mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oc<sp/>&gt;=<sp/>size()<sp/>and<sp/>oc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;orthogonality<sp/>center<sp/>position<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>defined<sp/>tensors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS(const_iterator<sp/>begin,<sp/>const_iterator<sp/>end)<sp/>:<sp/>vector_lift(begin,<sp/>end),<sp/>orthogonality_center(0)<sp/>{}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~MPS()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(MPS<sp/>&amp;other)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector_lift&lt;MPS&gt;::swap(other);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::swap;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other.orthogonality_center.value,<sp/>orthogonality_center.value);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS<sp/>&amp;operator=(MPS<sp/>other)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="classquantit_1_1MPS_1a9b921b33aa90209ca7121137f173b4be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref>()</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>careful!<sp/>the<sp/>underlying<sp/>data<sp/>is<sp/>shared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref>(<ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPT&gt;</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPS&gt;</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="classquantit_1_1MPS_1a13ec497de80f22e73b19d727d7db1af0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPS_1a13ec497de80f22e73b19d727d7db1af0" kindref="member">move_oc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>details::dmrg_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>&amp;hamiltonian,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>&amp;twosites_hamil,<sp/><ref refid="classquantit_1_1MPS" kindref="compound">MPS</ref><sp/>&amp;in_out_state,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1dmrg__options" kindref="compound">dmrg_options</ref><sp/>&amp;options,<sp/>env_holder<sp/>&amp;Env,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1dmrg__logger" kindref="compound">dmrg_logger</ref><sp/>&amp;logger);<sp/></highlight><highlight class="comment">//<sp/>allow<sp/>dmrg<sp/>to<sp/>manipulate<sp/>the<sp/>oc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPS" kindref="compound">MPS</ref><sp/>empty_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPS" kindref="compound">MPS</ref><sp/>&amp;in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPS" kindref="compound">MPS</ref>(in.size(),<sp/>in.oc);<sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;oc<sp/>=<sp/>orthogonality_center.value;<sp/></highlight><highlight class="comment">//<sp/>private<sp/>direct<sp/>access<sp/>to<sp/>the<sp/>value<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(MPS<sp/>&amp;lhs,<sp/>MPS<sp/>&amp;rhs)<sp/>{<sp/>lhs.swap(rhs);<sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="classquantit_1_1MPO" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>&lt;MPO&gt;<sp/></highlight><highlight class="comment">//<sp/>specialization<sp/>for<sp/>rank<sp/>4<sp/>tensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_ranks()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_one(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tens<sp/>&amp;tens);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>()<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>(size_type<sp/>size)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref>(size)<sp/>{}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>&amp;other)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>(<ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>&amp;&amp;other)<sp/>noexcept<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref>(std::move(other))<sp/>{}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>(std::vector&lt;Tens&gt;<sp/>initl)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref>(std::move(initl))</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_ranks();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@cond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;one<sp/>or<sp/>more<sp/>input<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>4<sp/>and/or<sp/>a<sp/>bond<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@endcond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>(std::initializer_list&lt;Tens&gt;<sp/>initl)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref>(initl)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_ranks();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@cond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;one<sp/>or<sp/>more<sp/>input<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>4<sp/>and/or<sp/>a<sp/>bond<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@endcond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>(size_type<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tens<sp/>&amp;val)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref>(size,<sp/>val)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_one(val);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>tensor<sp/>must<sp/>be<sp/>of<sp/>rank<sp/>4<sp/>and<sp/>have<sp/>equal<sp/>bond<sp/>dimensions<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>&amp;other)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref>(other)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_ranks();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Input<sp/>MPT<sp/>is<sp/>an<sp/>invalid<sp/>MPO:<sp/>one<sp/>or<sp/>more<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>4<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and/or<sp/>a<sp/>bond<sp/>dimension<sp/>mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>(<ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref><sp/>&amp;&amp;other)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref>(std::move(other))</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_ranks();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Input<sp/>MPT<sp/>is<sp/>an<sp/>invalid<sp/>MPO:<sp/>one<sp/>or<sp/>more<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>4<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and/or<sp/>a<sp/>bond<sp/>dimension<sp/>mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>(const_iterator<sp/>begin,<sp/>const_iterator<sp/>end)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref>(begin,<sp/>end)<sp/>{}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPO" kindref="compound">~MPO</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;::swap</ref>(other);<sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref>()</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>careful!<sp/>the<sp/>underlying<sp/>data<sp/>is<sp/>shared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref>(<ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPT&gt;</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;MPO&gt;</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>&amp;operator=(<ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>empty_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>&amp;in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>(in.size());<sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal">};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>&amp;lhs,<sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref><sp/>&amp;rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/>lhs.swap(rhs);<sp/>}</highlight></codeline>
<codeline lineno="487" refid="classquantit_1_1bMPT" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>&lt;bMPT,<sp/>btensor&gt;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bMPT()<sp/>:<sp/>vector_lift&lt;bMPT,<sp/>btensor&gt;()<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bMPT(size_type<sp/>size)<sp/>:<sp/>vector_lift&lt;bMPT,<sp/>btensor&gt;(size)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bMPT(size_type<sp/>size,<sp/>const<sp/>Tens<sp/>&amp;val)<sp/>:<sp/>vector_lift&lt;bMPT,<sp/>btensor&gt;(size,<sp/>val)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bMPT(const<sp/>bMPT<sp/>&amp;other)<sp/>:<sp/>vector_lift(other)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bMPT(bMPT<sp/>&amp;&amp;other)<sp/>noexcept<sp/>:<sp/>vector_lift(std::move(other))<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bMPT(std::initializer_list&lt;Tens&gt;<sp/>initl)<sp/>:<sp/>vector_lift&lt;bMPT,<sp/>btensor&gt;(initl)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bMPT(const_iterator<sp/>begin,<sp/>const_iterator<sp/>end)<sp/>:<sp/>vector_lift(begin,<sp/>end)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPT, btensor&gt;::vector_lift</ref>;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">~bMPT</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>&amp;other)<sp/>{<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPT, btensor&gt;::swap</ref>(other);<sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>&amp;lhs,<sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>&amp;rhs)<sp/>{<sp/>lhs.swap(rhs);<sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>&amp;operator=(<ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>other)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>empty_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>&amp;in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref>(in.size());<sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal">};</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="classquantit_1_1bMPS" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1bMPS" kindref="compound">bMPS</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>&lt;bMPS,<sp/>btensor&gt;<sp/></highlight><highlight class="comment">//<sp/>specialization<sp/>for<sp/>rank<sp/>3<sp/>tensors,<sp/>addionnaly<sp/>can<sp/>have<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>orthogonality<sp/>center.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classproperty" kindref="compound">property&lt;size_t, bMPS&gt;</ref><sp/>orthogonality_center;<sp/></highlight><highlight class="comment">//<sp/>read<sp/>only<sp/>for<sp/>users</highlight></codeline>
<codeline lineno="527" refid="classquantit_1_1bMPS_1a2bfe618dc0f729574e85e4730d26e352" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPS_1a2bfe618dc0f729574e85e4730d26e352" kindref="member">check_ranks</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_one(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">Tens</ref><sp/>&amp;tens);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPS" kindref="compound">bMPS</ref>()<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>&lt;<ref refid="classquantit_1_1bMPS" kindref="compound">bMPS</ref>,<sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>&gt;(),<sp/>orthogonality_center(0)<sp/>{}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPS" kindref="compound">bMPS</ref>(size_type<sp/>size)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>&lt;<ref refid="classquantit_1_1bMPS" kindref="compound">bMPS</ref>,<sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>&gt;(size),<sp/>orthogonality_center(0)<sp/>{}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>bMPS(size_type<sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc)<sp/>:<sp/>vector_lift&lt;bMPS,<sp/>btensor&gt;(size),<sp/>orthogonality_center(std::min(oc,<sp/>size<sp/>-<sp/>1))<sp/>{}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>bMPS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;other)<sp/>:<sp/>vector_lift(other),<sp/>orthogonality_center(other.orthogonality_center)<sp/>{}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>bMPS(bMPS<sp/>&amp;&amp;other)<sp/>noexcept<sp/>:<sp/>vector_lift(std::move(other)),<sp/>orthogonality_center(other.orthogonality_center)<sp/>{}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>bMPS(std::vector&lt;Tens&gt;<sp/>initl,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>vector_lift&lt;bMPS,<sp/>btensor&gt;(std::move(initl)),<sp/>orthogonality_center(oc)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classquantit_1_1bMPS_1a2bfe618dc0f729574e85e4730d26e352" kindref="member">check_ranks</ref>();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;one<sp/>or<sp/>more<sp/>input<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>3<sp/>and/or<sp/>a<sp/>bond<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oc<sp/>&gt;=<sp/>size()<sp/>and<sp/>oc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;orthogonality<sp/>center<sp/>position<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>defined<sp/>tensors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>bMPS(std::initializer_list&lt;Tens&gt;<sp/>initl,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>0)<sp/>:<sp/>vector_lift&lt;bMPS,<sp/>btensor&gt;(initl),<sp/>orthogonality_center(oc)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classquantit_1_1bMPS_1a2bfe618dc0f729574e85e4730d26e352" kindref="member">check_ranks</ref>();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;one<sp/>or<sp/>more<sp/>input<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>3<sp/>and/or<sp/>a<sp/>bond<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oc<sp/>&gt;=<sp/>size()<sp/>and<sp/>oc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;orthogonality<sp/>center<sp/>position<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>defined<sp/>tensors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>bMPS(size_type<sp/>lenght,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tens<sp/>&amp;val,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>0)<sp/>:<sp/>vector_lift(lenght,<sp/>val),<sp/>orthogonality_center(oc)</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_one(val);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oc<sp/>&gt;=<sp/>size()<sp/>and<sp/>oc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;orthogonality<sp/>center<sp/>position<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>defined<sp/>tensors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>tensor<sp/>must<sp/>be<sp/>of<sp/>rank<sp/>3<sp/>and<sp/>have<sp/>equal<sp/>bond<sp/>dimensions<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>bMPS(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPT<sp/>&amp;other,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>0)<sp/>:<sp/>vector_lift(other),<sp/>orthogonality_center(oc)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classquantit_1_1bMPS_1a2bfe618dc0f729574e85e4730d26e352" kindref="member">check_ranks</ref>();</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Input<sp/>bMPT<sp/>is<sp/>an<sp/>invalid<sp/>bMPS:<sp/>one<sp/>or<sp/>more<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>3<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and/or<sp/>a<sp/>bond<sp/>dimension<sp/>mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oc<sp/>&gt;=<sp/>size()<sp/>and<sp/>oc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;orthogonality<sp/>center<sp/>position<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>defined<sp/>tensors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>bMPS(bMPT<sp/>&amp;&amp;other,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>0)<sp/>:<sp/>vector_lift(std::move(other)),<sp/>orthogonality_center(oc)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="classquantit_1_1bMPS_1a2bfe618dc0f729574e85e4730d26e352" kindref="member">check_ranks</ref>();</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Input<sp/>bMPT<sp/>is<sp/>an<sp/>invalid<sp/>bMPS:<sp/>one<sp/>or<sp/>more<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>3<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and/or<sp/>a<sp/>bond<sp/>dimension<sp/>mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oc<sp/>&gt;=<sp/>size()<sp/>and<sp/>oc<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;orthogonality<sp/>center<sp/>position<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>defined<sp/>tensors.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>bMPS(const_iterator<sp/>begin,<sp/>const_iterator<sp/>end)<sp/>:<sp/>vector_lift(begin,<sp/>end)<sp/>{}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~bMPS()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(bMPS<sp/>&amp;other)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector_lift&lt;bMPS,<sp/>btensor&gt;::swap(other);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::swap;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other.orthogonality_center.value,<sp/>orthogonality_center.value);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>bMPS<sp/>&amp;operator=(bMPS<sp/>other)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="603" refid="classquantit_1_1bMPS_1ae3d2499aaed0d88589f7545bf43e38a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref>()</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>careful!<sp/>the<sp/>underlying<sp/>data<sp/>is<sp/>shared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref>(<ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPT, btensor&gt;</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPS, btensor&gt;</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="611" refid="classquantit_1_1bMPS_1aec3eec819f40f05589f5e35a1b14bb08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPS_1aec3eec819f40f05589f5e35a1b14bb08" kindref="member">move_oc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref><sp/>details::dmrg_impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>&amp;hamiltonian,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>&amp;two_sites_hamil,<sp/><ref refid="classquantit_1_1bMPS" kindref="compound">bMPS</ref><sp/>&amp;in_out_state,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structquantit_1_1dmrg__options" kindref="compound">dmrg_options</ref><sp/>&amp;options,<sp/>benv_holder<sp/>&amp;Env,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1dmrg__logger" kindref="compound">dmrg_logger</ref><sp/>&amp;logger);<sp/></highlight><highlight class="comment">//<sp/>allow<sp/>dmrg<sp/>to<sp/>manipulate<sp/>the<sp/>oc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPS" kindref="compound">bMPS</ref><sp/>empty_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPS" kindref="compound">bMPS</ref><sp/>&amp;in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPS" kindref="compound">bMPS</ref>(in.size(),<sp/>in.oc);<sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;oc<sp/>=<sp/>orthogonality_center.value;<sp/></highlight><highlight class="comment">//<sp/>private<sp/>direct<sp/>access<sp/>to<sp/>the<sp/>value<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">};</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(bMPS<sp/>&amp;lhs,<sp/>bMPS<sp/>&amp;rhs)<sp/>{<sp/>lhs.swap(rhs);<sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="classquantit_1_1bMPO" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>&lt;bMPO,<sp/>btensor&gt;<sp/></highlight><highlight class="comment">//<sp/>specialization<sp/>for<sp/>rank<sp/>4<sp/>tensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_ranks()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_one(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">Tens</ref><sp/>&amp;tens);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>()<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPO, btensor&gt;</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>(size_type<sp/>size)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPO, btensor&gt;</ref>(size)<sp/>{}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>&amp;other)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>(<ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>&amp;&amp;other)<sp/>noexcept<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(std::move(other))<sp/>{}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>(std::initializer_list&lt;Tens&gt;<sp/>initl)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPO, btensor&gt;</ref>(initl)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_ranks();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@cond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;one<sp/>or<sp/>more<sp/>input<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>4<sp/>and/or<sp/>a<sp/>bond<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@endcond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>(std::vector&lt;Tens&gt;<sp/>initl)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPO, btensor&gt;</ref>(std::move(initl))</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_ranks();</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@cond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;one<sp/>or<sp/>more<sp/>input<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>4<sp/>and/or<sp/>a<sp/>bond<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@endcond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>(size_type<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">Tens</ref><sp/>&amp;val)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPO, btensor&gt;</ref>(size,<sp/>val)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_one(val);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>tensor<sp/>must<sp/>be<sp/>of<sp/>rank<sp/>4<sp/>and<sp/>have<sp/>equal<sp/>bond<sp/>dimensions<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>&amp;other)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(other)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_ranks();</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Input<sp/>bMPT<sp/>is<sp/>an<sp/>invalid<sp/>bMPO:<sp/>one<sp/>or<sp/>more<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>4<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and/or<sp/>a<sp/>bond<sp/>dimension<sp/>mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>(<ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref><sp/>&amp;&amp;other)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(std::move(other))</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>check_ranks();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>ok)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Input<sp/>bMPT<sp/>is<sp/>an<sp/>invalid<sp/>bMPO:<sp/>one<sp/>or<sp/>more<sp/>Tensors<sp/>has<sp/>rank<sp/>differing<sp/>from<sp/>4<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and/or<sp/>a<sp/>bond<sp/>dimension<sp/>mismatch<sp/>with<sp/>its<sp/>neighbor<sp/>(dims<sp/>0<sp/>and<sp/>2).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>(const_iterator<sp/>begin,<sp/>const_iterator<sp/>end)<sp/>:<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref>(begin,<sp/>end)<sp/>{}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">~bMPO</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPO, btensor&gt;::swap</ref>(other);<sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref>()</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>careful!<sp/>the<sp/>underlying<sp/>data<sp/>is<sp/>shared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref>(<ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPT, btensor&gt;</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift&lt;bMPO, btensor&gt;</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>&amp;operator=(<ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(other);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>empty_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>&amp;in)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>(in.size());<sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>&amp;coalesce(btensor::Scalar<sp/>cutoff<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="700"><highlight class="normal">};</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>&amp;lhs,<sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref><sp/>&amp;rhs)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/>lhs.swap(rhs);<sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">btensor<sp/>contract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPO<sp/>&amp;obs);</highlight></codeline>
<codeline lineno="704"><highlight class="normal">btensor<sp/>contract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPO<sp/>&amp;obs,<sp/>btensor<sp/>left_edge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;right_edge);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Z<sp/>=<sp/>std::enable_if_t&lt;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_base_of_v&lt;vector_lift&lt;T,<sp/>typename<sp/>T::Tens&gt;,<sp/>T&gt;&gt;&gt;<sp/></highlight><highlight class="comment">//<sp/>Z<sp/>only<sp/>serves<sp/>to<sp/>prevent<sp/>call<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>something<sp/>else<sp/>than<sp/>MPT,MPS<sp/>and<sp/>MPO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_dims(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;mps)</highlight></codeline>
<codeline lineno="709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;MPN<sp/>sizes:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;i<sp/>:<sp/>mps)</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;{},&quot;</highlight><highlight class="normal">,<sp/>i.sizes());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>fmt::print(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal">torch::Tensor<sp/>contract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPS<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPS<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPO<sp/>&amp;obs,<sp/>torch::Tensor<sp/>left_edge,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;right_edge);</highlight></codeline>
<codeline lineno="720"><highlight class="normal">torch::Tensor<sp/>contract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPS<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPS<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPO<sp/>&amp;obs);</highlight></codeline>
<codeline lineno="721"><highlight class="normal">torch::Tensor<sp/>contract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPS<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPS<sp/>&amp;b);</highlight></codeline>
<codeline lineno="722"><highlight class="normal">torch::Tensor<sp/>contract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPS<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MPS<sp/>&amp;b,<sp/>torch::Tensor<sp/>left_edge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>&amp;right_edge);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal">btensor<sp/>contract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPO<sp/>&amp;obs);</highlight></codeline>
<codeline lineno="725"><highlight class="normal">btensor<sp/>contract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPO<sp/>&amp;obs,<sp/>btensor<sp/>left_edge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;right_edge);</highlight></codeline>
<codeline lineno="726"><highlight class="normal">btensor<sp/>contract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;b,<sp/>btensor<sp/>left_edge,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>btensor<sp/>&amp;right_edge);</highlight></codeline>
<codeline lineno="727"><highlight class="normal">btensor<sp/>contract(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bMPS<sp/>&amp;b);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal">qtt_TEST_CASE(</highlight><highlight class="stringliteral">&quot;MPT<sp/>manipulations&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>MPT<sp/>amps({torch::rand({1,<sp/>2,<sp/>3}),<sp/>torch::rand({3,<sp/>2,<sp/>6}),<sp/>torch::rand({6,<sp/>2,<sp/>4})});</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>MPT<sp/>ampo({torch::rand({1,<sp/>2,<sp/>3,<sp/>2}),<sp/>torch::rand({3,<sp/>2,<sp/>6,<sp/>2}),<sp/>torch::rand({6,<sp/>2,<sp/>4,<sp/>2})});</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_REQUIRE(amps.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_REQUIRE(amps.capacity()<sp/>&gt;=<sp/>3);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_REQUIRE(ampo.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_REQUIRE(ampo.capacity()<sp/>&gt;=<sp/>3);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>M1<sp/>=<sp/>MPS(amps));<sp/></highlight><highlight class="comment">//<sp/>must<sp/>assign<sp/>somewhere<sp/>so<sp/>the<sp/>optimizer<sp/>doesn&apos;t<sp/>play<sp/>tricks<sp/>on<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>M2<sp/>=<sp/>MPO(ampo));</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>M3<sp/>=<sp/>MPS(ampo),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>M4<sp/>=<sp/>MPO(amps),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>M5<sp/>=<sp/>MPS(amps,<sp/>-1),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal">qtt_TEST_CASE(</highlight><highlight class="stringliteral">&quot;MPS<sp/>basic<sp/>manipulation&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::set_default_dtype(torch::scalarTypeToTypeMeta(</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::kFloat64));<sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>the<sp/>type<sp/>promotion<sp/>always<sp/>goes<sp/>to<sp/>floats<sp/>when<sp/>promoting<sp/>a<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>must<sp/>make<sp/>sure<sp/>side<sp/>effects<sp/>don&apos;t<sp/>leak<sp/>out<sp/>of<sp/>the<sp/>test<sp/>when<sp/>compiling<sp/>executable<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>the<sp/>test<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;Bad<sp/>constructions&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(MPS(5,<sp/>torch::rand({1,<sp/>3,<sp/>1}),<sp/>10),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(MPS(5,<sp/>torch::rand({1,<sp/>3,<sp/>5}),<sp/>1),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;Construction&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPS<sp/>A({torch::rand({1,<sp/>4,<sp/>3}),<sp/>torch::rand({3,<sp/>4,<sp/>1})});</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE(A.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE(A.capacity()<sp/>&gt;=<sp/>2);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(A.orthogonality_center<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size_0<sp/>=<sp/>std::vector&lt;int64_t&gt;{1,<sp/>4,<sp/>3};</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size_1<sp/>=<sp/>std::vector&lt;int64_t&gt;{3,<sp/>4,<sp/>1};</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(A[0].sizes()<sp/>==<sp/>size_0);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(A[1].sizes()<sp/>==<sp/>size_1);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size_0<sp/>=<sp/>A[0].sizes().vec();<sp/>//copy<sp/>the<sp/>current<sp/>size<sp/>of<sp/>A[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;moving<sp/>orthogonality<sp/>center&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>norm2<sp/>=</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::tensordot(torch::tensordot(torch::tensordot(A[0],<sp/>A[0].conj(),<sp/>{0,<sp/>1},<sp/>{0,<sp/>1}),<sp/>A[1],<sp/>{0},<sp/>{0}),</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[1].conj(),<sp/>{0,<sp/>1,<sp/>2},<sp/>{0,<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>qtt_REQUIRE(norm2.sizes().size()==1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>qtt_REQUIRE(norm2.sizes()[0]<sp/>==<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(A.move_oc(2),<sp/>std::invalid_argument);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.move_oc(1);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(A.orthogonality_center<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(A[0].sizes()<sp/>==<sp/>size_0);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(A[1].sizes()<sp/>==<sp/>size_1);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>CC<sp/>=<sp/>torch::tensordot(A[0],<sp/>A[0].conj(),<sp/>{0,<sp/>1},<sp/>{0,<sp/>1});</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(CC,<sp/>torch::eye(3)));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>default<sp/>tolerances<sp/>for<sp/>the<sp/>close()<sp/>familly<sp/>of<sp/>function<sp/>is<sp/>strange.<sp/>It&apos;s<sp/>too<sp/>low<sp/>for<sp/>float<sp/>comparison,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>very<sp/>high<sp/>for<sp/>double<sp/>comparison.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>canon_norm2<sp/>=<sp/>torch::tensordot(A[1],<sp/>A[1].conj(),<sp/>{0,<sp/>1,<sp/>2},<sp/>{0,<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>qtt_REQUIRE(canon_norm2.sizes().size()==1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>qtt_REQUIRE(canon_norm2.sizes()[0]<sp/>==<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm2.item().to&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>==</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest::Approx(canon_norm2.item().to&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()));<sp/></highlight><highlight class="comment">//<sp/>the<sp/>dynamical<sp/>nature<sp/>of<sp/>the<sp/>type<sp/>make<sp/>extracting<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>concrete<sp/>value<sp/>a<sp/>bit<sp/>complicated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;conversion<sp/>to<sp/>MPT&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>MPT(A);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::equal(B[0],<sp/>A[0]));</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal">qtt_TEST_CASE(</highlight><highlight class="stringliteral">&quot;MPO<sp/>basic<sp/>manipulation&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;Bad<sp/>constructions&quot;</highlight><highlight class="normal">)<sp/>{<sp/>qtt_CHECK_THROWS_AS(MPO(5,<sp/>torch::rand({1,<sp/>3,<sp/>5,<sp/>3})),<sp/>std::invalid_argument);<sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;Construction&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPO<sp/>A({torch::rand({1,<sp/>4,<sp/>3,<sp/>4}),<sp/>torch::rand({3,<sp/>4,<sp/>1,<sp/>4})});</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE(A.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE(A.capacity()<sp/>&gt;=<sp/>2);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size_0<sp/>=<sp/>std::vector&lt;int64_t&gt;{1,<sp/>4,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size_1<sp/>=<sp/>std::vector&lt;int64_t&gt;{3,<sp/>4,<sp/>1,<sp/>4};</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(A[0].sizes()<sp/>==<sp/>size_0);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(A[1].sizes()<sp/>==<sp/>size_1);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_0<sp/>=<sp/>A[0].sizes().vec();<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>current<sp/>size<sp/>of<sp/>A[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;conversion<sp/>to<sp/>MPT&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>MPT(A);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::equal(B[0],<sp/>A[0]));</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(torch::equal(B[1],<sp/>A[1]));</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal">qtt_TEST_CASE(</highlight><highlight class="stringliteral">&quot;btensor<sp/>networks&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="825"><highlight class="normal">{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>cval<sp/>=<sp/>quantity&lt;conserved::Z,<sp/>conserved::Z&gt;;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>phys_ind<sp/>=<sp/>sparse_zeros({{{1,<sp/>cval(0,<sp/>0)},<sp/>{1,<sp/>cval(1,<sp/>-1)},<sp/>{1,<sp/>cval(1,<sp/>1)},<sp/>{1,<sp/>cval(2,<sp/>0)}}},</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cval(0,<sp/>0));<sp/></highlight><highlight class="comment">//<sp/>physical<sp/>index<sp/>for<sp/>electrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inv_phys_ind<sp/>=<sp/>phys_ind.<ref refid="classquantit_1_1btensor_1a1742f2450d18a58b0508799e9d48c469" kindref="member">inverse_cvals</ref>();</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;random<sp/>MPS<sp/>uniform<sp/>physical<sp/>index&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>random_MPS(4,<sp/>4,<sp/>phys_ind,<sp/>cval(4,<sp/>0));<sp/></highlight><highlight class="comment">//<sp/>random<sp/>MPS<sp/>with<sp/>4<sp/>electrons,<sp/>and<sp/>bond<sp/>dimension<sp/>of<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(X.check_ranks());</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;bMPO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor<sp/>rside({{{1,<sp/>cval(0,<sp/>0)},</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,<sp/>cval(1,<sp/>1)},</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,<sp/>cval(1,<sp/>-1)},</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,<sp/>cval(-1,<sp/>-1)},</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,<sp/>cval(-1,<sp/>1)},</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{1,<sp/>cval(0,<sp/>0)}}},</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cval(0,<sp/>0));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lside<sp/>=<sp/>rside.inverse_cvals();</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>T_shape<sp/>=<sp/>shape_from(lside,<sp/>phys_ind,<sp/>rside,<sp/>inv_phys_ind);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>rand_like(T_shape);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bMPO<sp/>H(4,<sp/>T);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(H.check_ranks());</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjusting<sp/>edges<sp/>to<sp/>bond<sp/>dimension<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[0]<sp/>=<sp/>H[0].basic_create_view({5,<sp/>-1,<sp/>-1,<sp/>-1});</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(<ref refid="classquantit_1_1btensor_1a5d8897e8e51c880654c5d467b2b0a8bc" kindref="member">btensor::throw_bad_tensor</ref>(H[0]));</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[0]<sp/>=<sp/>H[0].reshape_as(shape_from(btensor({{{1,<sp/>cval(0,<sp/>0)}}},<sp/>cval(0,<sp/>0)),<sp/>H[0]));</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[3]<sp/>=<sp/>H[3].basic_create_view({-1,<sp/>-1,<sp/>0,<sp/>-1});</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_REQUIRE_NOTHROW(<ref refid="classquantit_1_1btensor_1a5d8897e8e51c880654c5d467b2b0a8bc" kindref="member">btensor::throw_bad_tensor</ref>(H[3]));</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>last_shape<sp/>=<sp/>shape_from(H[3].shape_from({-1,<sp/>-1,<sp/>0}).set_selection_rule_(H[3].selection_rule),</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>btensor({{{1,<sp/>cval(0,<sp/>0)}}},<sp/>cval(0,<sp/>0)),</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[3].shape_from({0,<sp/>0,<sp/>-1}).set_selection_rule_(cval(0,<sp/>0)));</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[3]<sp/>=<sp/>H[3].reshape_as(last_shape);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;random<sp/>MPS<sp/>from<sp/>MPO&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>random_MPS(4,<sp/>H,<sp/>cval(4,<sp/>0));<sp/></highlight><highlight class="comment">//<sp/>random<sp/>MPS<sp/>with<sp/>4<sp/>electrons,<sp/>and<sp/>bond<sp/>dimension<sp/>of<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK(X.check_ranks());</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal">qtt_TEST_CASE(</highlight><highlight class="stringliteral">&quot;contraction<sp/>equivalence<sp/>tests&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::set_default_dtype(torch::scalarTypeToTypeMeta(</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::kFloat64));<sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>the<sp/>type<sp/>promotion<sp/>always<sp/>goes<sp/>to<sp/>floats<sp/>when<sp/>promoting<sp/>a<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>MPS<sp/>state(2,<sp/>torch::rand({2,<sp/>2,<sp/>2}));</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>state[0]<sp/>=<sp/>state[0].reshape({1,<sp/>4,<sp/>2});</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>state[1]<sp/>=<sp/>state[1].reshape({2,<sp/>4,<sp/>1});</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO<sp/>op(2,<sp/>torch::rand({2,<sp/>4,<sp/>2,<sp/>4}));</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>op[0]<sp/>=<sp/>op[0].reshape({1,<sp/>4,<sp/>4,<sp/>4});</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>op[1]<sp/>=<sp/>op[1].reshape({4,<sp/>4,<sp/>1,<sp/>4});</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>MPO<sp/>idtt(2,<sp/>torch::diag(torch::ones({4})).reshape({1,<sp/>4,<sp/>1,<sp/>4}));</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conc_idtt<sp/>=<sp/>torch::tensordot(idtt[0],<sp/>idtt[1],<sp/>{2},<sp/>{0}).permute({0,<sp/>1,<sp/>3,<sp/>4,<sp/>2,<sp/>5}).reshape({16,<sp/>16});</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_REQUIRE(torch::allclose(conc_idtt,<sp/>torch::diag(torch::ones({16}))));</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conc_op<sp/>=<sp/>torch::tensordot(op[0],<sp/>op[1],<sp/>{2},<sp/>{0}).permute({0,<sp/>1,<sp/>3,<sp/>4,<sp/>2,<sp/>5}).reshape({16,<sp/>16});</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conc_state<sp/>=<sp/>torch::tensordot(state[0],<sp/>state[1],<sp/>{2},<sp/>{0}).reshape({16});</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>norm2<sp/>=<sp/>torch::tensordot(conc_state,<sp/>conc_state,<sp/>{0},<sp/>{0});</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>norm2_test<sp/>=<sp/>contract(state,<sp/>state);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>norm2_idtt<sp/>=<sp/>contract(state,<sp/>state,<sp/>idtt);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;{}\n&quot;,norm2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;{}\n&quot;,norm2_test);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;{}\n&quot;,norm2_idtt);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(norm2,<sp/>norm2_test));</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(norm2,<sp/>norm2_idtt));</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>aver<sp/>=<sp/>torch::tensordot(conc_state,<sp/>torch::tensordot(conc_op,<sp/>conc_state,<sp/>{1},<sp/>{0}),<sp/>{0},<sp/>{0});</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>aver_norm2<sp/>=<sp/>torch::tensordot(conc_state,<sp/>torch::tensordot(conc_idtt,<sp/>conc_state,<sp/>{1},<sp/>{0}),<sp/>{0},<sp/>{0});</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>aver_test<sp/>=<sp/>contract(state,<sp/>state,<sp/>op);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;{}\n&quot;,<sp/>aver);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;{}\n&quot;,<sp/>aver_test);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fmt::print(&quot;{}\n&quot;,<sp/>aver_norm2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(torch::allclose(aver,<sp/>aver_test));</highlight></codeline>
<codeline lineno="902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="920" refid="structquantit_1_1dependant__tensor__network" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1dependant__tensor__network" kindref="compound">dependant_tensor_network</ref>;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="923" refid="structquantit_1_1dependant__tensor__network_3_01btensor_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1dependant__tensor__network" kindref="compound">dependant_tensor_network</ref>&lt;<ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>&gt;</highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPT" kindref="compound">MPT_type</ref><sp/>=<sp/><ref refid="classquantit_1_1bMPT" kindref="compound">bMPT</ref>;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPO" kindref="compound">MPO_type</ref><sp/>=<sp/><ref refid="classquantit_1_1bMPO" kindref="compound">bMPO</ref>;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1bMPS" kindref="compound">MPS_type</ref><sp/>=<sp/><ref refid="classquantit_1_1bMPS" kindref="compound">bMPS</ref>;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>env_type<sp/>=<sp/>benv_holder;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1btensor" kindref="compound">base_tensor_type</ref><sp/>=<sp/><ref refid="classquantit_1_1btensor" kindref="compound">btensor</ref>;</highlight></codeline>
<codeline lineno="930"><highlight class="normal">};</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="932" refid="structquantit_1_1dependant__tensor__network_3_01torch_1_1Tensor_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1dependant__tensor__network" kindref="compound">dependant_tensor_network</ref>&lt;torch::Tensor&gt;</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT_type</ref><sp/>=<sp/><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref>;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO_type</ref><sp/>=<sp/><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref>;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1MPS" kindref="compound">MPS_type</ref><sp/>=<sp/><ref refid="classquantit_1_1MPS" kindref="compound">MPS</ref>;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>env_type<sp/>=<sp/>env_holder;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base_tensor_type<sp/>=<sp/>torch::Tensor;</highlight></codeline>
<codeline lineno="939"><highlight class="normal">};</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="941" refid="structquantit_1_1dependant__tensor__network_3_01S_00_01std_1_1enable__if__t_3_01std_1_1is__base_060016cbe70a4089cd834cde17bb5eac" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1dependant__tensor__network" kindref="compound">dependant_tensor_network</ref>&lt;S,<sp/>std::enable_if_t&lt;std::is_base_of_v&lt;vector_lift&lt;S,<sp/>torch::Tensor&gt;,<sp/>S&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structquantit_1_1dependant__tensor__network" kindref="compound">dependant_tensor_network</ref>&lt;torch::Tensor&gt;</highlight></codeline>
<codeline lineno="943"><highlight class="normal">{</highlight></codeline>
<codeline lineno="944"><highlight class="normal">};</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="946" refid="structquantit_1_1dependant__tensor__network_3_01S_00_01std_1_1enable__if__t_3_01std_1_1is__base_7caa039768c7fc487ea8fbc6fa9338de" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structquantit_1_1dependant__tensor__network" kindref="compound">dependant_tensor_network</ref>&lt;S,<sp/>std::enable_if_t&lt;std::is_base_of_v&lt;vector_lift&lt;S,<sp/>btensor&gt;,<sp/>S&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structquantit_1_1dependant__tensor__network" kindref="compound">dependant_tensor_network</ref>&lt;btensor&gt;</highlight></codeline>
<codeline lineno="948"><highlight class="normal">{</highlight></codeline>
<codeline lineno="949"><highlight class="normal">};</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>quantit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ADA5A359_8ACF_448D_91BC_09C085F510CC<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h"/>
  </compounddef>
</doxygen>
