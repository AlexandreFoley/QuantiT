<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classquantit_1_1MPO" kind="class" language="C++" prot="public" final="yes">
    <compoundname>quantit::MPO</compoundname>
    <basecompoundref refid="classquantit_1_1vector__lift" prot="public" virt="non-virtual">quantit::vector_lift&lt; MPO &gt;</basecompoundref>
    <includes refid="MPT_8h" local="no">MPT.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classquantit_1_1MPO_1a295aea0e7d01c9d9a7b40bdd96b4356e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool quantit::MPO::check_ranks</definition>
        <argsstring>() const</argsstring>
        <name>check_ranks</name>
        <qualifiedname>quantit::MPO::check_ranks</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="415" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1a2e30cb2f7da9a1d4a0c4a16008d34420" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::MPO</definition>
        <argsstring>()</argsstring>
        <name>MPO</name>
        <qualifiedname>quantit::MPO::MPO</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="418" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="418" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1ab2c4152530cc29441bac2906b5a6ded2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::MPO</definition>
        <argsstring>(size_type size)</argsstring>
        <name>MPO</name>
        <qualifiedname>quantit::MPO::MPO</qualifiedname>
        <param>
          <type>size_type</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="419" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="419" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1a631ea7ce3ad72fdf6c770f543ceaf1f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::MPO</definition>
        <argsstring>(const MPO &amp;other)</argsstring>
        <name>MPO</name>
        <qualifiedname>quantit::MPO::MPO</qualifiedname>
        <param>
          <type>const <ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="420" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="420" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1a54be8e040bed396b8f44944f88e99886" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::MPO</definition>
        <argsstring>(MPO &amp;&amp;other) noexcept</argsstring>
        <name>MPO</name>
        <qualifiedname>quantit::MPO::MPO</qualifiedname>
        <param>
          <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="421" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1aaebe7b39e36bc9bc0a966df05d319d52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::MPO</definition>
        <argsstring>(std::vector&lt; Tens &gt; initl)</argsstring>
        <name>MPO</name>
        <qualifiedname>quantit::MPO::MPO</qualifiedname>
        <param>
          <type>std::vector&lt; Tens &gt;</type>
          <declname>initl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="422" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="422" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1ac6dff68c8bfd2ac9c6099260b7439ad8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::MPO</definition>
        <argsstring>(std::initializer_list&lt; Tens &gt; initl)</argsstring>
        <name>MPO</name>
        <qualifiedname>quantit::MPO::MPO</qualifiedname>
        <param>
          <type>std::initializer_list&lt; Tens &gt;</type>
          <declname>initl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="433" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="433" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1ab0658ac4f80d80db5d8d4010499bc18a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::MPO</definition>
        <argsstring>(size_type size, const Tens &amp;val)</argsstring>
        <name>MPO</name>
        <qualifiedname>quantit::MPO::MPO</qualifiedname>
        <param>
          <type>size_type</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const Tens &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="445" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="445" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1a098a8e90089e6ffa090aa00347d0007c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::MPO</definition>
        <argsstring>(const MPT &amp;other)</argsstring>
        <name>MPO</name>
        <qualifiedname>quantit::MPO::MPO</qualifiedname>
        <param>
          <type>const <ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="453" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="453" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1a25d01cdf144a3847d423a42ba5d07f0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::MPO</definition>
        <argsstring>(MPT &amp;&amp;other)</argsstring>
        <name>MPO</name>
        <qualifiedname>quantit::MPO::MPO</qualifiedname>
        <param>
          <type><ref refid="classquantit_1_1MPT" kindref="compound">MPT</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="460" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="460" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1aed928b6a111c9b66ce8d630bf5ff1155" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::MPO</definition>
        <argsstring>(const_iterator begin, const_iterator end)</argsstring>
        <name>MPO</name>
        <qualifiedname>quantit::MPO::MPO</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="467" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="467" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1af79bbaaa2250cf1a76a2a70b0607438e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual quantit::MPO::~MPO</definition>
        <argsstring>()=default</argsstring>
        <name>~MPO</name>
        <qualifiedname>quantit::MPO::~MPO</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="469" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1a46da35951d67347635de9ef02e686269" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::MPO::swap</definition>
        <argsstring>(MPO &amp;other) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>quantit::MPO::swap</qualifiedname>
        <param>
          <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="471" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="471" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1aedef4ed7361e3245affae47762cb48c1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::MPO::operator MPT</definition>
        <argsstring>()</argsstring>
        <name>operator MPT</name>
        <qualifiedname>quantit::MPO::operator MPT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="473" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1acf2c8aa608179e5d0a4c8dd04cc71099" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref> &amp;</type>
        <definition>MPO &amp; quantit::MPO::operator=</definition>
        <argsstring>(MPO other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>quantit::MPO::operator=</qualifiedname>
        <param>
          <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="478" column="5" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="478" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a84cb551c61497288e7843feed0b3b721" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::operator MPO</definition>
        <argsstring>()</argsstring>
        <name>operator MPO</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::operator MPO</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="125" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a7342e772fe3690acb188e125fc344d5f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::swap</definition>
        <argsstring>(vector_lift &amp;other) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::swap</qualifiedname>
        <param>
          <type><ref refid="classquantit_1_1vector__lift" kindref="compound">vector_lift</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="133" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a0c2c2ba4b3ad03ddde07fb9c70b53f11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::at</definition>
        <argsstring>(size_t i)</argsstring>
        <name>at</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::at</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="142" column="11" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a3d8a0350129264205d3015ca9cf34b9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::at</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>at</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::at</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="143" column="17" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a425eaa4e4f7916a82cce013f2326aa5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="144" column="11" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a68a57ec836b4682f46a76628c95cd578" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="145" column="17" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1aa3bd63ea81a34f5ee3fa71fce489a175" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::front</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="146" column="11" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a060ed759f9e5dc16fd6203ed368c0270" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::front</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="147" column="17" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a772b9530f48687cd7fb535096f3ce26b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::back</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="148" column="11" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1ab4db3513ed7825e45b3406cfdc7da875" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::back</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="149" column="17" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1ab0af6e916fa18833330271af0f15051a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Tens *</type>
        <definition>Tens * quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="150" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a2f152f3f695ad7075146da9f2d535638" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const Tens *</type>
        <definition>const Tens * quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="151" column="12" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a1deeecee80d8abeda4eac94db68a2ad1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="153" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1aa5911d3b655feb2144e112b3e9e84ec8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="154" column="16" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1ac016b067a7fa102613a6a74e5ff90426" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::cbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="155" column="16" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="155" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a8fe08c939748a75779b92a72bcc22f6b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="156" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a587ab8175a47d2af0fc40489f3765a9e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="157" column="16" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1aea239fb31a5660eb18c79cde67b677ac" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::cend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="158" column="16" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a3cf5b4780aa2e6f57356314d3964d2e6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::rbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="159" column="18" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1afc4aa1b9321982066adde405295bc43c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::rbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="160" column="24" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a6ce4e97c324ec1ec6a65c1eb7bbe32ea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::crbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="161" column="24" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a291e908c3205f95cf581809317f5fe46" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::rend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="162" column="18" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a7536dda8a7b23fd261d6bda7c27776cb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::rend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="163" column="24" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a08392d8d4aef61f39510004ca280cf52" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::crend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="164" column="24" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a8745b99fad2af212589ee49df5a69012" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="166" column="7" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1ad878af4ca8650de9eceff7e380b8ae4e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="167" column="7" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a9a3ba903e635bdd9c17c00c3d6577ff6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::max_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max_size</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::max_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="168" column="7" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1afd332192732cc9139b409ba205b0d825" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::reserve</definition>
        <argsstring>(size_t new_cap)</argsstring>
        <name>reserve</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::reserve</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>new_cap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="169" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a91f3daf5c44bb8d5fe10f182f6abea67" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::capacity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="170" column="7" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a304415454d09c0705d2f6015afe505fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::shrink_to_fit</definition>
        <argsstring>()</argsstring>
        <name>shrink_to_fit</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::shrink_to_fit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="171" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1aca4d0987de2f20030aabd50a36b6f6fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="173" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1ad4f63687789e500c54d4da041dce7d6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::insert</definition>
        <argsstring>(const_iterator pos, const Tens &amp;val)</argsstring>
        <name>insert</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::insert</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const Tens &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="174" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a25a3654b7a751703e3cbbd16f19177ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::insert</definition>
        <argsstring>(const_iterator pos, Tens &amp;&amp;val)</argsstring>
        <name>insert</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::insert</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Tens &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="175" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a75f79572ff8f0695d23201582996b906" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::insert</definition>
        <argsstring>(const_iterator pos, size_type count, Tens &amp;&amp;val)</argsstring>
        <name>insert</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::insert</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>size_type</type>
          <declname>count</declname>
        </param>
        <param>
          <type>Tens &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="176" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1ac860ab8f995ca814daef39a09f861572" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::insert</definition>
        <argsstring>(const_iterator pos, InputIT first, InputIT last)</argsstring>
        <name>insert</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::insert</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>InputIT</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIT</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="178" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a6662a0c02ce9e07b0e2a81b4fde48674" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::insert</definition>
        <argsstring>(const_iterator pos, std::initializer_list&lt; Tens &gt; list)</argsstring>
        <name>insert</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::insert</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; Tens &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="182" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a14c3993765ca99ae4ca3beb2e6455fe6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::emplace</definition>
        <argsstring>(const_iterator pos, Args &amp;&amp;...args)</argsstring>
        <name>emplace</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::emplace</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="184" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a0f316c8d93098a029935aa60d8b850ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::erase</definition>
        <argsstring>(const_iterator pos)</argsstring>
        <name>erase</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::erase</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="188" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a6b2cb538b63a2d398ee8169045ccc93f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::erase</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>erase</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::erase</qualifiedname>
        <param>
          <type>const_iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="189" column="10" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1afb68adc182c0a25b422e7dff3cdcbde2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::push_back</definition>
        <argsstring>(const Tens &amp;val)</argsstring>
        <name>push_back</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::push_back</qualifiedname>
        <param>
          <type>const Tens &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="190" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1ab3e23728d13dc8bb3cf494a20c99a809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::push_back</definition>
        <argsstring>(Tens &amp;&amp;val)</argsstring>
        <name>push_back</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::push_back</qualifiedname>
        <param>
          <type>Tens &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="191" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1aa0170758a7b359bc1f6c3f116c4ef8f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::emplace_back</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>emplace_back</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::emplace_back</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="193" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a828e4fde579fc2392e7f9691271266b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::pop_back</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="197" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1aa38d33276c29f0ce13024699e40253f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::resize</definition>
        <argsstring>(size_type count)</argsstring>
        <name>resize</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::resize</qualifiedname>
        <param>
          <type>size_type</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="198" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a537084285b6501165e50a3565c9a7d19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::resize</definition>
        <argsstring>(size_type count, const Tens &amp;value)</argsstring>
        <name>resize</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::resize</qualifiedname>
        <param>
          <type>size_type</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const Tens &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="199" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1ac8dbb3c3520d908dac38494187bdc0cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref></type>
        <definition>MPO  quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::to</definition>
        <argsstring>(const torch::TensorOptions &amp;options={}, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::to</qualifiedname>
        <param>
          <type>const torch::TensorOptions &amp;</type>
          <declname>options</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="202" column="3" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="202" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1ad8a66d5449ae3316b828fe7c491e151f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref></type>
        <definition>MPO  quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::to</definition>
        <argsstring>(torch::Device device, torch::ScalarType dtype, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::to</qualifiedname>
        <param>
          <type>torch::Device</type>
          <declname>device</declname>
        </param>
        <param>
          <type>torch::ScalarType</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="217" column="3" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="217" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a9f5fd7e554f2e4c804a7ac55e8b79c05" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref></type>
        <definition>MPO  quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::to</definition>
        <argsstring>(torch::ScalarType dtype, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::to</qualifiedname>
        <param>
          <type>torch::ScalarType</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="227" column="3" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="227" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1a7429cdaf9d908a06767666fca723101e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref></type>
        <definition>MPO  quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::to</definition>
        <argsstring>(caffe2::TypeMeta type_meta, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::to</qualifiedname>
        <param>
          <type>caffe2::TypeMeta</type>
          <declname>type_meta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="237" column="3" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="237" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1aa15da92b21438c52be24d3e88551e81e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref></type>
        <definition>MPO  quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::to</definition>
        <argsstring>(const torch::Tensor &amp;other, bool non_blocking=false, bool copy=false, c10::optional&lt; c10::MemoryFormat &gt; memory_format=c10::nullopt) const</argsstring>
        <name>to</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::to</qualifiedname>
        <param>
          <type>const torch::Tensor &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>c10::optional&lt; c10::MemoryFormat &gt;</type>
          <declname>memory_format</declname>
          <defval>c10::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="247" column="3" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="247" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1vector__lift_1acf800f7152708c60399b3eaeee815a15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref> &amp;</type>
        <definition>MPO  &amp; quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::to_</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>to_</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::to_</qualifiedname>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="259" column="3" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="259" bodyend="268"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classquantit_1_1MPO_1a69723235adae013c24435032ddb92590" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool quantit::MPO::check_one</definition>
        <argsstring>(const Tens &amp;tens)</argsstring>
        <name>check_one</name>
        <qualifiedname>quantit::MPO::check_one</qualifiedname>
        <param>
          <type>const Tens &amp;</type>
          <declname>tens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="416" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classquantit_1_1MPO_1a77181e73678f80407e63ad18e54e7636" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref></type>
        <definition>static MPO quantit::MPO::empty_copy</definition>
        <argsstring>(const MPO &amp;in)</argsstring>
        <name>empty_copy</name>
        <qualifiedname>quantit::MPO::empty_copy</qualifiedname>
        <param>
          <type>const <ref refid="classquantit_1_1MPO" kindref="compound">MPO</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="484" column="12" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="484" bodyend="484"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classquantit_1_1vector__lift_1a4dfa9ff1e27b8a910ac5b234cba6e706" prot="public" static="no">
        <type>torch::Tensor</type>
        <definition>using quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::Tens =  torch::Tensor</definition>
        <argsstring></argsstring>
        <name>Tens</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::Tens</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="96" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1vector__lift_1a5adbd470520fc9b5fe634a52f9acfaec" prot="public" static="no">
        <type>std::vector&lt; Tens &gt;</type>
        <definition>using quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::VTens =  std::vector&lt;Tens&gt;</definition>
        <argsstring></argsstring>
        <name>VTens</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::VTens</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="97" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1vector__lift_1a4b667b1852ca1b7a29537e981e57200c" prot="public" static="no">
        <type>typename VTens::size_type</type>
        <definition>using quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::size_type =  typename VTens::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="98" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1vector__lift_1a22bfa093a70400986edf9a8a955ac2dd" prot="public" static="no">
        <type>typename VTens::iterator</type>
        <definition>using quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::iterator =  typename VTens::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="99" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1vector__lift_1ad909e815b6f898bff49f3ee486fecebb" prot="public" static="no">
        <type>typename VTens::const_iterator</type>
        <definition>using quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::const_iterator =  typename VTens::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="100" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1vector__lift_1a626a11de2e6bda79ab46e1a77edc2f2b" prot="public" static="no">
        <type>typename VTens::reverse_iterator</type>
        <definition>using quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::reverse_iterator =  typename VTens::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::reverse_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="101" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1vector__lift_1a010c9ed3c923579de934ffff451ca7c4" prot="public" static="no">
        <type>typename VTens::const_reverse_iterator</type>
        <definition>using quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::const_reverse_iterator =  typename VTens::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::const_reverse_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="102" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1vector__lift_1ac3d6a73e33d5cbcca35eb30c2adc7a2e" prot="public" static="no">
        <type>typename VTens::const_reference</type>
        <definition>using quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::const_reference =  typename VTens::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::const_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="103" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classquantit_1_1vector__lift_1a222022770001c4c0d304f96e74550044" prot="public" static="no">
        <type>typename VTens::reference</type>
        <definition>using quantit::vector_lift&lt; MPO , torch::Tensor  &gt;::reference =  typename VTens::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>quantit::vector_lift&lt; MPO &gt;::reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="104" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for tensor trains of rank 4. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>quantit::MPO</label>
        <link refid="classquantit_1_1MPO"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>quantit::vector_lift&lt; MPO &gt;</label>
        <link refid="classquantit_1_1vector__lift"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>quantit::MPO</label>
        <link refid="classquantit_1_1MPO"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>quantit::vector_lift&lt; MPO &gt;</label>
        <link refid="classquantit_1_1vector__lift"/>
      </node>
    </collaborationgraph>
    <location file="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" line="412" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/MPT.h" bodystart="413" bodyend="485"/>
    <listofallmembers>
      <member refid="classquantit_1_1vector__lift_1a0c2c2ba4b3ad03ddde07fb9c70b53f11" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>at</name></member>
      <member refid="classquantit_1_1vector__lift_1a3d8a0350129264205d3015ca9cf34b9c" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>at</name></member>
      <member refid="classquantit_1_1vector__lift_1a772b9530f48687cd7fb535096f3ce26b" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>back</name></member>
      <member refid="classquantit_1_1vector__lift_1ab4db3513ed7825e45b3406cfdc7da875" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>back</name></member>
      <member refid="classquantit_1_1vector__lift_1a1deeecee80d8abeda4eac94db68a2ad1" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>begin</name></member>
      <member refid="classquantit_1_1vector__lift_1aa5911d3b655feb2144e112b3e9e84ec8" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>begin</name></member>
      <member refid="classquantit_1_1vector__lift_1a91f3daf5c44bb8d5fe10f182f6abea67" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>capacity</name></member>
      <member refid="classquantit_1_1vector__lift_1ac016b067a7fa102613a6a74e5ff90426" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>cbegin</name></member>
      <member refid="classquantit_1_1vector__lift_1aea239fb31a5660eb18c79cde67b677ac" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>cend</name></member>
      <member refid="classquantit_1_1MPO_1a69723235adae013c24435032ddb92590" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>check_one</name></member>
      <member refid="classquantit_1_1MPO_1a295aea0e7d01c9d9a7b40bdd96b4356e" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>check_ranks</name></member>
      <member refid="classquantit_1_1vector__lift_1aca4d0987de2f20030aabd50a36b6f6fa" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>clear</name></member>
      <member refid="classquantit_1_1vector__lift_1ad909e815b6f898bff49f3ee486fecebb" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>const_iterator</name></member>
      <member refid="classquantit_1_1vector__lift_1ac3d6a73e33d5cbcca35eb30c2adc7a2e" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>const_reference</name></member>
      <member refid="classquantit_1_1vector__lift_1a010c9ed3c923579de934ffff451ca7c4" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>const_reverse_iterator</name></member>
      <member refid="classquantit_1_1vector__lift_1a6ce4e97c324ec1ec6a65c1eb7bbe32ea" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>crbegin</name></member>
      <member refid="classquantit_1_1vector__lift_1a08392d8d4aef61f39510004ca280cf52" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>crend</name></member>
      <member refid="classquantit_1_1vector__lift_1ab0af6e916fa18833330271af0f15051a" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>data</name></member>
      <member refid="classquantit_1_1vector__lift_1a2f152f3f695ad7075146da9f2d535638" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>data</name></member>
      <member refid="classquantit_1_1vector__lift_1a14c3993765ca99ae4ca3beb2e6455fe6" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>emplace</name></member>
      <member refid="classquantit_1_1vector__lift_1aa0170758a7b359bc1f6c3f116c4ef8f4" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>emplace_back</name></member>
      <member refid="classquantit_1_1vector__lift_1a8745b99fad2af212589ee49df5a69012" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>empty</name></member>
      <member refid="classquantit_1_1MPO_1a77181e73678f80407e63ad18e54e7636" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>empty_copy</name></member>
      <member refid="classquantit_1_1vector__lift_1a8fe08c939748a75779b92a72bcc22f6b" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>end</name></member>
      <member refid="classquantit_1_1vector__lift_1a587ab8175a47d2af0fc40489f3765a9e" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>end</name></member>
      <member refid="classquantit_1_1vector__lift_1a0f316c8d93098a029935aa60d8b850ce" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>erase</name></member>
      <member refid="classquantit_1_1vector__lift_1a6b2cb538b63a2d398ee8169045ccc93f" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>erase</name></member>
      <member refid="classquantit_1_1vector__lift_1aa3bd63ea81a34f5ee3fa71fce489a175" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>front</name></member>
      <member refid="classquantit_1_1vector__lift_1a060ed759f9e5dc16fd6203ed368c0270" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>front</name></member>
      <member refid="classquantit_1_1vector__lift_1ad4f63687789e500c54d4da041dce7d6b" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>insert</name></member>
      <member refid="classquantit_1_1vector__lift_1a25a3654b7a751703e3cbbd16f19177ef" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>insert</name></member>
      <member refid="classquantit_1_1vector__lift_1a75f79572ff8f0695d23201582996b906" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>insert</name></member>
      <member refid="classquantit_1_1vector__lift_1ac860ab8f995ca814daef39a09f861572" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>insert</name></member>
      <member refid="classquantit_1_1vector__lift_1a6662a0c02ce9e07b0e2a81b4fde48674" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>insert</name></member>
      <member refid="classquantit_1_1vector__lift_1a22bfa093a70400986edf9a8a955ac2dd" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>iterator</name></member>
      <member refid="classquantit_1_1vector__lift_1a9a3ba903e635bdd9c17c00c3d6577ff6" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>max_size</name></member>
      <member refid="classquantit_1_1MPO_1a2e30cb2f7da9a1d4a0c4a16008d34420" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>MPO</name></member>
      <member refid="classquantit_1_1MPO_1ab2c4152530cc29441bac2906b5a6ded2" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>MPO</name></member>
      <member refid="classquantit_1_1MPO_1a631ea7ce3ad72fdf6c770f543ceaf1f1" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>MPO</name></member>
      <member refid="classquantit_1_1MPO_1a54be8e040bed396b8f44944f88e99886" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>MPO</name></member>
      <member refid="classquantit_1_1MPO_1aaebe7b39e36bc9bc0a966df05d319d52" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>MPO</name></member>
      <member refid="classquantit_1_1MPO_1ac6dff68c8bfd2ac9c6099260b7439ad8" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>MPO</name></member>
      <member refid="classquantit_1_1MPO_1ab0658ac4f80d80db5d8d4010499bc18a" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>MPO</name></member>
      <member refid="classquantit_1_1MPO_1a098a8e90089e6ffa090aa00347d0007c" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>MPO</name></member>
      <member refid="classquantit_1_1MPO_1a25d01cdf144a3847d423a42ba5d07f0a" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>MPO</name></member>
      <member refid="classquantit_1_1MPO_1aed928b6a111c9b66ce8d630bf5ff1155" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>MPO</name></member>
      <member refid="classquantit_1_1vector__lift_1a84cb551c61497288e7843feed0b3b721" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>operator MPO</name></member>
      <member refid="classquantit_1_1MPO_1aedef4ed7361e3245affae47762cb48c1" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>operator MPT</name></member>
      <member refid="classquantit_1_1MPO_1acf2c8aa608179e5d0a4c8dd04cc71099" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>operator=</name></member>
      <member refid="classquantit_1_1vector__lift_1aa5443aeae322ce1e1925a24f67724568" prot="public" virt="non-virtual" ambiguityscope="vector_lift&lt; MPO &gt;::"><scope>quantit::MPO</scope><name>operator=</name></member>
      <member refid="classquantit_1_1vector__lift_1a425eaa4e4f7916a82cce013f2326aa5d" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>operator[]</name></member>
      <member refid="classquantit_1_1vector__lift_1a68a57ec836b4682f46a76628c95cd578" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>operator[]</name></member>
      <member refid="classquantit_1_1vector__lift_1a828e4fde579fc2392e7f9691271266b4" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>pop_back</name></member>
      <member refid="classquantit_1_1vector__lift_1afb68adc182c0a25b422e7dff3cdcbde2" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>push_back</name></member>
      <member refid="classquantit_1_1vector__lift_1ab3e23728d13dc8bb3cf494a20c99a809" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>push_back</name></member>
      <member refid="classquantit_1_1vector__lift_1a3cf5b4780aa2e6f57356314d3964d2e6" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>rbegin</name></member>
      <member refid="classquantit_1_1vector__lift_1afc4aa1b9321982066adde405295bc43c" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>rbegin</name></member>
      <member refid="classquantit_1_1vector__lift_1a222022770001c4c0d304f96e74550044" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>reference</name></member>
      <member refid="classquantit_1_1vector__lift_1a291e908c3205f95cf581809317f5fe46" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>rend</name></member>
      <member refid="classquantit_1_1vector__lift_1a7536dda8a7b23fd261d6bda7c27776cb" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>rend</name></member>
      <member refid="classquantit_1_1vector__lift_1afd332192732cc9139b409ba205b0d825" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>reserve</name></member>
      <member refid="classquantit_1_1vector__lift_1aa38d33276c29f0ce13024699e40253f4" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>resize</name></member>
      <member refid="classquantit_1_1vector__lift_1a537084285b6501165e50a3565c9a7d19" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>resize</name></member>
      <member refid="classquantit_1_1vector__lift_1a626a11de2e6bda79ab46e1a77edc2f2b" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>reverse_iterator</name></member>
      <member refid="classquantit_1_1vector__lift_1a304415454d09c0705d2f6015afe505fa" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>shrink_to_fit</name></member>
      <member refid="classquantit_1_1vector__lift_1ad878af4ca8650de9eceff7e380b8ae4e" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>size</name></member>
      <member refid="classquantit_1_1vector__lift_1a4b667b1852ca1b7a29537e981e57200c" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>size_type</name></member>
      <member refid="classquantit_1_1MPO_1a46da35951d67347635de9ef02e686269" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>swap</name></member>
      <member refid="classquantit_1_1vector__lift_1a7342e772fe3690acb188e125fc344d5f" prot="public" virt="non-virtual" ambiguityscope="vector_lift&lt; MPO &gt;::"><scope>quantit::MPO</scope><name>swap</name></member>
      <member refid="classquantit_1_1vector__lift_1a4dfa9ff1e27b8a910ac5b234cba6e706" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>Tens</name></member>
      <member refid="classquantit_1_1vector__lift_1ac8dbb3c3520d908dac38494187bdc0cb" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>to</name></member>
      <member refid="classquantit_1_1vector__lift_1ad8a66d5449ae3316b828fe7c491e151f" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>to</name></member>
      <member refid="classquantit_1_1vector__lift_1a9f5fd7e554f2e4c804a7ac55e8b79c05" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>to</name></member>
      <member refid="classquantit_1_1vector__lift_1a7429cdaf9d908a06767666fca723101e" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>to</name></member>
      <member refid="classquantit_1_1vector__lift_1aa15da92b21438c52be24d3e88551e81e" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>to</name></member>
      <member refid="classquantit_1_1vector__lift_1acf800f7152708c60399b3eaeee815a15" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>to_</name></member>
      <member refid="classquantit_1_1vector__lift_1a2e6a6e5a1b1b8cf835663d0d23830aa6" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>vector_lift</name></member>
      <member refid="classquantit_1_1vector__lift_1a27401dbbe9eded9a3bea6878ed4d9336" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>vector_lift</name></member>
      <member refid="classquantit_1_1vector__lift_1ae9306516c3a4653566a88ca2c2df856f" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>vector_lift</name></member>
      <member refid="classquantit_1_1vector__lift_1a94270ac59be8af2fdc95d9fb2155c625" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>vector_lift</name></member>
      <member refid="classquantit_1_1vector__lift_1a6672e6e5f68adddb5c26def466774c86" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>vector_lift</name></member>
      <member refid="classquantit_1_1vector__lift_1aeb6b71be2805d4d29cd6663e64e99280" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>vector_lift</name></member>
      <member refid="classquantit_1_1vector__lift_1af30ef26aed99e9b19774b93ebf351838" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>vector_lift</name></member>
      <member refid="classquantit_1_1vector__lift_1a50fe3d42cb44e23f694885d6e4c64319" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>vector_lift</name></member>
      <member refid="classquantit_1_1vector__lift_1a490c4483a0e44965a7b0e53ef16a99fb" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>vector_lift</name></member>
      <member refid="classquantit_1_1vector__lift_1a5adbd470520fc9b5fe634a52f9acfaec" prot="public" virt="non-virtual"><scope>quantit::MPO</scope><name>VTens</name></member>
      <member refid="classquantit_1_1MPO_1af79bbaaa2250cf1a76a2a70b0607438e" prot="public" virt="virtual"><scope>quantit::MPO</scope><name>~MPO</name></member>
      <member refid="classquantit_1_1vector__lift_1a87720a50724d5f828d5d396f33628790" prot="public" virt="virtual"><scope>quantit::MPO</scope><name>~vector_lift</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
