<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="cquantity_8h" kind="file" language="C++">
    <compoundname>cquantity.h</compoundname>
    <includes refid="quantity__impl_8h" local="yes">Conserved/Composite/quantity_impl.h</includes>
    <includes refid="quantity_8h" local="yes">Conserved/quantity.h</includes>
    <includes refid="templateMeta_8h" local="yes">templateMeta.h</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">fmt/core.h</includes>
    <includes local="no">ostream</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includedby refid="quantity__vector__impl_8h" local="yes">/Users/alex/Documents/Prog/QuantiT/include/Conserved/Composite/quantity_vector_impl.h</includedby>
    <includedby refid="btensor_8h" local="yes">/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/alex/Documents/Prog/QuantiT/include/Conserved/Composite/cquantity.h</label>
        <link refid="cquantity_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Conserved/Composite/quantity_impl.h</label>
        <link refid="quantity__impl_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Conserved/quantity.h</label>
        <link refid="quantity_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Conserved/quantity_utils.h</label>
        <link refid="quantity__utils_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>blockTensor/flat_map.h</label>
        <link refid="flat__map_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>templateMeta.h</label>
        <link refid="templateMeta_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>boost/stl_interfaces/iterator_interface.hpp</label>
      </node>
      <node id="8">
        <label>cassert</label>
      </node>
      <node id="23">
        <label>cstdint</label>
      </node>
      <node id="5">
        <label>doctest/doctest_proxy.h</label>
      </node>
      <node id="9">
        <label>fmt/core.h</label>
      </node>
      <node id="19">
        <label>fmt/format.h</label>
      </node>
      <node id="10">
        <label>fmt/ranges.h</label>
      </node>
      <node id="11">
        <label>functional</label>
      </node>
      <node id="20">
        <label>ios</label>
      </node>
      <node id="12">
        <label>iterator</label>
      </node>
      <node id="21">
        <label>memory</label>
      </node>
      <node id="13">
        <label>numeric</label>
      </node>
      <node id="24">
        <label>ostream</label>
      </node>
      <node id="17">
        <label>tuple</label>
      </node>
      <node id="18">
        <label>type_traits</label>
      </node>
      <node id="14">
        <label>utility</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/Users/alex/Documents/Prog/QuantiT/include/Conserved/Composite/cquantity.h</label>
        <link refid="cquantity_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/Users/alex/Documents/Prog/QuantiT/include/Conserved/Composite/quantity_vector.h</label>
        <link refid="quantity__vector_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/alex/Documents/Prog/QuantiT/include/Conserved/Composite/quantity_vector_impl.h</label>
        <link refid="quantity__vector__impl_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/Users/alex/Documents/Prog/QuantiT/include/MPT.h</label>
        <link refid="MPT_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/Users/alex/Documents/Prog/QuantiT/include/blockTensor/LinearAlgebra.h</label>
        <link refid="blockTensor_2LinearAlgebra_8h_source"/>
      </node>
      <node id="4">
        <label>/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h</label>
        <link refid="btensor_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/Users/alex/Documents/Prog/QuantiT/include/dmrg.h</label>
        <link refid="dmrg_8h_source"/>
      </node>
      <node id="7">
        <label>/Users/alex/Documents/Prog/QuantiT/include/dmrg_logger.h</label>
        <link refid="dmrg__logger_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/Users/alex/Documents/Prog/QuantiT/include/models.h</label>
        <link refid="models_8h_source"/>
      </node>
      <node id="10">
        <label>/Users/alex/Documents/Prog/QuantiT/include/operators.h</label>
        <link refid="operators_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classquantit_1_1any__quantity" prot="public">quantit::any_quantity</innerclass>
    <innerclass refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity__cref_01_4" prot="public">fmt::formatter&lt; quantit::any_quantity_cref &gt;</innerclass>
    <innerclass refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity__ref_01_4" prot="public">fmt::formatter&lt; quantit::any_quantity_ref &gt;</innerclass>
    <innerclass refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity_01_4" prot="public">fmt::formatter&lt; quantit::any_quantity &gt;</innerclass>
    <innernamespace refid="namespacequantit">quantit</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="cquantity_8h_1a6c500b89fab563a2f65c2d7c544f1764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string to_string</definition>
        <argsstring>(quantit::any_quantity_cref cqtt)</argsstring>
        <name>to_string</name>
        <param>
          <type><ref refid="classquantit_1_1vquantity" kindref="compound">quantit::any_quantity_cref</ref></type>
          <declname>cqtt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/Conserved/Composite/cquantity.h" line="448" column="13" declfile="/Users/alex/Documents/Prog/QuantiT/include/Conserved/Composite/cquantity.h" declline="448" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>File:<sp/>TensorGroup.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Project:<sp/>QuantiT</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>File<sp/>Created:<sp/>Tuesday,<sp/>1st<sp/>September<sp/>2020<sp/>1:39:16<sp/>pm</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Alexandre<sp/>Foley<sp/>(Alexandre.foley@usherbrooke.ca)</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>-----</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Last<sp/>Modified:<sp/>Tuesday,<sp/>1st<sp/>September<sp/>2020<sp/>1:39:17<sp/>pm</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Modified<sp/>By:<sp/>Alexandre<sp/>Foley<sp/>(Alexandre.foley@usherbrooke.ca&gt;)</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>-----</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2020<sp/>Alexandre<sp/>Foley</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>GPL<sp/>v3</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>replace<sp/>the<sp/>dynamic_cast&lt;(const)<sp/>quantity&amp;&gt;<sp/>with<sp/>a<sp/>custom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>that<sp/>allow<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>more<sp/>useful<sp/>customized<sp/>message<sp/>when<sp/>a<sp/>bad<sp/>cast<sp/>happen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>D56E4C12_98E1_4C9E_B0C4_5B35A5A3CD17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>D56E4C12_98E1_4C9E_B0C4_5B35A5A3CD17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Conserved/Composite/quantity_impl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Conserved/quantity.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;templateMeta.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/core.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">quantit</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">vquantity</ref><sp/>&amp;;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>=<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">vquantity</ref><sp/>&amp;;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref>;</highlight></codeline>
<codeline lineno="40" refid="classquantit_1_1any__quantity" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>final</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;vquantity&gt;<sp/>impl;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>friend<sp/>any_quantity_ref;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>friend<sp/>any_quantity_cref;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">vquantity</ref><sp/>&amp;other)<sp/>:<sp/>impl(other.clone())<sp/>{}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class...<sp/>Groups,<sp/>class<sp/>=<sp/>std::enable_if_t&lt;conserved::all_group_v&lt;Groups...&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any_quantity(const<sp/>quantity&lt;Groups...&gt;&amp;<sp/>other)<sp/>:<sp/>impl(other.clone())<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>(std::unique_ptr&lt;vquantity&gt;<sp/>&amp;&amp;_impl)<sp/>:<sp/>impl(std::move(_impl))<sp/>{}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Groups,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">=<sp/>std::enable_if_t&lt;<sp/></highlight><highlight class="comment">//<sp/>instantiate<sp/>this<sp/>template<sp/>only<sp/>if<sp/>the<sp/>following<sp/>condition<sp/>are<sp/>satisfied:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::disjunction_v&lt;std::is_same&lt;Groups,<sp/>any_quantity_cref&gt;...,<sp/></highlight><highlight class="comment">//<sp/>refuse<sp/>any<sp/>reference<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;Groups,<sp/>any_quantity_ref&gt;...,<sp/><sp/></highlight><highlight class="comment">//<sp/>refuse<sp/>any<sp/>ref<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;Groups,<sp/>any_quantity&gt;...&gt;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>recursion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>conserved::all_group_v&lt;Groups...&gt;&gt;&gt;<sp/></highlight><highlight class="comment">//<sp/>all<sp/>element<sp/>satisfy<sp/>the<sp/>constraint<sp/>of<sp/>an<sp/>abelian<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classquantit_1_1any__quantity_1a0d55a33316ff6b8caf4ed91fcaa98496" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity_1a0d55a33316ff6b8caf4ed91fcaa98496" kindref="member">any_quantity</ref>(Groups...<sp/>grps)<sp/>:<sp/>impl(std::make_unique&lt;<ref refid="classquantit_1_1quantity" kindref="compound">quantity</ref>&lt;Groups...&gt;&gt;(grps...))</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(conserved::all_group_v&lt;Groups...&gt;<sp/>and</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>std::disjunction_v&lt;std::is_same&lt;Groups,<sp/>any_quantity_cref&gt;...,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;Groups,<sp/>any_quantity_ref&gt;...,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;Groups,<sp/>any_quantity&gt;...&gt;,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>bypass<sp/>the<sp/>enable<sp/>if.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>();<sp/></highlight><highlight class="comment">//<sp/>default<sp/>to<sp/>a<sp/>group<sp/>that<sp/>contain<sp/>only<sp/>the<sp/>neutral<sp/>element.<sp/>avoid<sp/>having<sp/>an<sp/>unitialized<sp/>unique_ptr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;other)<sp/>:<sp/>impl(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.impl?</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.impl-&gt;clone():</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref>(conserved::C&lt;1&gt;(0)).impl-&gt;clone()<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any_quantity(any_quantity_cref<sp/>other);<sp/>//<sp/>explicit<sp/>to<sp/>avoid<sp/>accidental<sp/>copies<sp/>and<sp/>ambiguous<sp/>overloads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any_quantity(any_quantity_ref<sp/>other);<sp/><sp/>//<sp/>explicit<sp/>to<sp/>avoid<sp/>accidental<sp/>copies<sp/>and<sp/>ambiguous<sp/>overloads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">vquantity</ref><sp/>&amp;get();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">vquantity</ref><sp/>&amp;get()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1ad0d315c7b2da8a1328e2b902835f22d4" kindref="member">swap</ref>(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1ad0d315c7b2da8a1328e2b902835f22d4" kindref="member">swap</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>other);<sp/></highlight><highlight class="comment">//<sp/>only<sp/>work<sp/>if<sp/>the<sp/>underlying<sp/>types<sp/>ARE<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1aa8c093a2b1d5c34d94f3ab592ff7e13d" kindref="member">neutral</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a6b6c29d553dcf03438472ddc7b5a95b1" kindref="member">operator=</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>other);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a6b6c29d553dcf03438472ddc7b5a95b1" kindref="member">operator=</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>other);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a6b6c29d553dcf03438472ddc7b5a95b1" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;other);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a6b6c29d553dcf03438472ddc7b5a95b1" kindref="member">operator=</ref>(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;other);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">~any_quantity</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a9c54f38103926637b9d7717c4ccd3398" kindref="member">operator*=</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>other);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>operator+=(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>other);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>op(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1a27770f0b29b8f58e0d4d39c74d93c3fd" kindref="member">operator*</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>lhs,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>rhs);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>operator+(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>lhs,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>rhs);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1a27770f0b29b8f58e0d4d39c74d93c3fd" kindref="member">operator*</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>lhs,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;rhs);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>operator+(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>lhs,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;rhs);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1a27770f0b29b8f58e0d4d39c74d93c3fd" kindref="member">operator*</ref>(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;lhs,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>rhs);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>operator+(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;lhs,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>rhs);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1a27770f0b29b8f58e0d4d39c74d93c3fd" kindref="member">operator*</ref>(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;lhs,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;rhs);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>operator+(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;lhs,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;rhs);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a547346ca6b62b9c7ef8da68c5f5d2f2b" kindref="member">inverse_</ref>();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1acc3573b702443d7407650cd46ff4befe" kindref="member">inverse</ref>()<sp/>const<sp/>&amp;;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1acc3573b702443d7407650cd46ff4befe" kindref="member">inverse</ref>()<sp/>&amp;&amp;;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>friend<sp/>bool<sp/>operator==(any_quantity_cref<sp/>lhs,<sp/>any_quantity_cref<sp/>rhs);</highlight></codeline>
<codeline lineno="189"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>friend<sp/>bool<sp/>operator!=(any_quantity_cref<sp/>lhs,<sp/>any_quantity_cref<sp/>rhs);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">};</highlight></codeline>
<codeline lineno="191" refid="classquantit_1_1any__quantity_1aa8c093a2b1d5c34d94f3ab592ff7e13d" refkind="member"><highlight class="normal">inline<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref>::<ref refid="classquantit_1_1any__quantity_1aa8c093a2b1d5c34d94f3ab592ff7e13d" kindref="member">neutral</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>(impl-&gt;neutral());<sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int64_t<sp/>distance2(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>a,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>b)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.distance2(b);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>a,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>b)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.distance(b);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218" refid="classquantit_1_1any__quantity_1ad0d315c7b2da8a1328e2b902835f22d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1ad0d315c7b2da8a1328e2b902835f22d4" kindref="member">any_quantity::swap</ref>(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::swap;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity_1ad0d315c7b2da8a1328e2b902835f22d4" kindref="member">swap</ref>(other.impl,<sp/>impl);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a6b6c29d553dcf03438472ddc7b5a95b1" kindref="member">any_quantity::operator=</ref>(</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="comment">//<sp/>will<sp/>work<sp/>even<sp/>when<sp/>the<sp/>underlying<sp/>type<sp/>isn&apos;t<sp/>the<sp/>same...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity_1ad0d315c7b2da8a1328e2b902835f22d4" kindref="member">swap</ref>(other);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229" refid="classquantit_1_1any__quantity_1a547346ca6b62b9c7ef8da68c5f5d2f2b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a547346ca6b62b9c7ef8da68c5f5d2f2b" kindref="member">any_quantity::inverse_</ref>()</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;<ref refid="classquantit_1_1vquantity_1a4f83f301617d71c928821df9b3ace621" kindref="member">inverse_</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234" refid="classquantit_1_1any__quantity_1acc3573b702443d7407650cd46ff4befe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1acc3573b702443d7407650cd46ff4befe" kindref="member">any_quantity::inverse</ref>()<sp/>const<sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>(*this).inverse_();<sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1acc3573b702443d7407650cd46ff4befe" kindref="member">any_quantity::inverse</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity_1a547346ca6b62b9c7ef8da68c5f5d2f2b" kindref="member">inverse_</ref>();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a6b6c29d553dcf03438472ddc7b5a95b1" kindref="member">any_quantity::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>*impl<sp/>=<sp/>*other.impl;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1ad0d315c7b2da8a1328e2b902835f22d4" kindref="member">any_quantity::swap</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>other)<sp/>{<sp/>impl-&gt;swap(other);<sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1ad0d315c7b2da8a1328e2b902835f22d4" kindref="member">swap</ref>(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;lhs,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;rhs)<sp/>{<sp/>lhs.<ref refid="classquantit_1_1any__quantity_1ad0d315c7b2da8a1328e2b902835f22d4" kindref="member">swap</ref>(rhs);<sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1ad0d315c7b2da8a1328e2b902835f22d4" kindref="member">swap</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>lhs,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>rhs)<sp/>{<sp/>lhs.swap(rhs);<sp/>}</highlight></codeline>
<codeline lineno="248" refid="classquantit_1_1any__quantity_1ae056980308dca3d6fda141061ce1e29e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>any_quantity::operator<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref>(*impl.get());<sp/>}</highlight></codeline>
<codeline lineno="249" refid="classquantit_1_1any__quantity_1a890408ca918ea9cb0de2e36b5323d282" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>any_quantity::operator<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref>(*impl.get());<sp/>}</highlight></codeline>
<codeline lineno="250" refid="classquantit_1_1any__quantity_1a9c54f38103926637b9d7717c4ccd3398" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a9c54f38103926637b9d7717c4ccd3398" kindref="member">any_quantity::operator*=</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>other)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;<ref refid="classquantit_1_1vquantity_1a18b07748f79d061f88dd654e3dcfa649" kindref="member">op</ref>(other);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255" refid="classquantit_1_1any__quantity_1a27770f0b29b8f58e0d4d39c74d93c3fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1a27770f0b29b8f58e0d4d39c74d93c3fd" kindref="member">operator*</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>lhs,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>(lhs)<sp/>*=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>any_quantity::op(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cond)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>impl-&gt;<ref refid="classquantit_1_1vquantity_1a18b07748f79d061f88dd654e3dcfa649" kindref="member">op</ref>(other,<sp/>cond);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>operator+(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>lhs,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>*<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="262" refid="classquantit_1_1any__quantity_1a6b6c29d553dcf03438472ddc7b5a95b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a6b6c29d553dcf03438472ddc7b5a95b1" kindref="member">any_quantity::operator=</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>other)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>impl<sp/>=<sp/>other.clone();<sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>a<sp/>new<sp/>thing<sp/>or<sp/>copy<sp/>the<sp/>value?<sp/>allocating<sp/>a<sp/>new<sp/>thing<sp/>allow<sp/>changing<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>underlying<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>a<sp/>new<sp/>thing,<sp/>without<sp/>easily<sp/>changing<sp/>the<sp/>underlying<sp/>type,<sp/>we<sp/>cannot<sp/>have<sp/>a<sp/>default<sp/>initialization<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any_quantity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>make<sp/>for<sp/>wonky<sp/>and<sp/>fiddly<sp/>code<sp/>in<sp/>many<sp/>situation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>only<sp/>other<sp/>valid<sp/>option<sp/>is<sp/>to<sp/>test<sp/>the<sp/>type<sp/>and<sp/>take<sp/>a<sp/>decision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/><ref refid="classquantit_1_1any__quantity_1a6b6c29d553dcf03438472ddc7b5a95b1" kindref="member">any_quantity::operator=</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1a6b6c29d553dcf03438472ddc7b5a95b1" kindref="member">operator=</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref>(other));<sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>any_quantity::operator+=(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>*=<sp/>other;<sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inline<sp/>bool<sp/>operator!=(any_quantity_cref<sp/>left,<sp/>any_quantity_cref<sp/>right)<sp/>{<sp/>return<sp/>left.operator!=(right);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inline<sp/>bool<sp/>operator==(any_quantity_cref<sp/>left,<sp/>any_quantity_cref<sp/>right)<sp/>{<sp/>return<sp/>left.operator==(right);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="classquantit_1_1vquantity_1a3625d2f986585bb6ba22fc09c845bd64" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1vquantity_1a3625d2f986585bb6ba22fc09c845bd64" kindref="member">vquantity::inverse</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clone()-&gt;<ref refid="classquantit_1_1any__quantity_1a547346ca6b62b9c7ef8da68c5f5d2f2b" kindref="member">inverse_</ref>();<sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>vquantity::inv()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity_1acc3573b702443d7407650cd46ff4befe" kindref="member">inverse</ref>();<sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>vquantity::neutral()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_neutral();<sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">vquantity</ref><sp/>&amp;any_quantity::get()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*impl;<sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">vquantity</ref><sp/>&amp;any_quantity::get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*impl;<sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1a27770f0b29b8f58e0d4d39c74d93c3fd" kindref="member">operator*</ref>(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>lhs,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;rhs)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs.<ref refid="classquantit_1_1vquantity_1a1b9d16298426bdf26b63d3f248b06e45" kindref="member">op_to</ref>(rhs);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(rhs);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>operator+(<ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>lhs,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;rhs)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs.<ref refid="classquantit_1_1vquantity_1a1b9d16298426bdf26b63d3f248b06e45" kindref="member">op_to</ref>(rhs);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(rhs);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1a27770f0b29b8f58e0d4d39c74d93c3fd" kindref="member">operator*</ref>(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;lhs,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>rhs)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs<sp/>*=<sp/>rhs;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(lhs);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>operator+(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;lhs,<sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>rhs)</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs<sp/>+=<sp/>rhs;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(lhs);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/><ref refid="classquantit_1_1any__quantity_1a27770f0b29b8f58e0d4d39c74d93c3fd" kindref="member">operator*</ref>(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;lhs,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(lhs)<sp/>*<sp/>rhs.get();<sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>operator+(<ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;lhs,<sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>&amp;&amp;rhs)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(lhs)<sp/>+<sp/>rhs.get();<sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">qtt_TEST_CASE(</highlight><highlight class="stringliteral">&quot;composite<sp/>conserved&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">quantit;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">conserved;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>A(C&lt;2&gt;(0),<sp/>Z(3));<sp/></highlight><highlight class="comment">//<sp/>order<sp/>matters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>B(C&lt;2&gt;(1),<sp/>Z(-1));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ccgroup<sp/>=<sp/><ref refid="classquantit_1_1quantity" kindref="compound">quantity&lt;C&lt;2&gt;</ref>,<sp/>Z&gt;;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EFF<sp/>=<sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>(ccgroup(0,<sp/>0));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>(ccgroup(0,<sp/>0)));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>A_copy(A);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>B_copy(B);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>A<sp/>+<sp/>B);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1any__quantity" kindref="compound">any_quantity</ref><sp/>D(Z(0),<sp/>C&lt;2&gt;(1));<sp/></highlight><highlight class="comment">//<sp/>D<sp/>has<sp/>a<sp/>different<sp/>underlying<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>cast<sp/>to<sp/>void<sp/>silences<sp/>warnings<sp/>about<sp/>unused<sp/>return<sp/>values<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>comparison.<sp/>We<sp/>know,<sp/>it&apos;s<sp/>ok.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)(D<sp/>==<sp/>A),</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_cast<sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>A<sp/>and<sp/>D<sp/>have<sp/>different<sp/>derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type:<sp/>they&apos;re<sp/>not<sp/>compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)(D<sp/>!=<sp/>A),</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_cast<sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>A<sp/>and<sp/>D<sp/>have<sp/>different<sp/>derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type:<sp/>they&apos;re<sp/>not<sp/>compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)(D<sp/>*<sp/>A),</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_cast<sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>A<sp/>and<sp/>D<sp/>have<sp/>different<sp/>derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type:<sp/>they&apos;re<sp/>not<sp/>compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(D<sp/>*=<sp/>A,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_cast<sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>A<sp/>and<sp/>D<sp/>have<sp/>different<sp/>derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type:<sp/>they&apos;re<sp/>not<sp/>compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS(D<sp/>+=<sp/>A,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_cast<sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>A<sp/>and<sp/>D<sp/>have<sp/>different<sp/>derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type:<sp/>they&apos;re<sp/>not<sp/>compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_THROWS_AS((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)(D<sp/>+<sp/>A),</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_cast<sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>A<sp/>and<sp/>D<sp/>have<sp/>different<sp/>derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type:<sp/>they&apos;re<sp/>not<sp/>compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>A_ref(A);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>A_cref(A);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_cref</ref><sp/>B_cref(B);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classquantit_1_1vquantity" kindref="compound">any_quantity_ref</ref><sp/>B_ref(B);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any_quantity_ref<sp/>is<sp/>a<sp/>drop-in<sp/>replacement<sp/>for<sp/>a<sp/>reference<sp/>to<sp/>any_quantity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any_quantity_cref<sp/>is<sp/>a<sp/>drop-in-replacement<sp/>for<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any_quantity.<sp/>Those<sp/>two<sp/>classes<sp/>exists<sp/>to<sp/>facilitate<sp/>manipulation<sp/>of<sp/>single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any_quantity<sp/>located<sp/>within<sp/>a<sp/>special<sp/>container<sp/>for<sp/>this<sp/>polymorphic<sp/>type.<sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>extensive<sp/>use<sp/>of<sp/>the<sp/>reference<sp/>type<sp/>within<sp/>the<sp/>tests<sp/>specifically<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verify<sp/>the<sp/>correctness<sp/>of<sp/>their<sp/>implementation.<sp/>We<sp/>advise<sp/>avoiding<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>reference<sp/>type<sp/>whenever<sp/>possible.<sp/>const<sp/>any_quantity&amp;<sp/>and<sp/>any_quantity&amp;<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>perfectly<sp/>fine<sp/>for<sp/>most<sp/>purpose.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(A_copy<sp/>=<sp/>A_ref);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(A_copy<sp/>=<sp/>A_cref);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Checking<sp/>that<sp/>the<sp/>ref<sp/>type<sp/>doesn&apos;t<sp/>loose<sp/>track<sp/>of<sp/>its<sp/>target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(A_cref<sp/>==<sp/>A_ref);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(A_ref<sp/>==<sp/>A_cref);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(A_ref<sp/>==<sp/>A);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(A_ref<sp/>*=<sp/>B);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(A_ref<sp/>==<sp/>A);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(A_ref<sp/>==<sp/>A_cref);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(A_ref<sp/>+=<sp/>B);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(A_ref<sp/>==<sp/>A);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(A_ref<sp/>==<sp/>A_cref);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>A_copy<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(B<sp/>==<sp/>B_copy);<sp/></highlight><highlight class="comment">//<sp/>commute_<sp/>act<sp/>on<sp/>the<sp/>the<sp/>calling<sp/>object<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(A_copy<sp/>==<sp/>A);<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>an<sp/>abelian<sp/>group.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_SUBCASE(</highlight><highlight class="stringliteral">&quot;Cast<sp/>ambiguity&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>subcase<sp/>with<sp/>test<sp/>different<sp/>combination<sp/>of<sp/>any_quantity,any_quantity_ref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>any_quantity_cref<sp/>to<sp/>make<sp/>sure<sp/>all<sp/>operation<sp/>resolve<sp/>correctly.<sp/>Because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>different<sp/>type<sp/>and<sp/>the<sp/>ways<sp/>in<sp/>which<sp/>they<sp/>are<sp/>equivalent,<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mistake<sp/>could<sp/>lead<sp/>to<sp/>some<sp/>operations<sp/>failing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A<sp/>*<sp/>B);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_ref<sp/>*<sp/>B);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_cref<sp/>*<sp/>B);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A<sp/>*<sp/>B_ref);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_ref<sp/>*<sp/>B_ref);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_cref<sp/>*<sp/>B_ref);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A<sp/>*<sp/>B_cref);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_ref<sp/>*<sp/>B_cref);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_cref<sp/>*<sp/>B_cref);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A<sp/>*<sp/>B_cref.inverse());<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operator*(any_quantity_cref&amp;,any_quantity&amp;&amp;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_ref<sp/>*<sp/>B.inverse());<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operator*(any_quantity_cref&amp;,any_quantity&amp;&amp;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_cref<sp/>*<sp/>B_ref.inverse());<sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operator*(any_quantity_cref&amp;,any_quantity&amp;&amp;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//+<sp/>and<sp/>*<sp/>are<sp/>completly<sp/>equivalent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A<sp/>+<sp/>B);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_ref<sp/>+<sp/>B);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_cref<sp/>+<sp/>B);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A<sp/>+<sp/>B_ref);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_ref<sp/>+<sp/>B_ref);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_cref<sp/>+<sp/>B_ref);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A<sp/>+<sp/>B_cref);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_ref<sp/>+<sp/>B_cref);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_cref<sp/>+<sp/>B_cref);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A<sp/>+<sp/>B_cref.inverse());<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operator+(any_quantity_cref&amp;,any_quantity&amp;&amp;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_ref<sp/>+<sp/>B.inverse());<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operator+(any_quantity_cref&amp;,any_quantity&amp;&amp;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qtt_CHECK_NOTHROW(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>_t<sp/>=<sp/>A_cref<sp/>+<sp/>B_ref.inverse());<sp/></highlight><highlight class="comment">//<sp/>this<sp/>should<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operator+(any_quantity_cref&amp;,any_quantity&amp;&amp;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>C<sp/>=<sp/><ref refid="classquantit_1_1any__quantity_1a00bc0f329e8f9bb6c20a4736bd214400" kindref="member">any_quantity</ref>(B_cref);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>==<sp/>A_ref<sp/>*B_cref;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>==<sp/>B_cref<sp/>*A_cref.inverse();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>==<sp/>A_ref<sp/>*B_cref<sp/>*A_cref.inverse();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//A.commute(B)<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>optimisation<sp/>of<sp/>the<sp/>formula<sp/>on<sp/>the<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(C<sp/>==<sp/>A_ref<sp/>*<sp/>B_cref<sp/>*<sp/>A_cref.inverse());<sp/></highlight><highlight class="comment">//<sp/>A.commute(B)<sp/>should<sp/>be<sp/>an<sp/>optimisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>formula<sp/>on<sp/>the<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>C<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>qtt_CHECK(C<sp/>==<sp/>B.inverse()<sp/>*<sp/>A<sp/>*<sp/>B);<sp/></highlight><highlight class="comment">//<sp/>A.commute_(B)<sp/>should<sp/>be<sp/>an<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>formula<sp/>on<sp/>the<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>quantit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="428" refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity__cref_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity__cref_01_4" kindref="compound">fmt::formatter&lt;quantit::any_quantity_cref&gt;</ref><sp/>:<sp/><ref refid="structfmt_1_1formatter_3_01quantit_1_1vquantity_01_4" kindref="compound">fmt::formatter&lt;quantit::vquantity&gt;</ref></highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(<ref refid="classquantit_1_1vquantity" kindref="compound">quantit::any_quantity_cref</ref><sp/>&amp;qt,<sp/>FormatContext<sp/>&amp;ctx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="432"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fmt::formatter&lt;quantit::vquantity&gt;::format(</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qt,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx);<sp/></highlight><highlight class="comment">//<sp/>right<sp/>now<sp/>qt.format_to<sp/>is<sp/>only<sp/>define<sp/>for<sp/>fmt::format_context.<sp/>Should<sp/>work<sp/>for<sp/>any<sp/>output<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal">};</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="439" refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity__ref_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity__ref_01_4" kindref="compound">fmt::formatter&lt;quantit::any_quantity_ref&gt;</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity__cref_01_4" kindref="compound">fmt::formatter&lt;quantit::any_quantity_cref&gt;</ref></highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal">};</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="443" refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity_01_4" kindref="compound">fmt::formatter&lt;quantit::any_quantity&gt;</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structfmt_1_1formatter_3_01quantit_1_1any__quantity__cref_01_4" kindref="compound">fmt::formatter&lt;quantit::any_quantity_cref&gt;</ref></highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exploits<sp/>implicit<sp/>conversion<sp/>to<sp/>get<sp/>the<sp/>job<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">};</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">std::string<sp/>to_string(<ref refid="classquantit_1_1vquantity" kindref="compound">quantit::any_quantity_cref</ref><sp/>cqtt);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>D56E4C12_98E1_4C9E_B0C4_5B35A5A3CD17<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/Users/alex/Documents/Prog/QuantiT/include/Conserved/Composite/cquantity.h"/>
  </compounddef>
</doxygen>
