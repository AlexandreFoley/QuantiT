<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structquantit_1_1btensor_1_1const__block__prop__iter" kind="struct" language="C++" prot="public">
    <compoundname>quantit::btensor::const_block_prop_iter</compoundname>
    <basecompoundref refid="structquantit_1_1btensor_1_1block__prop__iter" prot="public" virt="non-virtual">quantit::btensor::block_prop_iter&lt; const_value_iter &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>class const_value_iter</type>
      </param>
      <param>
        <type>class value_iter</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structquantit_1_1btensor_1_1const__block__prop__iter_1a29f468807c4644d3895eecf818957d85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>quantit::btensor::const_block_prop_iter&lt; const_value_iter, value_iter &gt;::const_block_prop_iter</definition>
        <argsstring>(const block_prop_iter&lt; value_iter &gt; &amp;other)</argsstring>
        <name>const_block_prop_iter</name>
        <qualifiedname>quantit::btensor::const_block_prop_iter::const_block_prop_iter</qualifiedname>
        <param>
          <type>const <ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref>&lt; value_iter &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1155" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1155" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="structquantit_1_1btensor_1_1const__block__prop__iter_1a5afab16bf1e77294b3cb0f7d7fddf45a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref> &amp;</type>
        <definition>const_block_prop_iter &amp; quantit::btensor::const_block_prop_iter&lt; const_value_iter, value_iter &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <qualifiedname>quantit::btensor::const_block_prop_iter::operator++</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1160" column="23" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1160" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="structquantit_1_1btensor_1_1const__block__prop__iter_1a46d6e8919a1acaf096bf22542bb2f5b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref> &amp;</type>
        <definition>const_block_prop_iter &amp; quantit::btensor::const_block_prop_iter&lt; const_value_iter, value_iter &gt;::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <qualifiedname>quantit::btensor::const_block_prop_iter::operator--</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1165" column="23" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1165" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="structquantit_1_1btensor_1_1const__block__prop__iter_1afc18544869b6bce92e201b3f00125db1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref></type>
        <definition>const_block_prop_iter quantit::btensor::const_block_prop_iter&lt; const_value_iter, value_iter &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <qualifiedname>quantit::btensor::const_block_prop_iter::operator++</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1170" column="23" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1170" bodyend="1175"/>
      </memberdef>
      <memberdef kind="function" id="structquantit_1_1btensor_1_1const__block__prop__iter_1a0cd07aa1397f763dafcec351d3cbace9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structquantit_1_1btensor_1_1const__block__prop__iter" kindref="compound">const_block_prop_iter</ref></type>
        <definition>const_block_prop_iter quantit::btensor::const_block_prop_iter&lt; const_value_iter, value_iter &gt;::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <qualifiedname>quantit::btensor::const_block_prop_iter::operator--</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1176" column="23" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1176" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="structquantit_1_1btensor_1_1block__prop__iter_1a3df543d39b290ab26a83107d8db3036c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>base_type::reference</type>
        <definition>base_type::reference quantit::btensor::block_prop_iter&lt; const_value_iter  &gt;::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <qualifiedname>quantit::btensor::block_prop_iter&lt; const_value_iter &gt;::operator*</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1125" column="31" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1125" bodyend="1125"/>
      </memberdef>
      <memberdef kind="function" id="structquantit_1_1btensor_1_1block__prop__iter_1a0ebc887cc3398ac1fde3b663d1da5502" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool quantit::btensor::block_prop_iter&lt; const_value_iter  &gt;::operator==</definition>
        <argsstring>(const block_prop_iter &amp;other)</argsstring>
        <name>operator==</name>
        <qualifiedname>quantit::btensor::block_prop_iter&lt; const_value_iter &gt;::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1126" column="6" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1126" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="structquantit_1_1btensor_1_1block__prop__iter_1a4709e19bd3727fb81df49299c6020cde" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const const_value_iter &amp;</type>
        <definition>const const_value_iter  &amp; quantit::btensor::block_prop_iter&lt; const_value_iter  &gt;::get_val_iter</definition>
        <argsstring>() const</argsstring>
        <name>get_val_iter</name>
        <qualifiedname>quantit::btensor::block_prop_iter&lt; const_value_iter &gt;::get_val_iter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1148" column="22" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1148" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="structquantit_1_1btensor_1_1block__prop__iter_1a2b16d12957c6522f582d9092ed8ddb85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const il_iter &amp;</type>
        <definition>const il_iter &amp; quantit::btensor::block_prop_iter&lt; const_value_iter  &gt;::get_section</definition>
        <argsstring>() const</argsstring>
        <name>get_section</name>
        <qualifiedname>quantit::btensor::block_prop_iter&lt; const_value_iter &gt;::get_section</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1149" column="15" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1149" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="structquantit_1_1btensor_1_1block__prop__iter_1a954f0b4871088a14281a1e7c96368869" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const il_iter &amp;</type>
        <definition>const il_iter &amp; quantit::btensor::block_prop_iter&lt; const_value_iter  &gt;::get_bi</definition>
        <argsstring>() const</argsstring>
        <name>get_bi</name>
        <qualifiedname>quantit::btensor::block_prop_iter&lt; const_value_iter &gt;::get_bi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1150" column="15" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1150" bodyend="1150"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structquantit_1_1btensor_1_1block__prop__iter_1a5513182519de7d9116197aa6e18be06b" prot="public" static="no">
        <type>typename btensor::index_list::const_iterator</type>
        <definition>using quantit::btensor::block_prop_iter&lt; const_value_iter  &gt;::il_iter =  typename btensor::index_list::const_iterator</definition>
        <argsstring></argsstring>
        <name>il_iter</name>
        <qualifiedname>quantit::btensor::block_prop_iter&lt; const_value_iter &gt;::il_iter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1108" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structquantit_1_1btensor_1_1block__prop__iter_1af7f148cf3511d9346e23172bdf0de6e4" prot="public" static="no">
        <type>const_value_iter</type>
        <definition>using quantit::btensor::block_prop_iter&lt; const_value_iter  &gt;::ValueIterator =  const_value_iter</definition>
        <argsstring></argsstring>
        <name>ValueIterator</name>
        <qualifiedname>quantit::btensor::block_prop_iter&lt; const_value_iter &gt;::ValueIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1109" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structquantit_1_1btensor_1_1block__prop__iter_1a8af23874af6757d440bfa3128a5a9cd2" prot="public" static="no">
        <type>boost::stl_interfaces::iterator_interface&lt; <ref refid="structquantit_1_1btensor_1_1block__prop__iter" kindref="compound">block_prop_iter</ref>, std::bidirectional_iterator_tag, typename value_iterator::value_type, typename value_iterator::reference, typename value_iterator::pointer, typename value_iterator::difference_type &gt;</type>
        <definition>using quantit::btensor::block_prop_iter&lt; const_value_iter  &gt;::base_type =  boost::stl_interfaces::iterator_interface&lt; block_prop_iter, std::bidirectional_iterator_tag, typename value_iterator::value_type, typename value_iterator::reference, typename value_iterator::pointer, typename value_iterator::difference_type&gt;</definition>
        <argsstring></argsstring>
        <name>base_type</name>
        <qualifiedname>quantit::btensor::block_prop_iter&lt; const_value_iter &gt;::base_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1122" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>quantit::btensor::block_prop_iter&lt; const_value_iter &gt;</label>
        <link refid="structquantit_1_1btensor_1_1block__prop__iter"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>boost::stl_interfaces::iterator_interface&lt; block_prop_iter&lt; const_value_iter  &gt;, std::bidirectional_iterator_tag, value_iterator::value_type, value_iterator::reference, value_iterator::pointer, value_iterator::difference_type &gt;</label>
      </node>
      <node id="1">
        <label>quantit::btensor::const_block_prop_iter&lt; const_value_iter, value_iter &gt;</label>
        <link refid="structquantit_1_1btensor_1_1const__block__prop__iter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>quantit::btensor::block_prop_iter&lt; const_value_iter &gt;</label>
        <link refid="structquantit_1_1btensor_1_1block__prop__iter"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>boost::stl_interfaces::iterator_interface&lt; block_prop_iter&lt; const_value_iter  &gt;, std::bidirectional_iterator_tag, value_iterator::value_type, value_iterator::reference, value_iterator::pointer, value_iterator::difference_type &gt;</label>
      </node>
      <node id="1">
        <label>quantit::btensor::const_block_prop_iter&lt; const_value_iter, value_iter &gt;</label>
        <link refid="structquantit_1_1btensor_1_1const__block__prop__iter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" line="1153" column="1" bodyfile="/Users/alex/Documents/Prog/QuantiT/include/blockTensor/btensor.h" bodystart="1154" bodyend="1182"/>
    <listofallmembers>
      <member refid="structquantit_1_1btensor_1_1block__prop__iter_1a8af23874af6757d440bfa3128a5a9cd2" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>base_type</name></member>
      <member refid="structquantit_1_1btensor_1_1block__prop__iter_1ac82a2c27b50340c783650ac4c21465c8" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>block_prop_iter</name></member>
      <member refid="structquantit_1_1btensor_1_1block__prop__iter_1a2dbf286610e28c8c2e4035743decc6c9" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>block_prop_iter</name></member>
      <member refid="structquantit_1_1btensor_1_1const__block__prop__iter_1a29f468807c4644d3895eecf818957d85" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>const_block_prop_iter</name></member>
      <member refid="structquantit_1_1btensor_1_1block__prop__iter_1a954f0b4871088a14281a1e7c96368869" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>get_bi</name></member>
      <member refid="structquantit_1_1btensor_1_1block__prop__iter_1a2b16d12957c6522f582d9092ed8ddb85" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>get_section</name></member>
      <member refid="structquantit_1_1btensor_1_1block__prop__iter_1a4709e19bd3727fb81df49299c6020cde" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>get_val_iter</name></member>
      <member refid="structquantit_1_1btensor_1_1block__prop__iter_1a5513182519de7d9116197aa6e18be06b" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>il_iter</name></member>
      <member refid="structquantit_1_1btensor_1_1block__prop__iter_1a3df543d39b290ab26a83107d8db3036c" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>operator*</name></member>
      <member refid="structquantit_1_1btensor_1_1const__block__prop__iter_1a5afab16bf1e77294b3cb0f7d7fddf45a" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>operator++</name></member>
      <member refid="structquantit_1_1btensor_1_1const__block__prop__iter_1afc18544869b6bce92e201b3f00125db1" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>operator++</name></member>
      <member refid="structquantit_1_1btensor_1_1const__block__prop__iter_1a46d6e8919a1acaf096bf22542bb2f5b0" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>operator--</name></member>
      <member refid="structquantit_1_1btensor_1_1const__block__prop__iter_1a0cd07aa1397f763dafcec351d3cbace9" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>operator--</name></member>
      <member refid="structquantit_1_1btensor_1_1block__prop__iter_1a0ebc887cc3398ac1fde3b663d1da5502" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>operator==</name></member>
      <member refid="structquantit_1_1btensor_1_1block__prop__iter_1af7f148cf3511d9346e23172bdf0de6e4" prot="public" virt="non-virtual"><scope>quantit::btensor::const_block_prop_iter</scope><name>ValueIterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
